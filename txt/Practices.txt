=================================================================================
PRACTICES
=================================================================================
1. INCREASE ARRAY INDEX, JUMP TO FIRST ELEMENT WHEN REACHING LAST
2. INCREASE ARRAY CAPACITY
3. INDEXOF WITH STREAM
4. GIT COMMANDS
5. RUNTIME COMPLEXITY
6. CLEARER CODE VIA LAMBDAS
7. USING RIGHT RETURN VALUES FOR BETTER INTEGRATION
8. GET APPLICATION PATHS
9. FAVORING COMPOSITION OVER INHERITANCE
10. PRINCIPLES OF SOFTWARE ENGINEERING
11. QUALITY SOURCES OF JAVA, FRAMEWORKS AND FRONTEND

=================================================================================
1. INCREASE ARRAY INDEX, JUMP TO FIRST ELEMENT WHEN REACHING LAST
=================================================================================
EXAMPLE FOR LOOP AND RESTARTING THE CYCLE IN AN ARRAY:
int index = 0;
int capacity = ...;

void push(int newValue) {
    array[index] = newValue;
    index = ++index % capacity; //increases until reaches capacity then it jumps back to 0
}
END OF EXAMPLE

=================================================================================
2. INCREASE ARRAY CAPACITY
=================================================================================
EXAMPLE FOR MODIFYING ARRAY CAPACITY:
int capacity = ...;
int[] array = new int[capacity];
int index = 0;

void push(int newValue) {
    array[index] = newValue;
    index++;
    //when reaches the limit, doubles the capacity
    if (index == array.length) {
        array = Arrays.copyOf(array, capacity * 2);
        capacity *= 2;
    }
}
END OF EXAMPLE

=================================================================================
3. INDEXOF WITH STREAM
=================================================================================
EXAMPLE FOR FINDING AN ELEMENT VIA STREAM:
class ClassName {
    private long id;
    //fields, constructors, getters
    public long getId() {
        return id;
    }
}
//for Lists:
List<ClassName> list = ...;
...
int indexOf(long id) {
	OptionalInt optionalInt = IntStream.range(0, list.size())
			.filter(n -> list.get(n).getId() == id)
			.findFirst();
	return optionalInt.isEmpty() ? -1 : optionalInt.getAsInt();
}
//for arrays:
ClassName[] array = ...;
...
int indexOf(long id) {
	OptionalInt optionalInt = IntStream.range(0, list.size())
			.filter(n -> array[n].getId() == id)
			.findFirst();
	return optionalInt.isEmpty() ? -1 : optionalInt.getAsInt();
}
END OF EXAMPLE

=================================================================================
4. GIT COMMANDS
=================================================================================
Repository: a project on the remote git server (e.g. Github, GitBucket).
Master: the remote summarized code (alive code) on the git server.
HEAD: the local summarized code.
Snapshot: a committed local version.
Branch: all actions are rendered into branches, dividing from the original; a developer works on a branch.

For codes, the code exists in remote repository, in local repository (e.g. under .git folder) and in local code.
If these are identical, the project is synchronized.

||COMMAND|ACTION||
||git log|shows history of the live branch for commits etc.; for commits shows hash codes as well||
||git checkout branch_name|makes the given branch alive||
||git checkout -b branch_name|creates a new one and makes that branch the live branch||
||git checkout hashcode|reverts to the given snapshot of the live branch; jumps back to the last one for git checkout branch_name||
||git status|shows infos about the active branch (tracked and untracked files)||
||git add file_name|marks the file as staged (means marking them for committing)||
||git add .|marks all files (.) as staged (means marking them for committing)||
||git restore --staged file_name|un-stages the given file, will not be committed||
||git commit|creates a snapshot on the alive branch||
||git commit -m "message"|creates a snapshot on the alive branch, renders the message to that snapshot||
||git push|sends the committed code of actual branch up to server; in case there is not the local active branch on the server yet, suggests a command instead of this||
||git pull|downloads the snapshots of the live branch which are not found at local from the server, therefore updates the local repository and code with the remote one (synchronizes), identical with fetch + merge||
||git fetch|downloads the snapshots of the live branch which are not found at local from the server, therefore changes will appear in code but it will not update the local repository||
||git merge|updates the local repository with the local code; after fetch the project will be synchronized with the remote repository||
||git clone|clones (creates a copy of) a repository||

* is for marking a character, ** is for marking many. ** can mark whole path to a file as well e.g. **a** can mean path/a*.* files. The dot (.) means all files at actual and all its sub-folders.

In case there are pushed snapshots on the server, these will be under the name of the contributor.
Such snapshots are ideal for having backups of local codes as well.

Fetching is ideal for reviewing codes without merging the checked code with local repository. For this, change the actual branch as needed. When finished, change the actual branch to the one in which you work and use pull for synchronizing.

In order to send a pushed snapshot to the master contributor(s), use the Pull Request function on the server.
A master contributor of the reposition (owner) will review the changes, if satisfied, will merge the branch with the Master code.

Usual message for work-in-progress snapshots (not for Pull Request): WIP.

For those files which should not be included in file tracking, put those into .gitignore.

=================================================================================
5. RUNTIME COMPLEXITY
=================================================================================
Marks how many time a method must run in order to finish a task.
The O letter marks the complexity. The n letter means the amount of input data.
For defining the complexity, use the scale of need.

O(n) = 1 means a sequential process which must be executed once only, independent of the amount of data.

EXAMPLE FOR O(N) = 1:
public void push(int key) {
    if (lastIndex == capacity -1) {
        array = Arrays.copyOf(array, capacity * 2);
        capacity *= 2;
    }
    lastIndex = (++lastIndex) % capacity;
    array[lastIndex] = key;
}
END OF EXAMPLE

O(n) = n means that the numbers of executions depends on the number of data (linear). Typically, processing collections by their elements.

EXAMPLE FOR O(N)= N:
public long total(int[] array) {
    long total = 0; //does not count into complexity because for higher length of arrays, it will not change the scale
    for (int i = 0; i < array.length; i++) {
        array[i] = Math.pow(array[i], 2);
    }
    return total; //does not count into complexity because for higher length of arrays, it will not change the scale
}
END OF EXAMPLE

O(n) = n^2 is usually goes for minimum needed complexity of sorting processes. Using iteration or recursion does not matter.
The less optimized sorting uses to indexes, with element under the low index all other elements will be compared.
The execution number would be: (n - 1) + (n - 2) + (n - 3) + ... + (n - n-1) = n^2.
Mathematically proven, the most optimized sorting algorithm needs log(n) executions (O(n) = log(n)). This is called Merge Sort.
Java Collection.sort() method uses Merge Sort for higher amount of data, simpler algorithms for fewer data (the Merge Sort needs more data to work efficiently).

=================================================================================
6. CLEARER CODE VIA LAMBDAS
=================================================================================
Best practices are:
    a. for small function objects, prefer lambdas before anonymous classes
    b. for method references, use lambda instead
    c. if needed, for functional interfaces use the pre-defined ones in java.util.function.Function
    d. when declaring a functional interface, always use the @FunctionalInterface annotation
    e. in case a lambda would need many statements, organize it into an external (helper) method (short and self-explanatory lambda)
    f. in lambda, avoid referencing the input variable types, use them only when the compiler asks for it
    g. avoid braces when have 1 parameter in lambda
    h. using return statement in statement part of lambda is optional, do not use it

EXAMPLE FOR METHOD REFERENCE:
ClassName::methodName
END OF EXAMPLE

EXAMPLE FOR LAMBDA INSTEAD OF METHOD REFERENCE:
() -> methodName()
END OF EXAMPLE

EXAMPLE FOR ORGANIZING BLOCK-BODY LAMBDA:
//instead of this:
(...) -> {
    statement1;
    statement2;
    }
//use this:
private returnValue methodName(...) {
    statement1;
    statement2;
}
...
(...) -> methodName(...)
END OF EXAMPLE

EXAMPLE FOR AVOIDING VARIABLE TYPES IN LAMBDA:
//instead of this:
(type1 var1, type2 var2) -> ...
//use this:
(var1, var2) -> ...
END OF EXAMPLE

EXAMPLE FOR USING BRACES WITH LAMBDA:
() -> statement
parameter -> statement
(parameter1, parameter2, ...) -> statement
END OF EXAMPLE

EXAMPLE FOR AVOIDING RETURN STATEMENT IN LAMBDA:
//instead of this:
() -> return methodName()
//use this:
() -> methodName()
END OF EXAMPLE

=================================================================================
7. USING RIGHT RETURN VALUES FOR BETTER INTEGRATION
=================================================================================
When designing a method, the return value represents the purpose of the method.
Narrowing down the type onto the lower level (e.g. to an int[] or an ArrayList<Integer>) forces the other developer to accept such type when designing his or her own methods.
It is a good practice to design a return value which can be used in several ways, via several types, so the other developer can have its own options.
In case an implementation would be the down-narrowed type, always use its interface as a type.
In many occasions, the pre-defined conversion methods with which a series of data can be created, will offer interface as type from the beginning.

EXAMPLE 1 FOR USING INTERFACE AS RETURN TYPE:
import java.util.List;
import java.util.stream.Stream;
import java.util.stream.IntStream;
...
public List<Integer> newNumbers() {
    return IntStream.rangeClosed(1, 10).boxed().toList();
}
END OF EXAMPLE

EXAMPLE 2 FOR USING INTERFACE AS RETURN TYPE:
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Stream;
...
private static List<Integer> generateCircledPermutations(int number) {
    List<Integer> permutations = new ArrayList<>();
    //manipulating the list by passed number
    return permutations;
}
//on the caller's side, the caller statement can put the return value into a List, an ArrayList, a LinkedList etc.
END OF EXAMPLE

=================================================================================
8. GET APPLICATION PATHS
=================================================================================
8.1. APPLICATION PATHS
8.2. MAVEN TEST RESOURCES PATHS

8.1. APPLICATION PATHS
---------------------------------------------------------------------------------
The installed application has an application root folder from which all sub-folders is created. The sub-folder structure depends on whether a build system is used for development, and if used, depends on the used build system (Maven, Gradle etc.).

EXAMPLE FOR GETTING APPLICATION ROOT FOLDER:
String projectRoot = "."; //or:
String projectRoot = System.getProperty("user.dir");
Path projectRootPath = Paths.get("."); //or:
Path projectRootPath = Path.get(System.getProperty("user.dir"));
END OF EXAMPLE

The installed application will not contain source folders (e.g. /scr folders under Maven). That said, different folders will be accessed by default in development and in production cycle.
The application under IntelliJ IDEA (with or without Maven) can use the following folders for keeping the .java source files:
    - /src
    - /src/main
    - /src/main/java
When accessing these folders, use File.separator instead of / character for platform independence.

Because these folders rarely exist under installed application but the original user dir is not accessible in the development cycle, it is a good practice to check all of them against file existence. Once a file is found, that will point out which folder should be used as application root folder.
Also, it is possible to create numerous unique folders directly under the project root. These folders will be available in the development cycle. With application initialization, always check these folders for existence and if needed, create them before usage.

EXAMPLE FOR DECLARING ALL POSSIBLE APPLICATION ROOT FOLDERS:
import java.io.File;
...
public static String[] listSourceFoldersIntelliJMaven() {
	String userDir = System.getProperty("user.dir");
	return new String[]{
			userDir,
			userDir + File.separator + "src",
			userDir + File.separator + "src" + File.separator + "main",
			userDir + File.separator + "src" + File.separator + "main" + File.separator + "java"
	};
}
END OF EXAMPLE

8.2. MAVEN TEST RESOURCES PATHS
---------------------------------------------------------------------------------
For test environment, Maven uses the src/test/resources folder to read and write files as default.
In order to get access to it, use getAbsolutePath() method of File, or get() method of Paths combined with getAbsolutePath().
In order to access the resources folder under the target folder (which is the target folder of compiler under Maven), use getClassLoader() method of ClassLoader combined with getAbsolutePath().

EXAMPLE 1 FOR GETTING TEST RESOURCES FOLDER:
import java.io.File;
..
String absolutePath = (new File("src" + File.separator + "test" + File.separator + "resources")).getAbsolutePath();
END OF EXAMPLE

EXAMPLE 2 FOR GETTING TEST RESOURCES FOLDER:
import java.nio.file.Paths;
..
String absolutePath = Paths.get("src","test","resources").toFile().getAbsolutePath();
END OF EXAMPLE

EXAMPLE FOR GETTING TARGET RESOURCES FOLDER:
import java.io.File;
...
String absolutePath = (new File(getClass().getClassLoader().getResource("example_resource.txt").getFile())).getAbsolutePath();
END OF EXAMPLE

=================================================================================
9. FAVORING COMPOSITION OVER INHERITANCE
=================================================================================
In OOP, inheritance is used to express that the subclass is a special class of the superclass, in other words presents relationship between the super and the sub.
Code re-usage means that a code can be a composite of previously created codes in case those codes can be used somewhere else as well.
Composition means that the code must show the meaning and purpose of the code. The right composition offers better understanding, better test-ability.
Based upon these three principles, inheritance should not be used for decreasing the amount of written code but not expressing the meaning of inheritance.
Also, inheritance should not decrease the readability and unity (the composition) of the code.
The right composition expresses the strategy itself while inheritance hides it.

EXAMPLE FOR WRONG USAGE OF CODE (INHERITANCE BUT NO COMPOSITION):
class AnnualData {
    private int year;
    private int total;
}
class MonthData extends AnnualData {
    private int month;
}
END OF EXAMPLE

In the above code the inheritance does not express that the MonthData is a special kind of AnnualData.
Also, the subclass is fragile, can harm encapsulation, any changes in the super class can break the subclass.
The correct solution following OOP principles would be the full composition of the second class, and no inheritance.
However, in case the complexity would grow over the edge, it can be good to out-sourcing the common code into a superclass (interface) like below.

EXAMPLE FOR RIGHT USAGE OF CODE (NO INHERITANCE BUT COMPOSITION):
class AnnualData {
    private int year;
    private int total;
}
class MonthData {
    private int year;
    private int month;
    private int total;
}
END OF EXAMPLE

EXAMPLE FOR RIGHT USAGE OF CODE (INHERITANCE AND COMPOSITION):
class StatData {
    private int total;
}
class AnnualData extends StatData {
    private int year;
}
class MonthData extends StatData {
    private int month;
}
END OF EXAMPLE

=================================================================================
10. PRINCIPLES OF SOFTWARE ENGINEERING
=================================================================================
Software engineering is a systematic and procedural approach to software development. It usually consists of collecting and documenting requirements from the users, designing and outlining the platform structure, coding or application development, user and developer testing, as well as after launch operations and maintenance support.
There are some basic principles governing good software engineering:
    - KISS
    - DRY (or DIE)
    - SOLID

The KISS (Keep It Simple, Stupid) principle: all software or application design and deployment should be done as simple as possible, with the least complexities and clear to understand development procedures. This principle ensures that the source code is made easy to debug (whenever required) and future maintenance by any other operations and maintenance software engineer becomes easier. Usually it is advised to keep only one method for one use case, in order to comply with the KISS principle.

The DRY or DIE (Don't Repeat Yourself or Duplication Is Evil) principle: every software engineer should aim to reduce repetition of information or methods within their work in order to avoid redundancy. Therefore, it's recommended to segregate the entire system of consideration into fragments. Dividing the code into smaller segments can help manage the code and use a single segment at any point, by calling, whenever required.

The SOLID principles:
    - S (Single responsibility) principle: every module should be designed to carry out just its responsibility over a single part of the functionality provided by the software
    - O (Open-closed) principle: any part of the software should be available and easily extended for further features, but should not be modified
    - L (Liskov substitution) principle: objects within a program can be replaced with instances of their sub-category types without changing the accuracy of that specific program
    - I (Interface segregation) principle: it is best to avoid adding new functionalities or methods to an existing interface. Rather it is recommended to incorporate a new interface and permit the classes to implement different interfaces based on the need
    - D (Dependency inversion) principle: we should always use a design pattern known as dependency inversion pattern, which is usually resolved by the use of dependency injection
Any software backend code that proceeds with the recommendations of the S.O.L.I.D. principles are much easier to be shared with collaborators, scaled up to meet volume, modified based on user requirements, tested for stress or usability, and managed and troubleshooted without any issues.

=================================================================================
11. QUALITY SOURCES OF JAVA, FRAMEWORKS AND FRONTEND
=================================================================================
https://www.baeldung.com
https://www.bezkoder.com
https://www.w3schools.com
https://blog.knoldus.com
https://html5boilerplate.com

MORE HERE: IntelliJ IDEA Beginner Tutorial | How to create Maven Project, https://www.youtube.com/watch?v=dxn5DsMWhGY
MORE HERE: https://www.jetbrains.com/help/idea/maven-support.html
MORE HERE: Working With Maven in IntelliJ IDEA, https://www.youtube.com/watch?v=pt3uB0sd5kY
MORE HERE: Maven Tutorial - Crash Course, https://www.youtube.com/watch?v=Xatr8AZLOsE
MORE HERE: https://programiz.pro/learn/master-java?utm_source=right-floating-block&utm_campaign=programiz&utm_medium=referral

=>MAVEN

MORE HERE: design patterns, https://www.tutorialspoint.com/design_pattern/design_pattern_overview.htm
