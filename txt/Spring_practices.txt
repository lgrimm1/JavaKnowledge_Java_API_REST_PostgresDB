=================================================================================
SPRING PRACTICES
=================================================================================
1. CREATE LINK TO FILE UNDER PROJECT
2. CREATE LINK TO FILE STORED IN DATABASE
3. DETECT BASE URL TO THE APPLICATION

=================================================================================
1. CREATE LINK TO FILE UNDER PROJECT
=================================================================================
In the example the files are stored under ./upload folder, directly under project root, all files are at the same level.
The aim is to generate links to the files along with protecting the files themselves. That said, the links will reach the /files/{filename} endpoint where the file information as a Resource will be sent back.
The download links will be sent back from the /files endpoint along with filenames.
The /files/{filename} endpoint will also be used for detection of live URL to the server as well.

The repository.findAll() method returns Stream<Path> with the real storage paths of the files, started from the project root.
The payload towards the frontend is instance of the FileInfo class with String filename and String url fields.
The link generator is the convertPathStreamToFileInfoList() method which can be placed into the controller as well as an external @Component class. Testing it is possible only when the application context exists. Although the generator is part of the Business Layer, due to reaching the controller class, independent testing is not possible.

The solution is REST compatible in object/model&view mode. The file_list view will show all filenames with their respective download links or buttons.

EXAMPLE FOR CONTROLLER METHODS:
@GetMapping("/files/{filename:.+}")
public ResponseEntity<Resource> getFile(@PathVariable("filename") String filename) {
	return service.getFile(filename);
}

@GetMapping("/files")
public ModelAndView getListFiles(Model model) {
	model.asMap().clear();
	return service.getFileList();
}
END OF EXAMPLE

EXAMPLE FOR SERVICE METHODS:
public ResponseEntity<Resource> getFile(String filename) {
	if (filename == null || filename.isBlank()) {
		return ResponseEntity
				.badRequest()
				.header(HttpHeaders.CONTENT_DISPOSITION, "")
				.body(null);
	}
	return repository.getByFilename(filename)
			.map(resource -> ResponseEntity
					.ok()
					.header(HttpHeaders.CONTENT_DISPOSITION,
							"attachment; filename=\"" + resource.getFilename() + "\"")
					.body(resource))
			.orElseGet(() -> ResponseEntity
					.badRequest()
					.header(HttpHeaders.CONTENT_DISPOSITION, "")
					.body(null));
}

public ModelAndView getFileList() {
	return new ModelAndView("file_list", "file_info_list", convertPathStreamToFileInfoList(repository.findAll()));
}
END OF EXAMPLE

EXAMPLE FOR LINK GENERATOR METHOD:
public List<FileInfo> convertPathStreamToFileInfoList(Stream<Path> pathStream) {
	return pathStream
			.map(path -> {
				String filename = path.getFileName().toString();
				String url = MvcUriComponentsBuilder
						.fromMethodName(FileInFolderController.class, "getFile", path.getFileName().toString())
						.build()
						.toString();
				return new FileInfo(filename, url);
			})
			.collect(Collectors.toList());
}
END OF EXAMPLE

=================================================================================
2. CREATE LINK TO FILE STORED IN DATABASE
=================================================================================
In the example the files are stored in a database.
The aim is to generate download links to the files. That said, the links will reach the /files/{filename} endpoint where the file as a byte[] will be sent back.
The download links will be sent back from the /files endpoint along with filenames.

The files are handled with JPA Repository. The file content is stored as TEXT (infinite VARCHAR).
The repository.findAll() method returns Stream<String> with the stored filenames.
The payload towards the frontend is instance of the FileInfo class with String filename and String url fields. This can be extended by adding String fileType and long length fields where length is generated via calculating byte[].length within the link generator method.
The link generator is the convertFileNameStreamToFileInfoList() method which can be placed into the controller as well as an external @Component class. Testing it is possible only when the application context exists.

The solution is REST compatible in object/model&view mode. The file_list view will show all filenames with their respective download links or buttons.

EXAMPLE FOR CONTROLLER METHODS:
@GetMapping("/files/{filename:.+}")
public ResponseEntity<byte[]> getFile(@PathVariable("filename") String filename) {
	return service.getFile(filename);
}

@GetMapping("/files")
public ModelAndView getListFiles(Model model) {
	model.asMap().clear();
	return service.getFileList();
}
END OF EXAMPLE

EXAMPLE FOR SERVICE METHODS:
public ResponseEntity<byte[]> getFile(String filename) {
	if (filename == null || filename.isBlank()) {
		return ResponseEntity
				.badRequest()
				.header(HttpHeaders.CONTENT_DISPOSITION, "")
				.body(null);
	}
	return repository.getByFilename(filename)
			.map(entity -> ResponseEntity
					.ok()
					.header(HttpHeaders.CONTENT_DISPOSITION,
							"attachment; filename=\"" + entity.getFileName() + "\"")
					.body(entity.getContent().getBytes()))
			.orElseGet(() -> ResponseEntity
					.badRequest()
					.header(HttpHeaders.CONTENT_DISPOSITION, "")
					.body(null));
}

public ModelAndView getFileList() {
	return new ModelAndView("file_list", "file_info_list", convertFileNameStreamToFileInfoList(repository.findAll()));
}
END OF EXAMPLE

EXAMPLE FOR LINK GENERATOR METHOD:
public List<FileInfo> convertFileNameStreamToFileInfoList(Stream<String> filenames) {
	return filenames
			.map(filename -> new FileInfo(filename, filenameToUrl(filename)))
			.collect(Collectors.toList());
}

private String filenameToUrl(String filename) {
	return ServletUriComponentsBuilder
			.fromCurrentContextPath()
			.path("/files/")
			.path(filename)
			.toUriString();
}
END OF EXAMPLE

EXAMPLE FOR ENTITY FIELDS:
private long id;
String fileName;
String content;
private String fileType;
END OF EXAMPLE

=================================================================================
3. DETECT BASE URL TO THE APPLICATION
=================================================================================
The URL contains the scheme (e.g. http), the domain name (e.g. domain.com), the port if defined (e.g. :8080), the path to the endpoint (e.g. /endpoint) and the query parameters (e.g. search?title=ABC&author=XYZ).
The base URL contains only the first three (e.g. http://domain.com:8080). The base URL can be different with every incoming request. The endpoint and after that depend on the application which means they are defined within the Communication layer.
There can be certain tasks when the actual base URL must be detected. That said, only upon the actual request, the base URL can be determined.
For detection, the application context is needed which means it can happen from a controller class or a bean (component).
The alternative solution below does not examine the URL components for their existence (e.g. existence of port number is not obligatory).

EXAMPLE FOR DETECTING BASE URL (HTTPSERVLETREQUEST, IN CONTROLLER):
//endpoint:
@GetMapping("/endpoint")
public ModelAndView methodName(HttpServletRequest request, Model model) {
	model.asMap().clear();
	return service.methodName(detectBaseUrl(request));
}
//detect base URL
private String detectBaseUrl(HttpServletRequest request) {
	return ServletUriComponentsBuilder
			.fromRequestUri(request)
			.replacePath(null) //trims to base URL
			.build()
			.toUriString();
}
END OF EXAMPLE

EXAMPLE FOR DETECTING BASE URL (HTTPSERVLETREQUEST, IN CONTROLLER OR IN BEAN):
//endpoint:
@GetMapping("/endpoint")
public ModelAndView methodName(Model model) {
	model.asMap().clear();
	return service.methodName(detectBaseUrl());
}
//detect base URL
private String detectBaseUrl() {
	return ServletUriComponentsBuilder
			.fromCurrentContextPath()
			.build()
			.toUriString();
}
END OF EXAMPLE

EXAMPLE FOR DETECTING BASE URL (HTTPSERVLETREQUEST, IN CONTROLLER OR IN BEAN, ALTERNATIVE):
//endpoint:
@GetMapping("/endpoint")
public ModelAndView methodName(HttpServletRequest request, Model model) {
	model.asMap().clear();
	return service.methodName(detectBaseUrl(request));
}
//detect base URL
private String detectBaseUrl(HttpServletRequest request) {
	return ""
			+ request.getScheme() + "://"
			+ request.getServerName()
			+ ":" + request.getServerPort()
			+ request.getContextPath();
}
END OF EXAMPLE
