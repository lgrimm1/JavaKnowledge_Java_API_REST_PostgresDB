=================================================================================
SPRING BOOT REQUESTS
=================================================================================
1. DATA VALIDATION
2. GET REQUESTS
3. POST, PUT, DELETE, OPTIONS, PATCH, HEAD REQUESTS
4. PARAMETERS IN REQUEST

=================================================================================
1. DATA VALIDATION
=================================================================================
Although many values can be valuated with frontend scripts and tag parameters, because of independent backend development, all data should be validated at backend.
An endpoint is reached when the request URI matches.
An exception is raised by Spring when data binding is unsuccessful for that controller method.
In case data binding is successful as well, the incoming data must be checked for properness. This checking (validation) can be handled by framework components, however, can be handled by service methods when the controller method calls them with passing the incoming arguments.
A controller method can have zero or any number of arguments in its signature. Also, it can have String or any object as return value.

In case an argument validation is failed, there can be two code flow type in the service method:
    - raise an exception (needs exception handler class)
    - returns value based upon error
That said, the service method needs to have a validation block at the very beginning of the method.

EXAMPLE FOR VALIDATION IN SERVICE METHOD:
public returnType serviceMethod(Type1 var1, Type2 var2, ...) {
    if (conditions_checking_whether_incoming_data_is_inproper) {
        //preparing returned value for error
        return ...;
    }
    //process in case of proper data
    //prepare returned value
    return ...;
}
END OF EXAMPLE

=================================================================================
2. GET REQUESTS
=================================================================================
About GET requests in controller class:
    - for every received request parameter, the @RequestParam(...) annotation is needed then the type and the name of the passed parameter.
    - for every parameter received from a template model, the @ModelAttribute annotation is needed then the type and the name of the passed parameter
    - the GET request will arrive at the endpoint marked as "endpointName" (see below)
    - the endpoint is reached 1: the next request arrives: base_path/endpointName, or:
    - the endpoint is reached 2: the next request arrives: base_path/endpointName?, or:
    - the endpoint is reached 3: the next request arrives: base_path/endpointName?parameter_name_in_request=some_value, or:
    - the endpoint is reached 4: the next request arrives: base_path/endpointName?parameter_name_in_request=some_value&title=some_other_value
    - the passedObjectName (see below) will receive some_value, coming from parameter_name_in_request parameter in request
    - if required=true (see below), the request reaches the endpoint only when that parameter was passed
    - if no value is given in the request, passedObjectName will take the defaultValue value (see below), in case no default is defined, null will be passed
    - the Model model (see below) will be used for storing response data in model&view mode
    - in model&view mode the returned value will be the name of the targeted template
    - in object mode the returned value will be an object
    - in object/model&view mode the returned value will be a ModelAndView object, containing targeted template name and the Model
    - with GET request, no request body should be sent and received, if needed use other request types

Relations between GET request parameter and passed parameter:
    - endpoint: runtime error, no parameter passed from browser but needed on server side
    - endpoint?parameter: passes null
    - endpoint?parameter=: passes null
    - endpoint?parameter=xxx: passes value
In case the passed type is Number, only number will be passed (or as it narrowed down to Double or Integer), otherwise error page will be sent back.

Parameters of a request parameter:
    - name = "..." (parameter name in request)
    - required = true (optional)
    - defaultValue="..." (optional)
In case of name parameter only, using "..." is satisfying.
In case of required = false or not defined, and the parameter is not defined in the GET query, the method argument will receive null.
In case the default value is defined and there is no value in the query for that, the method argument will receive the default value.

EXAMPLE FOR CONTROLLER METHOD (GET REQUEST WITH QUERY, OBJECT MODE):
class ResponseClassName {...} //somewhere in Business layer
...
@GetMapping("/endpointName")
@ResponseBody
public ResponseClassName controllerMethod(
            @RequestParam("parameter_name1") passedObjectType1 passedObjectName1,
            @RequestParam("parameter_name2") passedObjectType2 passedObjectName2,
            ...
            ) {
    //process passedObjectNameX
    return ...;
}
END OF EXAMPLE

EXAMPLE FOR CONTROLLER METHOD (GET REQUEST WITH QUERY, MODEL&VIEW MODE):
@GetMapping("/endpointName")
public String controllerMethod(
            @RequestParam("parameter_name1") passedObjectType1 passedObjectName1,
            @RequestParam("parameter_name2") passedObjectType2 passedObjectName2,
            ...,
            Model model
            ) {
    model.asMap().clear();
    //process passedObjectNameX
    model.addAttribute("parameter_nameX", newObjectX);
    ...
	return viewName;
}
END OF EXAMPLE

EXAMPLE FOR CONTROLLER METHOD (GET REQUEST WITH QUERY, OBJECT/MODEL&VIEW MODE, PAYLOAD):
class Payload {...} //somewhere among data models
...
@GetMapping("/endpointName")
@ResponseBody
public ModelAndView controllerMethod(
            @RequestParam("parameter_name1") passedObjectType1 passedObjectName1,
            @RequestParam("parameter_name2") passedObjectType2 passedObjectName2,
            ...,
            Model model
            ) {
    model.asMap().clear();
    //process passedObjectNameX, invoke new Payload(...) for newObjectX
	return new ModelAndView(viewName, "payload", payload);
}
END OF EXAMPLE

EXAMPLE FOR CONTROLLER METHOD SIGNATURE HANDLING DIFFERENT ENDPOINTS:
@GetMapping(value = {"/endpointName1", "/endpointName2"})
public String methodName(...) {...}
END OF EXAMPLE

=================================================================================
3. POST, PUT, DELETE, OPTIONS, PATCH, HEAD REQUESTS
=================================================================================
About POST, PUT, DELETE, OPTIONS, PATCH, HEAD requests in controller class:
    - for having request parameters from a query, use the GET request type
    - for every parameter received from a template, the @ModelAttribute annotation is needed then the type and the name of the passed parameter (model&view, object/model&view modes)
    - for every parameter received in object mode, the @RequestBody annotation is needed then the type and the name of the passed parameter
    - the request will arrive at the endpoint
    - the endpoint is always reached when it was sent to endpointName
    - the request body will be hidden from URL field of the browser (from the URL field always GET arrives)
    - passedObjectName (see below) will receive some_value from the sender page in browser
    - if no value is given in the request, passedObjectName will take the defaultValue value (see below), in case no default is defined, null will be passed
    - the Model model (see below) will be used for storing response data in model&view mode
    - in model&view mode the returned value will be the name of the targeted template
    - in object mode the returned value will be an object (a wrapper, a custom payload object or a Map<String, Object>)
    - in object/model&view mode the returned value will be a ModelAndView object
    - the request body can contain more variables but all will be rendered into one transfer object or a Map object where keys are variable names

Please note, in model&view and object/model&view modes, testability declares the number of @ModelAttribute arguments. When using MockMVC for testing, only one @ModelAttribute argument is advised. In case the model contains more data, such argument can be a custom payload class (fields are the data).

EXAMPLE FOR CONTROLLER METHOD (POST, PUT, PATCH OR DELETE REQUEST, OBJECTS AS REQUEST BODY, OBJECT MODE):
@PostMapping("/endpointName") //or:
@PutMapping("/endpointName") //or:
@PatchMapping("/endpointName") //or:
@DeleteMapping("/endpointName")
@ResponseBody
public ResponseClassName methodName(
        @RequestBody RequestClassName1 requestObjectName1,
        @RequestBody RequestClassName2 requestObjectName2,
        ...
        ) {
    return serviceName.serviceMethod(requestObjectName1, ...);
}
END OF EXAMPLE

EXAMPLE FOR CONTROLLER METHOD (POST, PUT, PATCH, OR DELETE REQUEST, MAP AS REQUEST BODY, OBJECT MODE):
@PostMapping("/endpointName") //or:
@PutMapping("/endpointName") //or:
@PatchMapping("/endpointName") //or:
@DeleteMapping("/endpointName")
@ResponseBody
public ResponseClassName methodName(@RequestBody final Map<String, String> requestMapName) {
    return serviceName.serviceMethod(requestMapName); //or:
    return serviceName.serviceMethod(requestMapName.get(variableName1), requestMapName.get(variableName2), ...);
}
END OF EXAMPLE

EXAMPLE FOR CONTROLLER METHOD (POST, PUT, PATCH, OR DELETE REQUEST, MODEL ATTRIBUTE AS REQUEST BODY, MODEL&VIEW MODE, PAYLOAD):
class Payload {...} //somewhere among data models
...
@PostMapping("/endpointName") //or:
@PutMapping("/endpointName") //or:
@PatchMapping("/endpointName") //or:
@DeleteMapping("/endpointName")
public String methodName(
        @ModelAttribute("payload") Payload payload,
        Model model) {
    model.asMap().clear();
    //process payload
    model.addAttribute("parameter_nameX", newObjectX);
    ...
	return viewName;
}
END OF EXAMPLE

EXAMPLE FOR CONTROLLER METHOD (POST, PUT, PATCH, OR DELETE REQUEST, MODEL ATTRIBUTE AS REQUEST BODY, OBJECT/MODEL&VIEW MODE, PAYLOAD):
class Payload {...} //somewhere among data models
...
@PostMapping("/endpointName") //or:
@PutMapping("/endpointName") //or:
@PatchMapping("/endpointName") //or:
@DeleteMapping("/endpointName")
@ResponseBody
public ModelAndView methodName(
        @ModelAttribute("payload") Payload payload,
        Model model) {
    model.asMap().clear();
    //process payload
    return new ModelAndView(viewName, "payload", newPayload);
}
END OF EXAMPLE

EXAMPLE FOR CONTROLLER METHOD SIGNATURE HANDLING DIFFERENT ENDPOINTS:
@PostMapping(value = {"/endpointName1", "/endpointName2"})
public String methodName(...) {...}
END OF EXAMPLE

=================================================================================
4. PARAMETERS IN REQUEST
=================================================================================
The endpoint can contain data which is an actual parameter e.g. /employee/id where the id is a number.
Along with this technique query can be sent as well e.g. /employee/id?month=3.

In the endpoint the {} marks which part will mean parameter value, this value will be rendered to method parameter name and type.
An endpoint can contain more parameters as well. In this case in the method signature parameters can be received independently, or merged into a Map where keys are the parameter names.

Because the parameter part of an endpoint forms one or more variables, the fix part must be unique in the controller.
Furthermore, it is possible that the parameter values will be null in case the endpoint path ends before all values are written into.

All request parameters accesses with @PathVariable have required flag by default. That said, by default, rendering more endpoints to one method with @PathVariable defaults will result 404 error for the latter endpoints.
For default values, using the Optional version below is advised.

Important as well that Spring identifies the last dot (.) in an endpoint as separator of extension. That said, in case the needed parameter would contain dot e.g. we are waiting a domain name with .com ending, the result will not contain the .com part. This is true only for the last parameter.
Solution is to make the compiler to use the dot as part of last parameter, or use an ending / sign which pushes the aim of last parameter; see below.

The endpoint path marks a virtual folder system. it is possible to use request parameter and path characters on the same virtual level:
    - /api/employees/{name} (path variable forms a level)
    - /api/employees/{name}.xml (path variable forms a part of a level)

In a path variable, acceptable regular expression (regex) can be defined as well:
    - /api/employees/{id:[\\d]+}/{name}"

EXAMPLE FOR PARAMETER IN REQUEST (TEMPLATE PARAMETER NAME EQUALS METHOD PARAMETER NAME):
@GetMapping("/api/employees/{id}")
@ResponseBody
public String getEmployeesById(@PathVariable String id) {
    return "ID: " + id;
}
END OF EXAMPLE

EXAMPLE FOR PARAMETER IN REQUEST (TEMPLATE PARAMETER NAME DIFFERS FROM METHOD PARAMETER NAME):
@GetMapping("/api/employees/{id}")
@ResponseBody
public String getEmployeesById(@PathVariable("id") String employeeId) { //or:
public String getEmployeesById(@PathVariable(value = "id") String employeeId) {
    return "ID: " + id;
}
END OF EXAMPLE

EXAMPLE FOR MORE PARAMETERS IN REQUEST (INDEPENDENT VARIABLES):
@GetMapping("/api/employees/{id}/{month}")
@ResponseBody
public String getEmployeesByIdAndMonth(@PathVariable String id, @PathVariable String month) {
    return "ID: " + id + ", name: " + name;
}
END OF EXAMPLE

EXAMPLE FOR MORE PARAMETERS IN REQUEST (SUMMARIZED INTO MAP):
@GetMapping("/api/employees/{id}/{month}")
@ResponseBody
public String getEmployeesByIdAndMonth(@PathVariable final Map<String, String> pathVarsMap) {
    String id = pathVarsMap.get("id");
    String month = pathVarsMap.get("month");
    if (id != null && month != null) {
        return "ID: " + id + ", month: " + month;
    }
    return "Missing Parameters";
}
END OF EXAMPLE

EXAMPLE FOR HANDLING THE DOT PROBLEM:
@GetMapping("/example/{firstValue}/{secondValue:.+}")
public void example(@PathVariable("firstValue") String firstValue, @PathVariable("secondValue") String secondValue) {
    //...
}
@GetMapping("/example/{firstValue}/{secondValue}/")
public void example(@PathVariable("firstValue") String firstValue, @PathVariable("secondValue") String secondValue) {
    //...
}
END OF EXAMPLE

EXAMPLE FOR HANDLING MORE ENDPOINTS WITH PARAMETERS (REQUIRED FLAG):
@GetMapping(value = {"/api/employeeswithrequiredfalse", "/api/employeeswithrequiredfalse/{id}"})
@ResponseBody
public String getEmployeesByIdWithRequiredFalse(@PathVariable(required = false) String id) {
    if (id != null) {
        return "ID: " + id;
    } else {
        return "ID missing";
    }
}
END OF EXAMPLE

EXAMPLE FOR HANDLING MORE ENDPOINTS WITH PARAMETERS (OPTIONAL):
@GetMapping(value = { "/api/employeeswithoptional", "/api/employeeswithoptional/{id}" })
@ResponseBody
public String getEmployeesByIdWithOptional(@PathVariable Optional<String> id) {
    if (id.isPresent()) {
        return "ID: " + id.get();
    } else {
        return "ID missing"; //or: handling default value
    }
}
END OF EXAMPLE

EXAMPLE FOR HANDLING MORE ENDPOINTS WITH PARAMETERS (MAP):
@GetMapping(value = { "/api/employeeswithmap/{id}", "/api/employeeswithmap" })
@ResponseBody
public String getEmployeesByIdWithMap(@PathVariable Map<String, String> pathVarsMap) {
    String id = pathVarsMap.get("id");
    if (id != null) {
        return "ID: " + id;
    } else {
        return "ID missing";
    }
}
END OF EXAMPLE

=>SPRING BOOT
=>SPRING BOOT CONTROLLER
=>SPRING MODELANDVIEW
