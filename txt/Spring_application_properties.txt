=================================================================================
SPRING APPLICATION PROPERTIES
=================================================================================
1. GENERALLY
2. DATABASE PARAMETERS
3. OTHER PARAMETERS

=================================================================================
1. GENERALLY
=================================================================================
All the Spring environmental settings can be defined in one or several external files. Such an external file contains a full setting-package set for a purpose, and only one such file can be active at a time. With other words, this file contains configuration and environment-specific settings of the application, mainly for Hibernate (part of Spring Data JPA core).

The validity of such settings depends on where the specific setting file is placed in the project hierarchy and by what filename.
In case production settings are missing, development settings will be used.

||SETTINGS TYPE|POSITION IN PROJECT HIERARCHY|FILENAME PREFIX||
||general|src/main/resources|application||
||development|src/main/resources|application-development||
||test|src/test/resources|application||
||production|src/main/resources|application-production||

The settings file can be written in two different formats. The two formats are equivalent.

||FILE FORMAT|EXTENSION||
|properties|.properties||
||Yaml|.yml||

EXAMPLE FOR SETTINGS FORMATS (GENERALLY, PROPERTIES):
level1.level2.level3 = value
END OF EXAMPLE

EXAMPLE FOR SETTINGS FORMATS (GENERALLY, YAML):
level1:
    level2:
        level3: "value"
END OF EXAMPLE

EXAMPLE FOR SETTINGS FORMATS (PROPERTIES):
spring.datasource.url = jdbc:h2:mem:testdb
spring.datasource.driverClassName = org.h2.Driver
spring.datasource.username = sa
spring.datasource.password = password
spring.jpa.database-platform = org.hibernate.dialect.H2Dialect
END OF EXAMPLE

EXAMPLE FOR SETTINGS FORMATS (YAML):
spring:
    datasource:
        url: jdbc:h2:mem:mydb
        driverClassName: org.h2.Driver
        username: sa
        password: password
    jpa:
        database-platform: org.hibernate.dialect.H2Dialect
END OF EXAMPLE

When a setting has default value and the needed value would follow that default, presenting of the setting line is optional.
Commenting is done by using the # character which marks that everything after it is a comment.

=================================================================================
2. DATABASE PARAMETERS
=================================================================================
||DATABASE ACCESS PARAMETERS|DESCRIPTION||
||spring.datasource.driverClassName|what driver Hibernate should use for the database, needed when JPA uses Hibernate for this configuration||
||spring.datasource.url|the database URL||
||spring.datasource.username|login data of the database||
||spring.datasource.password|login data of the database||

||DATABASE MANAGEMENT PARAMETERS|DESCRIPTION||
||spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation|optional||
||spring.jpa.properties.hibernate.dialect|in what dialect the SQL command should be written||
||spring.jpa.hibernate.ddl-auto|how Hibernate should initialize the database during development phase||
||spring.jpa.show-sql|sets visibility of executed SQL commands on console||
||spring.jpa.properties.hibernate.format_sql|sets formatting on printed SQL commands on console, optional||
||spring.jpa.defer-datasource-initialization|the true value forces Hibernate to initialize first, then the database initialization files can be loaded||
||spring.sql.init.mode|the never value disables loading database initialization files||
||spring.sql.init.data-locations|defines files which contains SQL commands for database initialization (JDBC support)||
||spring.jpa.properties.hibernate.hbm2ddl.import_files|defines files which contains SQL commands for database initialization (Hibernate support)||

||H2 PARAMETERS|DESCRIPTION||
||spring.h2.console.enabled|TRUE starts the H2 Database administration tool at http://localhost:8080 with /h2-console endpoint (path) when enabled||
||spring.h2.console.path|modifies the default endpoint (path) of the H2 Database administration tool||
||spring.h2.console.settings.trace|FALSE disables trace outputs||
||spring.h2.console.settings.web-allow-others|FALSE disables remote access||

||LOGGING PARAMETERS|DESCRIPTION||
||logging.level.org.hibernate.SQL|for DEBUG value prints SQL debug information on console, optional||
||logging.level.org.hibernate.type.descriptor.sql|for TRACE value prints SQL debug information on console for prepared statements, optional||

The database communicates through a port defined at installation. The default ports are:
    - H2: same with application port (8080 by default)
    - mySQL: 3306
    - PostgreSQL: 5432
    - Oracle: 1521
    - SQL Server: 1434

The database login data (username and password) can be default which comes from the database installation or can be unique which was pre-prepared in the database.
Default usernames:
    - H2: sa
    - mySQL: root
    - PostgreSQL: postgres
Default password:
    - H2: (none)
For H2, the given login parameters will modify the default login data with which the database will be created.

The spring.jpa.hibernate.ddl-auto parameter is needed only in development phase. It can have the next values:
    - create-only (creates the database)
    - create (creates the schema and destroys previous data)
    - update (updates the schema)
    - drop (drops the database)
    - create-drop (creates the schema, then drops the schema when the SessionFactory is closed explicitly, typically when the application is stopped)
    - validate (validates the schema, makes no changes to the database)
    - none (does nothing with the schema, makes no changes to the database)
While pure backend development is ongoing, create-drop is proper since the structure is not finalized.
Once the database (entity) design time is over, and automation is needed in database creation, use create or create-only once.
In production time, use none or validate (latter prevents malfunction in case the structure is damaged or unwillingly changed, and the server will not start up).
When the existing database structure should be changed, use update (on live database must look for possible data loss).
In case there is a Configuration bean with CommandLineRunner which adds prepared records for development, will be added with create, create-only etc., but must not and will not do it in production mode (e.g. validation), will cause exception.

For SQL data locations, the next value variations can be used:
    - filename (will be searched in the src/main/resources or src/test/resources folder)
    - filename1,filename2,... (several files)
    - /path/filename (different folder)
    - (same for several files)
    - ...*... (marks common part)
The location can either be set via Hibernate (spring.jpa.properties.hibernate.hbm2ddl.import_files) and JDBC (spring.sql.init.data-locations) support. Do not use both supports at the same time.
In Spring Boot 2.5.0 and before, for JDBC support, use spring.datasource.data property instead.

EXAMPLE FOR SQL DATA LOCATION SETTINGS:
spring.sql.init.data-locations = import_active_users.sql,import_inactive_users.sql #or:
spring.jpa.properties.hibernate.hbm2ddl.import_files = import_active_users.sql,import_inactive_users.sql

spring.sql.init.data-locations=import_*_users.sql #or:
spring.jpa.properties.hibernate.hbm2ddl.import_files=import_*_users.sql
END OF EXAMPLE

For H2 datasource url, the next possible values can be assigned:
    - jdbc:h2:mem:[databaseName] (in-memory storage, name is optional)
    - jdbc:h2:file:[/path/databaseName] (in-file storage, path starts from project root, name and path are optional, keeps data on restart)

EXAMPLE FOR CONNECTION DATA (APPLICATION.PROPERTIES FILE, H2):
spring.datasource.driverClassName = org.h2.Driver
spring.datasource.url = jdbc:h2:mem:databaseName
spring.datasource.username = sa
spring.datasource.password =

spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.H2Dialect
spring.jpa.hibernate.ddl-auto = create-drop
spring.jpa.show-sql = true
spring.jpa.properties.hibernate.format_sql = true

spring.h2.console.enabled = true #default is none on default path /h2-console
spring.h2.console.path = /h2-ui
END OF EXAMPLE

EXAMPLE FOR CONNECTION DATA (APPLICATION.PROPERTIES FILE, MYSQL):
spring.datasource.url = jdbc:mysql://localhost:3306/databaseName?useSSL=false
spring.datasource.username =
spring.datasource.password =

spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQLInnoDBDialect
spring.jpa.hibernate.ddl-auto = create-drop
spring.jpa.show-sql = true
spring.jpa.properties.hibernate.format_sql = true
END OF EXAMPLE

EXAMPLE FOR CONNECTION DATA (APPLICATION.PROPERTIES FILE, POSTGRESQL):
spring.datasource.url = jdbc:postgresql://localhost:5432/databaseName
spring.datasource.username =
spring.datasource.password =

spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation = true
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto = create-drop
spring.jpa.show-sql = true
spring.jpa.properties.hibernate.format_sql = true
END OF EXAMPLE

EXAMPLE FOR CONNECTION DATA (APPLICATION.PROPERTIES FILE, ORACLE):
spring.datasource.driver-class-name = oracle.jdbc.OracleDriver
spring.datasource.url = jdbc:oracle:thin:@localhost:1521/databaseName
spring.datasource.username =
spring.datasource.password =

spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto = create-drop
spring.jpa.show-sql = true
spring.jpa.properties.hibernate.format_sql = true
END OF EXAMPLE

EXAMPLE FOR CONNECTION DATA (APPLICATION.PROPERTIES FILE, SQL SERVER):
spring.datasource.url = jdbc:sqlserver://localhost:1434;encrypt=true;trustServerCertificate=true;databaseName=databaseName
spring.datasource.username =
spring.datasource.password =

spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.SQLServerDialect
spring.jpa.hibernate.ddl-auto = create-drop
spring.jpa.show-sql = true
spring.jpa.properties.hibernate.format_sql = true
END OF EXAMPLE

=================================================================================
3. OTHER PARAMETERS
=================================================================================
||OTHER PARAMETERS|DESCRIPTION||
||server.error.include-message|sets whether the server error messages should be sent to the frontend, optional, needed for Spring Validation||
||server.port|defines on which HTTP port the application will be available, optional, default is 8080||
||server.compression.enabled|sets HTTP response compression, default is false||
||server.compression.min-response-size|sets the minimum response size for applying compression, default is 2048 in bytes||
||server.compression.mime-types|defines on which response formats the compression will be executed||
||spring.servlet.multipart.max-file-size|sets the maximum up-loadable file size, unit can be MB or KB||
||spring.servlet.multipart.max-request-size|sets the maximum request size in case of file uploading, unit can be MB or KB||
||spring.thymeleaf.cache|enables or disables template caching (default is true)||
||spring.thymeleaf.mode|type of generated static pages||
||spring.thymeleaf.encoding|encoding of generated static pages||
||spring.thymeleaf.prefix|directory of templates within project hierarchy (default is file:src/main/resources/templates/)||
||spring.resources.static-locations||directory of static pages within project hierarchy (default is file:src/main/resources/static/)||
||spring.resources.cache.period|period of caching of resources||
||spring.thymeleaf.cache|enables or disables template caching (default is true)||

For server.port, the -1 value closes the HTTP ports but the application context will be built-up (can be useful for testing).
The 0 (zero) port number makes the server to scan for an open port.

For the compression, Jetty, Tomcat, Reactor Netty, and Undertow supports response compression. Reaching the minimum size is needed, under it there will be no compressing.
Also, the compression is possible when the response has one of the next formats (mime-types) by default:
    - text/html
    - text/xml
    - text/plain
    - text/css
    - text/javascript
    - application/javascript
    - application/json
    - application/xml

For multipart sizes, in case the actual request exceeds the limits, will raise exception.

EXAMPLE FOR SSL SETTINGS:
server.port=8443
server.ssl.certificate=classpath:my-cert.crt
server.ssl.certificate-private-key=classpath:my-cert.key
server.ssl.trust-certificate=classpath:ca-cert.crt
END OF EXAMPLE

EXAMPLE FOR MULTIPART SETTINGS:
spring.servlet.multipart.max-file-size=1MB
spring.servlet.multipart.max-request-size=1MB
END OF EXAMPLE

EXAMPLE FOR HOT SWAP FOR THYMELEAF TEMPLATES DURING DEVELOPMENT (VARIANT 1, APPLICATION-DEVELOPMENT.PROPERTIES):
#ThymeLeaf
spring.thymeleaf.cache = false
spring.thymeleaf.mode = HTML
spring.thymeleaf.encoding = UTF-8
spring.thymeleaf.prefix = file:src/main/resources/templates/
#static resources
spring.resources.static-locations = file:src/main/resources/static/
spring.resources.cache.period = 0
END OF EXAMPLE

EXAMPLE FOR HOT SWAP FOR THYMELEAF TEMPLATES DURING DEVELOPMENT (VARIANT 1, APPLICATION-DEVELOPMENT.YML):
spring:
  thymeleaf:
    cache: false
    mode: HTML
    encoding: UTF-8
    prefix: file:src/main/resources/templates/
  resources:
    static-locations: file:src/main/resources/static/
    cache:
      period: 0
END OF EXAMPLE

EXAMPLE FOR HOT SWAP FOR THYMELEAF TEMPLATES DURING DEVELOPMENT (VARIANT 2, APPLICATION-DEVELOPMENT.PROPERTIES):
spring.thymeleaf.cache = false
END OF EXAMPLE

MORE HERE: https://docs.spring.io/spring-boot/docs/current/reference/html/howto.html#howto.properties-and-configuration

=>SPRING BOOT
=>POSTGRESQL
=>H2
=>SPRING BOOT REPOSITORY
=>SPRING BOOT ENTITY
=>SPRING BOOT FILE STORAGE WITH THYMELEAF EXAMPLE
=>SPRING BOOT CONFIGURATION
=>SPRING BOOT THYMELEAF
