=================================================================================
CSS
=================================================================================
1. BASICS
2. SELECTORS
3. PROPERTIES
4. SPECIALS

=================================================================================
1. BASICS
=================================================================================
CSS stands for Cascading Style Sheets, stylesheets for short.
The basic HTML page appearance is handled by the actual browser (browser default). A CSS definition modifies these default definitions.
A CSS is a definition contains stylistics (appearance) of an HTML web page, including the design, layout and variations in display for different devices and screen sizes.
Ancestor of CSS technique was using specific property parameters in HTML e.g. width=, height=, border=. This technique is inline (local on tags) and need much effort to maintain the style throughout elements, page and website.

A CSS definition contains one or more style property definitions. A property can be width, color of an element, also weight of a border and so on. The final appearance of an element is controlled by values of many properties together.
A property can be defined by CSS definitions in the hierarchy:
    - external (website-level) style definitions (via external CSS file, marked in the header)
    - internal (page-level) style definitions (via style block in the header)
    - inline (tag-level) style definitions (via the style= parameter)
    - inline properties (tag-level) definitions (via property parameters)

The external and internal definitions are on the same level. That said, as the code flow goes definition by definition, the last modification of a property will be alive for that property at the checked element.
The style block in the header can be divided and between the parts the external CSS import can take place. Also, several external CSS-s can be imported at different points of the header. Following the flow, the last modification will be alive for the same property.
An inline definition is on higher level since it has explicit effect on tag-level. That said, for the same property, overwrites external and internal values.
A property not modified by any CSS, will keep its browser default value.

Never use inline definitions (style=) together with property parameters (width=, height= etc.), can confuse the code, hard to find them, and can easily lead to appearance errors.

General syntax of a CSS definition:
    - selector {property:value; property:value; ...}
There can be space before and-or after the : sign.

It is best practice to define external CSS stylesheet per website in order to make it sure the website has global style. When following this, optional style definitions for local (special) elements are needed only. It also becomes possible to define multiple global appearances for a website.
The external CSS is a .css file which is then referenced from the head block of an HTML page.
For referencing, the link tag is used within the head block. The optional type= property identifies the CSS file format, when left, default is text/css.
Commenting is possible in external or internal CSS by utilizing /* opening and */ closing markers. Can be line or multiline, also at the end of a line.

EXAMPLE FOR AN EXTERNAL CSS (CSS_name.css):
selector(s)1 {
    property: value;
    ...
}

selector(s)2 {
    property: value;
    ...
}
...
END OF EXAMPLE

EXAMPLE FOR REFERENCING EXTERNAL CSS:
<!DOCTYPE HTML>
<head>
    <title>Title</title>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <link rel="stylesheet" type="text/css" href="/path/CSS_name.css">
</head>
<body>
<!-- code -->
</body>
</html>
END OF EXAMPLE

EXAMPLE FOR INTERNAL CSS:
<!DOCTYPE HTML>
<head>
    <title>Title</title>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <style>
        selector(s)1 {
            property: value;
            ...
        }

        selector(s)2 {
            property: value;
            ...
        }
        ...
    </style>
</head>
<body>
<!-- code -->
</body>
</html>
END OF EXAMPLE

EXAMPLE FOR INLINE CSS:
<!DOCTYPE HTML>
<head>
    <title>Title</title>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
</head>
<body>
<!-- code -->
<tag_name style="property: value; ..." ...>
    ...
</tag_name>
<tag_name style="property: value; ..." ... />
<!-- code -->
</body>
</html>
END OF EXAMPLE

=================================================================================
2. SELECTORS
=================================================================================
General syntax of a CSS definition:
    selector {property:value; property:value; ...}
There can be space before and-or after the : sign.

The selector defines the HTML element. Types are:
    - simple (select elements by tag-name, id, class, tag-name and class; all elements, grouped selectors)
    - combinator (select elements based on a specific relationship between them)
    - pseudo-class (select elements based on a certain state)
    - pseudo-elements (select and style a part of an element)
    - attribute (select elements based on an attribute or attribute value)

A value can be:
    - numeric value (e.g. "3")
    - numeric value with unit (e.g. "3px", "50%")
    - text value ("'some_text'")
Please note, there must be no space between a numeric value and its unit.

The class-type definition creates a unique set of property values. That said, when referenced inline with the class= parameter, overwrites every matching external and internal property.
In case there is an inline style definition (via style= parameter) for a property defined by externally, internally and-or via the class parameter as well, the local style= values will overwrite the class values.

EXAMPLE FOR SIMPLE SELECTORS (CSS-SIDE):
/* tag-name */
tag_name {
    property: value;
    ...
}

/* id */
#id_name {
    property: value;
    ...
}

/* class */
.class_name {
    property: value;
    ...
}

/* tag-name and class */
tag_name.class_name {
    property: value;
    ...
}

/* all elements */
* {
    property: value;
    ...
}

/* grouped selectors by tag-name */
tag_name1, tag_name2, ... {
    property: value;
    ...
}
END OF EXAMPLE

EXAMPLE FOR SIMPLE SELECTORS (HTML-SIDE):
<!-- tag-name -->
<tag_name ...>...></tag_name>
<tag_name ... />

<!-- id -->
<tag_name id="id-name" ...>...></tag_name>
<tag_name id="id-name" ... />

<!-- class -->
<tag_name class="class-name" ...>...></tag_name>
<tag_name class="class-name" ... />

<!-- tag-name and class -->
<tag_name class="class-name" ...>...></tag_name>
<tag_name class="class-name" ... />

<!-- more classes -->
<tag_name class="class-name1 class-name2" ...>...></tag_name>
<tag_name class="class-name1 class-name2" ... />
END OF EXAMPLE

EXAMPLE FOR ARGUMENT SELECTORS (CSS-SIDE):
tag_name[parameter_name="parameter_value"] {
    property: value;
    ...
}

input[type="file"] {
    ...
}
END OF EXAMPLE

EXAMPLE FOR ARGUMENT SELECTORS (HTML-SIDE):
<tag_name parameter_name="parameter_value" ...>...></tag_name>
<tag_name parameter_name="parameter_value" ... />

<input type="file" ... />
END OF EXAMPLE

EXAMPLE FOR OVERWRITING CSS:
/* external CSS 1: */
tag-name {
    property: value11;
}
.class_name {
    property: value21;
}

/* external CSS 2: */
tag-name {
    property: value12;
}
.class_name {
    property: value22;
}

<!-- HTML head: -->
<link rel="stylesheet" type="text/css" href="..."> <!-- earlier external import -->
<style> /* earlier internal CSS: */
    tag-name {
        property: value13;
    }
    .class_name {
        property: value23;
    }
</style>
<link rel="stylesheet" type="text/css" href="..."> <!-- latter external import -->
<style> /* latter internal CSS: */
    tag-name {
        property: value14;
    }
    .class_name {
        property: value24;
    }
</style>

<!-- HTML body: -->
<tag_name /> <!-- property == value14 -->
<tag_name class="class_name" /> <!-- property == value24 -->
<tag_name style="property: value31" /> <!-- property == value31 -->
<tag_name class="class_name" style="property: value32" /> <!-- property == value32 -->
END OF EXAMPLE

=================================================================================
3. PROPERTIES
=================================================================================
For default value, means that the value will be set when the specific property is not set.
For color values, can be verbal (e.g. green, Green), RGB (e.g. rgb(32, 99, 34)), hexadecimal (e.g. #23a5fd), HSL (e.g. hsl(9, 100%, 64%)), RGBA (e.g. rgba(32, 99, 34, 0.6)) or HSLA (hsl(9, 100%, 64%, 0.4)); alpha is decimal number and full transparency equals with 0; HTML/CSS and modern browsers support 140 color names.
For length numbers, possible units are: px, pt, cm, em, % (latter means percentage of related dimension of container element).
For shorthand property, means that many, related properties are set via setting only one property. The order of the values is unimportant; there is SPACE between values; in case a value is left out, the property value set previously will stay alive.
For differentiated sides in a property (e.g. background-position, border-style), the side names are, in order: top, right, bottom, left; can be extended with center.
For value combination for sides (e.g. border-style), the possible combinations are: one value (all sides), two values (top-bottom left-right), three values (top right-left bottom), 4 values (top right bottom left).
For marked side in the property name (e.g. border-left-width), there must be properties for the other sides as well. For short, these properties are summarized as ...x... where x is the name of the side (e.g. border-x-width).

||PROPERTY|VALUE EXAMPLE|DEFAULT|DESCRIPTION||
||background-color|Tomato|Black|element background color; for body tag: page background||
||background-image|url(image.gif)|no image|sets background image for the element, repeats the image horizontally and vertically for full coverage; for body tag: page background image||
||background-repeat|repeat-x|horizontally and vertically|sets repeating rule for the background image; values: no-repeat, repeat-x (only horizontally), repeat-y (only vertically)||
||background-position|right top|left top|position the background image; values: left top, left center, left bottom, right top, right center, right bottom, top, center, bottom||
||background-attachment|fixed|scroll|sets whether the background follows scrolling of the page or element; values: fixed, scroll||
||background|-|-|shorthand property for -color, -image, -repeat, -position and -attachment||
||opacity|0.3|1.0|works as alpha color channel for the whole element where zero is fully transparent; passes this property to child elements||
||color|Brown|Black|text color||
||border_style|dotted none dashed double|none|sets border line style in value combination for sides; values: dotted, dashed, solid, double, groove, ridge, inset, outset, none, hidden; without setting this other than none, other border properties will not have effect||
||border-x-style|dashed|none|sets border style on x side||
||border-width|5px thin|medium|sets border thickness in value combination for sides, values: thin, medium, thick, length number; 3px equals with medium||
||border-x-width|5px|medium|sets border thickness on x side||
||border-color|red #32ffa1|color_of_element|sets border color in value combination for sides||
||border-x-color|red|color_of_element|sets border color on x side||
||border|-|-|shorthand property of the border for -width, -style and -color||
||border-x|-|-|shorthand property of the border on the x-side for -width, -style and -color||
||border-radius|5px 0px|0px|sets rounding of border corners in value combination for sides||
||border-collapse|collapse|separate|sets whether neighbouring cells can keep their individual borders; values: separate (between neighbouring cells borders will be doubled), collapse (normal table outlook)||
||margin-x|12px|0px|sets space outside the border (visible or not) of the element on x side; values: auto (horizontally centers the element within its container), inherit (inherits property from its container), length number; negative value is accepted||
||margin|12px 3px|0px|shorthand property of the margin in value combination for sides||
||padding-x|12px|1px|sets space inside the border (visible or not) of the element on x side; values: inherit (inherits property from its container), length number||
||padding|12px 5px|0px|shorthand property of padding in value combination for sides||
||width|50%|dynamically set|sets the width of the element inside padding; values: length number; the div block shows a horizontal scroll bar when the browser window smaller than the set width, in such case use max-width instead||
||height|50%|auto|sets the height of the element inside padding; values: auto, initial (default HTML value), inherit (from container element), length number||
||max-width|50%|none|sets the maximum value the width property can get; values: none (no maximum), length number; if smaller then the width value, that will be ignored||
||position|fixed|static|sets how the tag is positioned within the flow; used together with top, bottom, left, right properties; values: static (default, the block is placed into the page as its tag placed into the HTML code), relative (the new position is calculated from the static position), fixed  (the new position is calculated from the viewport), absolute (the new position is calculated from the position of its ancestor element), sticky (the new position is calculated from the scroll position: works as relative while it reaches viewport limits, then works as fixed; does not available in Internet Explorer, needs extra property in Safari)||
||x|20px|-|x can be top, bottom, left, right; defines distance for positioning an element, used together with its position property||

Every HTML element follows the box model. From inside to outside, the content is wrapped around with the padding, which is wrapped around with the border, which is wrapped around with the margins. This system forms rectangles (boxes) around the most inner part (content). The total size of element is interpreted as added values of margin, border width, padding and content size horizontally and vertically. These data define how much space an element occupies.
Margin collapse: total vertical distance of two elements is theoretically the bottom margin of the first element and the top margin of the second element added, however in some cases only the higher margin value will be used by the browser.

EXAMPLE FOR BOX MODEL:
p {
    width: 50px;
    height: 30px;
    padding: 20px;
    border: 10px solid;
    margin: 5px;
}
/*
total width = width + left padding + right padding + left border + right border + left margin + right margin
total height = height + top padding + bottom padding + top border + bottom border + top margin + bottom margin
total occupied size is 120px in width, 100px in height
*/
END OF EXAMPLE

EXAMPLE FOR MARGIN COLLAPSE:
p.p1 {margin: 5px 10px 50px;}
p.p2 {margin: 20px 10px 12px;}
...
<p class="p1">...</p>
<!-- theoretical bottom margin of p1 is set to 50px -->
<!-- total margin will be the higher margin (50px) instead of 58px -->
<!-- theoretical top margin of p2 is set to 20px -->
<p class="p2">...</p>
END OF EXAMPLE

EXAMPLE FOR POSITIONING:
/* element stays at top-left corner while normal content scrolls under it */
div {
    position: fixed;
    left: 0;
    top: 0;
}

/* element moved with 20px to the right, relatively from its position within its ancestor */
p {
    position: relative;
    left: 20px;
}

/* element follows the scroll until reaches the top or the bottom of the viewport, then stays there */
div.sticky {
  position: -webkit-sticky; /* Safari */
  position: sticky;
  top: 0;
}
END OF EXAMPLE

=================================================================================
4. SPECIALS
=================================================================================
The file-type input style is handled by the specific browser, and presently it is not possible to change that style.
The file input has the ability to receive focus (tabbing), activate for key press while on focus, opening selection dialog, storing file selection, receive files via drag&drop, showing names of selected files, also lets screen readers to detect it.
Workaround is to wrap the input into a label and give button-like style to it while hiding (visually or totally) the original input, visit the SPRING BOOT THYMELEAF EXAMPLES page for HTML code and Javascript examples.
Total hiding blocks all functionalities except opening the dialog and storing file selection.
Please note, every solution has pros and cons, choose one based upon the actual task.

EXAMPLE FOR FILE-TYPE INPUT:
/* hide input totally */
.label_of_custom_file_input {
    display: inline-block;
    /*
    style properties of button-like inputs
    */
    line-height: 32px; /* set custom size visually */
    cursor: pointer;
}
input[type="file"] {
    display: none;
}

/* hide input totally but maintain layout */
.label_of_custom_file_input {
    display: inline-block;
    /*
    style properties of button-like inputs
    */
    line-height: 32px; /* set custom size visually */
    cursor: pointer;
}
input[type="file"] {
    visibility: hidden;
}

/* hide input, open for screen reader access, 1st variant */
.label_of_custom_file_input {
    display: inline-block;
    /*
    style properties of button-like inputs
    */
    line-height: 32px; /* set custom size visually */
    cursor: pointer;
}
input[type="file"] {
    position: absolute;
    left: -99999rem;
}

/* hide input, open for screen reader access, 2nd variant */
.label_of_custom_file_input {
    display: inline-block;
    /*
    style properties of button-like inputs
    */
    line-height: 32px; /* set custom size visually */
    cursor: pointer;
}
input[type="file"] {
    border: 0;
    clip: rect(0, 0, 0, 0);
    clip-path: inset(50%);
    height: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;
    position: absolute;
    white-space: nowrap;
    width: 1px;
}

/* hide input, open for screen reader access, focusable, 1st variant */
.label_of_custom_file_input {
    display: inline-block;
    /*
    style properties of button-like inputs
    */
    line-height: 32px; /* set custom size visually */
    cursor: pointer;
}
.label_of_custom_file_input:hover { /* only if having hover effect is needed */
    background-color: ...;
}
.label_of_custom_file_input:focus-within {
    outline: 5px solid;
}
input[type="file"] {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap; /* 1 */
    clip-path: inset(50%);
    border: 0;
}

/* hide input, open for screen reader access, focusable, 2nd variant */
.label_of_custom_file_input {
    display: inline-block;
    /*
    style properties of button-like inputs
    */
    line-height: 32px; /* set custom size visually */
    cursor: pointer;
}
.label_of_custom_file_input:hover { /* only if having hover effect is needed */
    background-color: ...;
}
.label_of_custom_file_input:focus-within {
    outline: 5px solid;
}
input[type="file"]:active, input[type="file"]:focus {
    clip: auto;
    height: auto;
    margin: 0;
    overflow: visible;
    position: static;
    white-space: inherit;
    width: auto;
}
END OF EXAMPLE

Tables have cornered design by default. In order to give radius to corners, need to give style to border elements independently.

EXAMPLE FOR TABLE, RADIUS IN CORNERS:
/* in HTML use class="table" in table tag, class="table_th" in th and class="table_td" in td tags */
.table {
    border: 1px solid DarkGray;
    border-collapse: separate;
    width: 100%;
    text-align: center;
    border-radius: 6px;
}

.table_td, .table_th {
    border-left: 1px solid DarkGray;
    border-top: 1px solid DarkGray;
    text-align: center;
    padding: 3px;
}

.table_th {
    border-top: none;
}

.table_th:first-child, .table_td:first-child {
     border-left: none;
}
END OF EXAMPLE

The examples below present a random collection of useful tweaks which can be optionally used when the actual task needs it.

EXAMPLE FOR SMALL TWEAKS:
/*
InkColor is the main color the texts, mean graphics carry.
MiddleColor is one of the colors the page uses secondarily.
BackColor is the color of the background.
For inputs, colors are usually in inverse (InkColor for background, BackColor for text).
Change these colors to fit to page design.
*/

/* customize page */
body { /* or: html { */
    background-color: DarkSlateGray;
    font-family: Roboto;
    color: LightGray;
    text-align: left;
    line-height: 1.4; /* or 1.15 */
    -webkit-text-size-adjust: 100%; /* prevent adjustments of font size after orientation changes in iOS */
    margin: 0; /* when page should fill the browser from wall to wall */
}

/* customize fieldset */
fieldset {
    border: 1px solid;
    border-radius: 6px;
    color: MiddleColor;
    margin: 0;
    padding: 6px;
}

legend {
    text-align: left; /* or: center, right */
}

/* customize list */
ul {
    list-style-type: none; /* or: circle, square; not defined: dot */
    margin: 0; /* or any length number, or leave for default */
    padding: 0; /* or any length number, or leave for default */
    color: color value; /* modifies bullet as well */
    text-align: center; /* or any align value; bullet stays, text is aligned */
}

ol {
    list-style-type: none; /* or: number, upper-roman, lower-roman, upper-alpha, lower-alpha; not defined: upper-alpha */
    margin: 0; /* or any length number, or leave for default */
    padding: 0; /* or any length number, or leave for default */
    color: color value; /* modifies bullet as well */
    text-align: center; /* or any align value; bullet stays, text is aligned */
}

li { /* valid for items of any list type */
    list-style-type: none; /* or: number, upper-roman, lower-roman, upper-alpha, lower-alpha; not defined: upper-alpha */
    margin: 0; /* or any length number, or leave for default */
    padding: 0; /* or any length number, or leave for default */
    color: color value; /* modifies bullet as well */
    text-align: center; /* or any align value; bullet stays, text is aligned */
}

/* only vertical resizing of textarea */
textarea {
    resize: vertical;
}

/* no resizing of textarea */
textarea {
    resize: none;
}

/* set wrapping behaviour of textarea */
textarea {
    white-space: nowrap|pre; /* both values disable wrapping; "nowrap" deteriorates number of whitespaces, not useful when the content is code; "pre" keeps indented paragraphs and spaces; leave the property for enable wrapping */
    overflow-wrap: normal; /* forces turning wrapping on; use it in case a parent element could overwrite this property or explicitly needed wrapping */
    word-wrap: normal; /* same as overflow-wrap, some browsers use this property instead of overflow-wrap, use them together for safety */
    overflow-x: auto|scroll|hidden; /* x direction, "auto" shows scroll bar only if needed, "scroll" forces appearance, "hidden forces hiding it" */
    overflow-y: auto|scroll|hidden; /* y direction, "auto" shows scroll bar only if needed, "scroll" forces appearance, "hidden forces hiding it" */
    overflow: auto|scroll|hidden; /* in both directions */
    overflow: -moz-scrollbars-horizontal; /* moz setting for x direction */
    overflow: -moz-scrollbars-vertical; /* moz setting for y direction */
}

/* prevent link style changing when visited (use when the a tag is basically not styled) */
a, a:visited {
    /* common properties like: */
    text-decoration: underline;
}

/* customize horizontal line */
hr {
    display: block;
    height: 1px;
    border: 0;
    border-top: 1px solid InkColor;
    margin: 1em 0;
    padding: 0;
    border-color: MiddleColor;
}

/* customize hover effect on select */
option:hover {
    color: InkColor;
    background-color: MiddleColor;
}

/* customize text selection color */
::-moz-selection {
  background: MiddleColor;
  color: BackColor;
  text-shadow: none;
}

::selection {
  background: MiddleColor;
  color: BackColor;
  text-shadow: none;
}

/* remove the gap between audio, canvas, iframes, images, videos and the bottom of their containers */
audio, canvas, iframe, img, svg, video {
    vertical-align: middle;
}

/* prevent sup and sub from affecting line height */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sub {
  bottom: -0.25em;
}

sup {
  top: -0.5em;
}
END OF EXAMPLE

MORE HERE: https://www.w3schools.com/css/css_outline.asp

=>SPRING BOOT THYMELEAF
=>SPRING BOOT THYMELEAF TEMPLATE FRAGMENTATION
=>SPRING BOOT THYMELEAF EXAMPLES
=>WEB FONTS
