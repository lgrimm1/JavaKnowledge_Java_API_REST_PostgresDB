=================================================================================
SPRING BOOT TESTS
=================================================================================
1. TEST SLICES
2. MAIN CLASS TEST
3. ENTITY TEST
4. REPOSITORY TESTS
5. SERVICE CLASS TESTS
6. CONTROLLER CLASS TESTS

=================================================================================
1. TEST SLICES
=================================================================================
Spring, when normally started up with the application, utilizes many Spring components.
Depending on what should be tested, by using proper annotation, certain component package can be started instead of all. Spring will configure the needed components automatically by importing and setting up certain AutoConfigurations.
These component packages are called test slices.

Possible test slices are:
    - @DataCassandraTest
    - @DataCouchbaseTest
    - @DataElasticsearchTest
    - @DataJdbcTest
    - @DataJpaTest
    - @DataLdapTest
    - @DataMongoTest
    - @DataNeo4jTest
    - @DataR2dbcTest
    - @DataRedisTest
    - @GraphQlTest
    - @JdbcTest
    - @JooqTest
    - @JsonTest
    - @RestClientTest
    - @WebFluxTest
    - @WebMvcTest
    - @WebServiceClientTest
    - @WebServiceServerTest

=================================================================================
2. MAIN CLASS TEST
=================================================================================
As normally, under the src/test/java/<package> folder, the tests will be created.
This test is for testing whether the web application starts up and loads the Communication layer (controller).
In the test class, the @Autowired annotation makes into the marked field the controller(s) to be injected.

In case if using JUnit4, the class-level @RunWith(SpringRunner.class) annotation is needed additionally.

EXAMPLE FOR MAIN TEST:
import org.junit.jupiter.api.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
public class MainTest {

	@Autowired
	private ControllerClassName controller;

	@Test
	public void contextLoads() throws Exception {
		Assertions.assertNotNull(controller);
	}
}
END OF EXAMPLE

=================================================================================
3. ENTITY TEST
=================================================================================
The tests should be created under the src/test/java/<package> folder.

For no-JPA entities, unit testing is appropriate.

For clean JPA entities, because the entity usually does not carry others than fields, constructors, getters, setters and the equals(), hashCode(), toString() overridden methods, instead of unit tests, behaviour tests are needed.
When not using Spring Boot Validation, a behaviour test means mainly testing constructors against excepted field values. In case the constructors serve as grouped setters of fields, defining these test is optional.
Naturally, in case the entity contains custom methods above the mentioned ones above, proper testing is mandatory.

When behaviours are defined via using Spring Validation annotations, the behaviour is apparent when the Spring framework reads and uses the annotations via the repository and the controller.
In order to test only the behaviours without starting up the application (and Spring environment with it), the Validator class of Hibernate is needed.
Behaviours are declared on fields. That means, after creating an object with some data, should be checked what will the validation result be.
Still, in case the JPA entity has custom methods (e.g. for handling transient fields), for those methods testing is mandatory.

EXAMPLE FOR ENTITY BEHAVIOUR TEST CLASS (CLEAN JPA):
package packageName;

import jakarta.validation.*;
import org.junit.jupiter.api.*;
import java.util.*;

class SeriesEntityTest {

	private Validator validator;

    //prepare Validator
	@BeforeEach
	void setUp() {
		ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
		validator = factory.getValidator();
	}

	//simulate the behaviour of bean-validation e.g. @NotNull
	private void validateBean(Object bean) throws AssertionError {
		Optional<ConstraintViolation<Object>> violation = validator.validate(bean).stream().findFirst();
		if (violation.isPresent()) {
			throw new ValidationException(violation.get().getMessage());
		}
	}

	@Test
	void testMethodForInvalidity() {
		Exception e = Assertions.assertThrows(ValidationException.class, () -> validateBean(entityObjectWhichWillBeValidated1));
		Assertions.assertEquals("expected error message set with Validation annotation", e.getMessage());
	}

	@Test
   	void testMethodForValidity() {
   		Assertions.assertDoesNotThrow(() -> validateBean(entityObjectWhichWillBeValidated2));
   	}
}
END OF EXAMPLE

=================================================================================
4. REPOSITORY TESTS
=================================================================================
As normally, under the src/test/java/<package> folder, the tests will be created.
Repository classes can be tested out with normal unit tests.
Proper tests should cover the functionality (e.g. searching, adding, deleting, modifying data) of the repository as it represents the Storage layer of the web application.

Please note, although the testing should involve the actual database touched by the development as well (such testing would include integration test as well between the repository and the database), the database must exist in the database provider (e.g. PostgreSQL) beforehand. That said, when the project is downloaded to a clear storage without installing or setting up database, the tests will fail out-of-the-box. Solution is that for tests, an in-memory H2 database should be used which is independent on local settings. The solution includes creating or modifying application.properties file under the test/resources folder, also adding H2 dependency to the pom.xml Maven file.

EXAMPLE FOR EXTENDING POM.XML WITH H2 DATABASE:
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>runtime</scope>
        </dependency>
END OF EXAMPLE

EXAMPLE FOR APPLICATION.PROPERTIES UNDER TEST/RESOURCES FOLDER:
spring.datasource.url = jdbc:h2:mem:java_knowledge
spring.datasource.username = sa
spring.datasource.password =

spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.H2Dialect
spring.jpa.hibernate.ddl-auto = create-drop
spring.jpa.show-sql = true
spring.jpa.properties.hibernate.format_sql = true
END OF EXAMPLE

For Spring Data JPA repository tests, visit the SPRING DATA JPA TESTS page.
For H2 information, visit the H2 and the SPRING APPLICATION PROPERTIES pages.

=================================================================================
5. SERVICE CLASS TESTS
=================================================================================
As normally, under the src/test/java/<package> folder, the tests will be created.
Service classes need creating their corresponding storage instances first since these objects are needed for class dependency injection in constructors of the service classes. In case this version is followed, the tests will be dependent since the storage classes will be used during tests.
Best practice in order to gain independent unit tests, is to use mocked repository (storage) classes injected into the right controllers.

In model&view mode, in case of best practice, the controller class should be thin. The controller method receives an empty Model object from Spring which should be filled with data prepared by the service method.
There is no public method to create a new Method object. That said, examining the Model object in service class is not possible.
Workaround is, the service method must return a ModelAndView object with the view name and the model included, and the model objects should be added to the Model in the controller class. The controller class will be thin but not the thinnest which is acceptable in model&view mode.

EXAMPLE FOR SERVICE CLASS TEST CLASS (NOT INDEPENDENT UNIT TEST):
import org.junit.jupiter.api.*;
import org.springframework.ui.*;
import org.springframework.web.servlet.*;

import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.model;

class ServiceTest {

	RepositoryClassName repositoryName;
	ServiceClassName serviceName;

	@BeforeEach
	void setUp() {
		repositoryName = new RepositoryClassName();
		//preparing stored data
		serviceName = new ServiceClassName(repositoryName);
	}

    //tests of service class
	@Test
	void testName() {...}
}
END OF EXAMPLE

EXAMPLE FOR SERVICE CLASS TEST CLASS (MOCKING, INDEPENDENT UNIT TEST):
import org.junit.jupiter.api.*;
import org.mockito.Mockito;
import org.mockito.*;
import org.springframework.test.web.*;
import org.springframework.ui.*;
import org.springframework.web.servlet.*;

import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.model;

class ServiceTest {

	RepositoryClassName repositoryName;
	ServiceClassName serviceName;

	@BeforeEach
	void setUp() {
		repositoryName = Mockito.mock(RepositoryClassName.class);
		//setting up common mocked behaviours
		//e.g. in case the Element is a class declared elsewhere, and
		//repositoryName.getElement(int id) would return an Element with the passed ID, and
		//the service get() method calls repositoryName.getElement(...), then mocking:
		when(repositoryName.getElement(12)).thenReturn(new Element(12, "abc", 3.14d));
		serviceName = new ServiceClassName(repositoryName);
	}

    //test methods
}
END OF EXAMPLE

EXAMPLE FOR SERVICE METHOD TEST (MOCKING, INDEPENDENT UNIT TEST, OBJECT MODE):
@Test
void testName() {
    //setting up local behaviours for repository
	Assertions.assertEquals(new Element(12, "abc", 3.14d), serviceName.get(12));
}
END OF EXAMPLE

EXAMPLE FOR SERVICE METHOD TEST (MOCKING, INDEPENDENT UNIT TEST, MODELANDVIEW MODE, JUNIT ASSERTIONS):
@Test
void testName() {
    //setting up local behaviours for repository and injected classes

    ModelAndView modelAndView = serviceName.get(12, new ModelAndView("view_name", new HashMap<>()));

    Assertions.assertTrue(modelAndView.hasView());
    Assertions.assertEquals("view_name", modelAndView.getViewName());

    ModelMap modelMap = modelAndView.getModelMap();
    Assertions.assertEquals(1, modelMap.size());

	Assertions.assertTrue(modelMap.getAttribute("element") instanceof Element);
    Assertions.assertEquals(new Element(12, "abc", 3.14d), modelMap.getAttribute("element"));
}
END OF EXAMPLE

EXAMPLE FOR SERVICE METHOD TEST (MOCKING, INDEPENDENT UNIT TEST, MODELANDVIEW MODE, MODELANDVIEWASSERT):
@Test
void testName() {
    //setting up local behaviours for repository and injected classes

    ModelAndView modelAndView = serviceName.get(12, new ModelAndView("view_name", new HashMap<>());

    ModelAndViewAssert.assertViewName(modelAndView, "view_name");

	ModelAndViewAssert.assertModelAttributeAvailable(modelAndView, "element");
	ModelAndViewAssert.assertAndReturnModelAttributeOfType(modelAndView, "element", Element.class);
	ModelAndViewAssert.assertModelAttributeValue(modelAndView, "element", new Element(12, "abc", 3.14d));
}
END OF EXAMPLE

For ModelAndView test examples, visit the SPRING MODELANDVIEW page.

=================================================================================
6. CONTROLLER CLASS TESTS
=================================================================================
Visit the SPRING BOOT CONTROLLER TESTS page for description.

MORE HERE: https://www.baeldung.com/spring-boot-testing
MORE HERE: https://docs.spring.io/spring-framework/docs/current/reference/html/testing.html
MORE HERE: https://github.com/spring-projects/spring-framework/tree/main/spring-test/src/test/java/org/springframework/test/web/servlet/samples
MORE HERE: https://www.javatips.net/api/org.springframework.test.web.modelandviewassert

=>SPRING BOOT
=>TESTS
=>JUNIT
=>MOCKITO
=>SPRING BOOT MAIN CLASS
=>SPRING BOOT ENTITY
=>SPRING BOOT REPOSITORY
=>SPRING BOOT SERVICE
=>SPRING MODELANDVIEW
=>SPRING BOOT CONTROLLER TESTS
=>SPRING MODELANDVIEW;5. TESTING
=>SPRING BOOT VALIDATION
=>SPRING DATA JPA TESTS
=>H2
=>SPRING APPLICATION PROPERTIES
