=================================================================================
SPRING BOOT FILE STORAGE WITH THYMELEAF EXAMPLE REPOSITORY TESTS
=================================================================================
1. IN-FOLDER REPOSITORY TESTS
2. IN-DATABASE REPOSITORY TESTS

=================================================================================
1. IN-FOLDER REPOSITORY TESTS
=================================================================================
EXAMPLE FOR REPOSITORY CLASS UNIT TEST (IN-FOLDER):
import org.junit.jupiter.api.*;
import org.springframework.core.io.*;
import org.springframework.http.*;
import java.io.*;
import java.nio.file.*;
import java.util.*;
import java.util.concurrent.atomic.*;

class FileInFolderRepositoryTest {

	FileInFolderRepository repository;
	AtomicInteger testFolderNumber = new AtomicInteger();
	String filename1, filename2;

	@BeforeEach
	void setUp() {
		repository = new FileInFolderRepository();
		filename1 = "file1.txt";
		filename2 = "file2.txt";
	}

	@Test
	void fileNameSeparator() {
		Assertions.assertTrue(File.separator.equals("/") || File.separator.equals("\\"));
	}

	@Test
	void init_Failed() {
		String root = "." + File.separator + "init\ntest" + testFolderNumber.getAndIncrement();
		Assertions.assertFalse(repository.init(root, false));
		Assertions.assertFalse(repository.init(root, true));
	}

	@Test
	void init_NoDirectory() {
		String root = "." + File.separator + "init_test" + testFolderNumber.getAndIncrement();
		File rootFolder = Paths.get(root).toFile();
		if (rootFolder.exists()) {
			Assertions.assertTrue(deleteAllFromDirectory(rootFolder));
			Assertions.assertTrue(rootFolder.delete());
		}

		Assertions.assertTrue(repository.init(root, false));
		Assertions.assertTrue(rootFolder.exists());
		Assertions.assertEquals(0, rootFolder.listFiles().length);
		Assertions.assertTrue(rootFolder.delete());

		Assertions.assertTrue(repository.init(root, true));
		Assertions.assertTrue(rootFolder.exists());
		Assertions.assertEquals(0, rootFolder.listFiles().length);
		Assertions.assertTrue(rootFolder.delete());
	}

	@Test
	void init_EmptyDirectory() {
		String root = "." + File.separator + "init_test" + testFolderNumber.getAndIncrement();
		File rootFolder = Paths.get(root).toFile();
		if (rootFolder.exists()) {
			Assertions.assertTrue(deleteAllFromDirectory(rootFolder));
		}
		else {
			Assertions.assertTrue(rootFolder.mkdir());
		}

		Assertions.assertTrue(repository.init(root, false));
		Assertions.assertTrue(rootFolder.exists());
		Assertions.assertEquals(0, rootFolder.listFiles().length);

		Assertions.assertTrue(repository.init(root, true));
		Assertions.assertTrue(rootFolder.exists());
		Assertions.assertEquals(0, rootFolder.listFiles().length);
		Assertions.assertTrue(rootFolder.delete());
	}

	@Test
	void init_FilesInDirectory() {
		String root = "." + File.separator + "init_test" + testFolderNumber.getAndIncrement();
		File rootFolder = Paths.get(root).toFile();
		if (rootFolder.exists()) {
			Assertions.assertTrue(deleteAllFromDirectory(rootFolder));
		}
		else {
			Assertions.assertTrue(rootFolder.mkdir());
		}
		File file1 = new File(root + File.separator + filename1);
		Assertions.assertDoesNotThrow(file1::createNewFile);
		File file2 = new File(root + File.separator + filename2);
		Assertions.assertDoesNotThrow(file2::createNewFile);
		File[] files = rootFolder.listFiles();

		Assertions.assertTrue(repository.init(root, false));
		Assertions.assertTrue(rootFolder.exists());
		Assertions.assertArrayEquals(files, rootFolder.listFiles());

		Assertions.assertTrue(repository.init(root, true));
		Assertions.assertTrue(rootFolder.exists());
		Assertions.assertEquals(0, rootFolder.listFiles().length);
		Assertions.assertTrue(deleteAllFromDirectory(rootFolder));
		Assertions.assertTrue(rootFolder.delete());
	}

	@Test
	void getStorageRootFolder() {
		String root = "." + File.separator + "init_test" + testFolderNumber.getAndIncrement();
		File rootFolder = Paths.get(root).toFile();
		Assertions.assertTrue(repository.init(root, true));

		Assertions.assertEquals(rootFolder, repository.getStorageRootFolder().toFile());
		Assertions.assertTrue(rootFolder.delete());
	}

	@Test
	void getByFilename_WrongFilename() {
		String root = "." + File.separator + "init_test" + testFolderNumber.getAndIncrement();
		File rootFolder = Paths.get(root).toFile();
		Assertions.assertTrue(repository.init(root, true));
		String filename = "file1\ntxt";

		Assertions.assertTrue(repository.getByFilename(filename).isEmpty());
		Assertions.assertTrue(rootFolder.delete());
	}

	@Test
	void getByFilename_NoSuchFile() {
		String root = "." + File.separator + "init_test" + testFolderNumber.getAndIncrement();
		File rootFolder = Paths.get(root).toFile();
		Assertions.assertTrue(repository.init(root, true));

		Assertions.assertTrue(repository.getByFilename(filename1).isEmpty());
		Assertions.assertTrue(rootFolder.delete());
	}

	@Test
	void getByFilename_FileExists() {
		String root = "." + File.separator + "init_test" + testFolderNumber.getAndIncrement();
		File rootFolder = Paths.get(root).toFile();
		Assertions.assertTrue(repository.init(root, true));
		File file1 = new File(root + File.separator + filename1);
		Assertions.assertDoesNotThrow(file1::createNewFile);

		Optional<Resource> resource = repository.getByFilename(filename1);
		Assertions.assertTrue(resource.isPresent());
		Assertions.assertEquals(file1.getName(), resource.get().getFilename());
		Assertions.assertTrue(deleteAllFromDirectory(rootFolder));
		Assertions.assertTrue(rootFolder.delete());
	}

	@Test
	void getAll() {
		String root = "." + File.separator + "init_test" + testFolderNumber.getAndIncrement();
		File rootFolder = Paths.get(root).toFile();
		Assertions.assertTrue(repository.init(root, true));
		File file1 = new File(root + File.separator + filename1);
		Assertions.assertDoesNotThrow(file1::createNewFile);
		File file2 = new File(root + File.separator + filename2);
		Assertions.assertDoesNotThrow(file2::createNewFile);

		List<Resource> resources = repository.getAll().toList();
		Assertions.assertEquals(2, resources.size());
		Assertions.assertEquals(file1.getName(), resources.get(0).getFilename());
		Assertions.assertEquals(file2.getName(), resources.get(1).getFilename());
		Assertions.assertTrue(deleteAllFromDirectory(rootFolder));
		Assertions.assertTrue(rootFolder.delete());
	}

	@Test
	void findByFilename_WrongFilename() {
		String root = "." + File.separator + "init_test" + testFolderNumber.getAndIncrement();
		File rootFolder = Paths.get(root).toFile();
		Assertions.assertTrue(repository.init(root, true));
		File file1 = new File(root + File.separator + filename1);
		Assertions.assertDoesNotThrow(file1::createNewFile);
		File file2 = new File(root + File.separator + filename2);
		Assertions.assertDoesNotThrow(file2::createNewFile);

		Assertions.assertTrue(repository.findByFilename("file1\ntxt").isEmpty());
		Assertions.assertTrue(deleteAllFromDirectory(rootFolder));
		Assertions.assertTrue(rootFolder.delete());
	}

	@Test
	void findByFilename_NoSuchFile() {
		String root = "." + File.separator + "init_test" + testFolderNumber.getAndIncrement();
		File rootFolder = Paths.get(root).toFile();
		Assertions.assertTrue(repository.init(root, true));
		File file1 = new File(root + File.separator + filename1);
		Assertions.assertDoesNotThrow(file1::createNewFile);
		File file2 = new File(root + File.separator + filename2);
		Assertions.assertDoesNotThrow(file2::createNewFile);

		Assertions.assertTrue(repository.findByFilename("file3.txt").isEmpty());
		Assertions.assertTrue(deleteAllFromDirectory(rootFolder));
		Assertions.assertTrue(rootFolder.delete());
	}

	@Test
	void findByFilename_FileExists() {
		String root = "." + File.separator + "init_test" + testFolderNumber.getAndIncrement();
		File rootFolder = Paths.get(root).toFile();
		Assertions.assertTrue(repository.init(root, true));
		File file1 = new File(root + File.separator + filename1);
		Assertions.assertDoesNotThrow(file1::createNewFile);
		File file2 = new File(root + File.separator + filename2);
		Assertions.assertDoesNotThrow(file2::createNewFile);

		Optional<Path> path = repository.findByFilename(filename2);
		Assertions.assertTrue(path.isPresent());
		Assertions.assertEquals(filename2, path.get().toFile().getName());
		Assertions.assertTrue(deleteAllFromDirectory(rootFolder));
		Assertions.assertTrue(rootFolder.delete());
	}

	@Test
	void findAll() {
		String root = "." + File.separator + "init_test" + testFolderNumber.getAndIncrement();
		File rootFolder = Paths.get(root).toFile();
		Assertions.assertTrue(repository.init(root, true));
		File file1 = new File(root + File.separator + filename1);
		Assertions.assertDoesNotThrow(file1::createNewFile);
		File file2 = new File(root + File.separator + filename2);
		Assertions.assertDoesNotThrow(file2::createNewFile);

		List<Path> paths = repository.findAll().toList();
		Assertions.assertEquals(2, paths.size());
		Assertions.assertEquals(filename1, paths.get(0).toFile().getName());
		Assertions.assertEquals(filename2, paths.get(1).toFile().getName());
		Assertions.assertTrue(deleteAllFromDirectory(rootFolder));
		Assertions.assertTrue(rootFolder.delete());
	}

	@Test
	void save_WrongFilename() {
		String root = "." + File.separator + "init_test" + testFolderNumber.getAndIncrement();
		File rootFolder = Paths.get(root).toFile();
		Assertions.assertTrue(repository.init(root, true));
		String filename = "file\ntxt";
		String content = "content";
		Multipart file = new Multipart("file", filename, MediaType.TEXT_PLAIN_VALUE, content.getBytes());

		Assertions.assertTrue(repository.save(file).isEmpty());
		List<Path> paths = repository.findAll().toList();
		Assertions.assertEquals(0, paths.size());
		Assertions.assertTrue(rootFolder.delete());
	}

	@Test
	void save_ExistingFile() {
		String root = "." + File.separator + "init_test" + testFolderNumber.getAndIncrement();
		File rootFolder = Paths.get(root).toFile();
		Assertions.assertTrue(repository.init(root, true));
		String filename3 = "file2.txt";
		String content3 = "content";
		Multipart file = new Multipart("file", filename3, MediaType.TEXT_PLAIN_VALUE, content3.getBytes());
		File file1 = new File(root + File.separator + filename1);
		Assertions.assertDoesNotThrow(file1::createNewFile);
		File file2 = new File(root + File.separator + filename2);
		Assertions.assertDoesNotThrow(file2::createNewFile);

		Assertions.assertTrue(repository.save(file).isEmpty());
		List<Path> paths = repository.findAll().toList();
		Assertions.assertEquals(2, paths.size());
		Assertions.assertEquals(filename1, paths.get(0).toFile().getName());
		Assertions.assertEquals(filename2, paths.get(1).toFile().getName());
		Assertions.assertTrue(deleteAllFromDirectory(rootFolder));
		Assertions.assertTrue(rootFolder.delete());
	}

	@Test
	void save_NoSuchFile() {
		String root = "." + File.separator + "init_test" + testFolderNumber.getAndIncrement();
		File rootFolder = Paths.get(root).toFile();
		Assertions.assertTrue(repository.init(root, true));
		String filename3 = "file3.txt";
		String content3 = "content";
		Multipart file = new Multipart("file", filename3, MediaType.TEXT_PLAIN_VALUE, content3.getBytes());
		File file1 = new File(root + File.separator + filename1);
		Assertions.assertDoesNotThrow(file1::createNewFile);
		File file2 = new File(root + File.separator + filename2);
		Assertions.assertDoesNotThrow(file2::createNewFile);

		Optional<String> savedFilename = repository.save(file);
		Assertions.assertTrue(savedFilename.isPresent());
		Assertions.assertEquals(filename3, savedFilename.get());
		List<Path> paths = repository.findAll().toList();
		Assertions.assertEquals(3, paths.size());
		Assertions.assertEquals(filename1, paths.get(0).toFile().getName());
		Assertions.assertEquals(filename2, paths.get(1).toFile().getName());
		Assertions.assertEquals(filename3, paths.get(2).toFile().getName());
		Assertions.assertTrue(deleteAllFromDirectory(rootFolder));
		Assertions.assertTrue(rootFolder.delete());
	}

	@Test
	void saveAll() {
		String root = "." + File.separator + "init_test" + testFolderNumber.getAndIncrement();
		File rootFolder = Paths.get(root).toFile();
		Assertions.assertTrue(repository.init(root, true));
		String content1 = "content";
		Multipart file1 = new Multipart("file", filename1, MediaType.TEXT_PLAIN_VALUE, content1.getBytes());
		String content2 = "content";
		Multipart file2 = new Multipart("file", filename2, MediaType.TEXT_PLAIN_VALUE, content2.getBytes());
		List<Multipart> files = List.of(file1, file2);

		List<String> savedFilenames = repository.saveAll(files).toList();
		Assertions.assertEquals(2, savedFilenames.size());
		Assertions.assertEquals(filename1, savedFilenames.get(0));
		Assertions.assertEquals(filename2, savedFilenames.get(1));
		List<Path> paths = repository.findAll().toList();
		Assertions.assertEquals(2, paths.size());
		Assertions.assertEquals(filename1, paths.get(0).toFile().getName());
		Assertions.assertEquals(filename2, paths.get(1).toFile().getName());
		Assertions.assertTrue(deleteAllFromDirectory(rootFolder));
		Assertions.assertTrue(rootFolder.delete());
	}

	@Test
	void delete_WrongFilename() {
		String root = "." + File.separator + "init_test" + testFolderNumber.getAndIncrement();
		File rootFolder = Paths.get(root).toFile();
		Assertions.assertTrue(repository.init(root, true));
		File file1 = new File(root + File.separator + filename1);
		Assertions.assertDoesNotThrow(file1::createNewFile);
		File file2 = new File(root + File.separator + filename2);
		Assertions.assertDoesNotThrow(file2::createNewFile);

		Assertions.assertFalse(repository.delete("file1\ntxt"));
		List<Path> paths = repository.findAll().toList();
		Assertions.assertEquals(2, paths.size());
		Assertions.assertEquals(filename1, paths.get(0).toFile().getName());
		Assertions.assertEquals(filename2, paths.get(1).toFile().getName());
		Assertions.assertTrue(deleteAllFromDirectory(rootFolder));
		Assertions.assertTrue(rootFolder.delete());
	}

	@Test
	void delete_NoSuchFile() {
		String root = "." + File.separator + "init_test" + testFolderNumber.getAndIncrement();
		File rootFolder = Paths.get(root).toFile();
		Assertions.assertTrue(repository.init(root, true));
		File file1 = new File(root + File.separator + filename1);
		Assertions.assertDoesNotThrow(file1::createNewFile);
		File file2 = new File(root + File.separator + filename2);
		Assertions.assertDoesNotThrow(file2::createNewFile);

		Assertions.assertFalse(repository.delete("file3.txt"));
		List<Path> paths = repository.findAll().toList();
		Assertions.assertEquals(2, paths.size());
		Assertions.assertEquals(filename1, paths.get(0).toFile().getName());
		Assertions.assertEquals(filename2, paths.get(1).toFile().getName());
		Assertions.assertTrue(deleteAllFromDirectory(rootFolder));
		Assertions.assertTrue(rootFolder.delete());
	}

	@Test
	void delete_FileExists() {
		String root = "." + File.separator + "init_test" + testFolderNumber.getAndIncrement();
		File rootFolder = Paths.get(root).toFile();
		Assertions.assertTrue(repository.init(root, true));
		File file1 = new File(root + File.separator + filename1);
		Assertions.assertDoesNotThrow(file1::createNewFile);
		File file2 = new File(root + File.separator + filename2);
		Assertions.assertDoesNotThrow(file2::createNewFile);

		Assertions.assertTrue(repository.delete(filename2));
		List<Path> paths = repository.findAll().toList();
		Assertions.assertEquals(1, paths.size());
		Assertions.assertEquals(filename1, paths.get(0).toFile().getName());
		Assertions.assertTrue(deleteAllFromDirectory(rootFolder));
		Assertions.assertTrue(rootFolder.delete());
	}

	@Test
	void DeleteAll() {
		String root = "." + File.separator + "init_test" + testFolderNumber.getAndIncrement();
		File rootFolder = Paths.get(root).toFile();
		Assertions.assertTrue(repository.init(root, true));
		File file1 = new File(root + File.separator + filename1);
		Assertions.assertDoesNotThrow(file1::createNewFile);
		File file2 = new File(root + File.separator + filename2);
		Assertions.assertDoesNotThrow(file2::createNewFile);

		Assertions.assertEquals(2, repository.deleteAll());
		List<Path> paths = repository.findAll().toList();
		Assertions.assertEquals(0, paths.size());
		Assertions.assertTrue(rootFolder.delete());
	}

	@Test
	void count() {
		String root = "." + File.separator + "init_test" + testFolderNumber.getAndIncrement();
		File rootFolder = Paths.get(root).toFile();
		Assertions.assertTrue(repository.init(root, true));
		File file1 = new File(root + File.separator + filename1);
		Assertions.assertDoesNotThrow(file1::createNewFile);
		File file2 = new File(root + File.separator + filename2);
		Assertions.assertDoesNotThrow(file2::createNewFile);

		Assertions.assertEquals(2, repository.count());
		Assertions.assertTrue(deleteAllFromDirectory(rootFolder));
		Assertions.assertTrue(rootFolder.delete());
	}

	private boolean deleteAllFromDirectory(File root) {
		File[] files = root.listFiles();
		if (files == null) {
			return false;
		}
		if (files.length == 0) {
			return true;
		}
		return Arrays.stream(files)
				.filter(File::delete)
				.count() == files.length;
	}
}
END OF EXAMPLE

=================================================================================
2. IN-DATABASE REPOSITORY TESTS
=================================================================================
EXAMPLE FOR REPOSITORY INTERFACE UNIT TEST (IN-DATABASE):
import org.junit.jupiter.api.*;
import org.springframework.beans.factory.annotation.*;
import org.springframework.boot.test.autoconfigure.jdbc.*;
import org.springframework.boot.test.autoconfigure.orm.jpa.*;
import java.util.*;

@DataJpaTest
@AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.NONE)
class FileInDatabaseRepositoryInterfaceTest {

	@Autowired
	FileInDatabaseRepositoryInterface repository;

	@Test
	void findByFileName_NoSuchFile() {
		FileInDatabaseEntity entity1 = new FileInDatabaseEntity(
				"file1.txt",
				"content",
				""
		);
		entity1 = repository.save(entity1);
		FileInDatabaseEntity entity2 = new FileInDatabaseEntity(
				"file2.txt",
				"content",
				""
		);
		entity2 = repository.save(entity2);

		String filename = "file3.txt";
		Optional<FileInDatabaseEntity> entity = repository.findByFileName(filename);
		Assertions.assertTrue(entity.isEmpty());
	}

	@Test
	void findByFileName_ExistingFile() {
		FileInDatabaseEntity entity1 = new FileInDatabaseEntity(
				"file1.txt",
				"content",
				""
		);
		entity1 = repository.save(entity1);
		FileInDatabaseEntity entity2 = new FileInDatabaseEntity(
				"file2.txt",
				"content",
				""
		);
		entity2 = repository.save(entity2);

		String filename = "file2.txt";
		Optional<FileInDatabaseEntity> entity = repository.findByFileName(filename);
		Assertions.assertTrue(entity.isPresent());
		Assertions.assertEquals(entity2, entity.get());
	}
}
END OF EXAMPLE

EXAMPLE FOR REPOSITORY CLASS UNIT TEST (IN-DATABASE):
import org.junit.jupiter.api.*;
import org.mockito.*;
import java.util.*;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class FileInDatabaseRepositoryTest {

	FileInDatabaseRepositoryInterface repositoryInterface;
	FileInDatabaseRepository repository;
	String filename1, filename2, content1, content2;
	FileInDatabaseEntity entityWithoutId1, entityWithoutId2, entityWithId1, entityWithId2;
	Multipart multipart1, multipart2;

	@BeforeEach
	void setUp() {
		repositoryInterface = Mockito.mock(FileInDatabaseRepositoryInterface.class);
		repository = new FileInDatabaseRepository(repositoryInterface);
		filename1 = "file1.txt";
		filename2 = "file2.txt";
		content1 = "content1";
		content2 = "content2";
		entityWithoutId1 = new FileInDatabaseEntity(filename1, content1, "");
		entityWithoutId2 = new FileInDatabaseEntity(filename2, content2, "");
		entityWithId1 = new FileInDatabaseEntity(1L, filename1, content1, "");
		entityWithId2 = new FileInDatabaseEntity(2L, filename2, content2, "");
		multipart1 = new Multipart("file", filename1, "", content1.getBytes());
		multipart2 = new Multipart("file", filename2, "", content2.getBytes());
	}

	@Test
	void getByFilename_NoSuchFile() {
		when(repositoryInterface.findByFileName(filename1))
				.thenReturn(Optional.empty());

		assertTrue(repository.getByFilename(filename1).isEmpty());
	}

	@Test
	void getByFilename_FileExists() {
		when(repositoryInterface.findByFileName(filename1))
				.thenReturn(Optional.of(entityWithId1));

		Optional<FileInDatabaseEntity> entity = repository.getByFilename(filename1);
		Assertions.assertTrue(entity.isPresent());
		Assertions.assertEquals(entityWithId1, entity.get());
	}

	@Test
	void getAll() {
		when(repositoryInterface.findAll())
				.thenReturn(List.of(entityWithId1, entityWithId2));

		List<FileInDatabaseEntity> entities = repository.getAll().toList();
		Assertions.assertEquals(2, entities.size());
		Assertions.assertEquals(entityWithId1, entities.get(0));
		Assertions.assertEquals(entityWithId2, entities.get(1));
	}

	@Test
	void findByFilename_NoSuchFile() {
		when(repositoryInterface.findByFileName(filename1))
				.thenReturn(Optional.empty());

		assertTrue(repository.findByFilename(filename1).isEmpty());
	}

	@Test
	void findByFilename_FileExists() {
		when(repositoryInterface.findByFileName(filename1))
				.thenReturn(Optional.of(entityWithId1));

		Optional<String> filename = repository.findByFilename(filename1);
		Assertions.assertTrue(filename.isPresent());
		Assertions.assertEquals(entityWithId1.getFileName(), filename.get());
	}

	@Test
	void findAll() {
		when(repositoryInterface.findAll())
				.thenReturn(List.of(entityWithId1, entityWithId2));

		List<String> filenames = repository.findAll().toList();
		Assertions.assertEquals(2, filenames.size());
		Assertions.assertEquals(filename1, filenames.get(0));
		Assertions.assertEquals(filename2, filenames.get(1));
	}

	@Test
	void save_ExistingFile() {
		when(repositoryInterface.findByFileName(filename1))
				.thenReturn(Optional.of(entityWithId1));

		Assertions.assertTrue(repository.save(multipart1).isEmpty());
	}

	@Test
	void save_NoSuchFile() {
		when(repositoryInterface.findByFileName(filename1))
				.thenReturn(Optional.empty());
		when(repositoryInterface.save(entityWithoutId1))
				.thenReturn(entityWithId1);

		Optional<String> entity = repository.save(multipart1);
		Assertions.assertTrue(entity.isPresent());
		Assertions.assertEquals(filename1, entity.get());
	}

	@Test
	void saveAll() {
		when(repositoryInterface.findByFileName(filename1))
				.thenReturn(Optional.of(entityWithId1));
		when(repositoryInterface.findByFileName(filename2))
				.thenReturn(Optional.empty());
		when(repositoryInterface.save(entityWithoutId2))
				.thenReturn(entityWithId2);

		List<String> filenames = repository.saveAll(List.of(multipart1, multipart2)).toList();
		Assertions.assertEquals(1, filenames.size());
		Assertions.assertEquals(filename2, filenames.get(0));
	}

	@Test
	void delete_NoSuchFile() {
		when(repositoryInterface.findByFileName(filename1))
				.thenReturn(Optional.empty());

		Assertions.assertFalse(repository.delete(filename1));
	}

	@Test
	void delete_ExistingFile() {
		when(repositoryInterface.findByFileName(filename1))
				.thenReturn(Optional.of(entityWithId1));
		doNothing().when(repositoryInterface).deleteById(entityWithId1.getId());

		Assertions.assertTrue(repository.delete(filename1));
	}

	@Test
	void deleteAll() {
		when(repositoryInterface.findAll())
				.thenReturn(List.of(entityWithId1, entityWithId2));
		when(repositoryInterface.findByFileName(filename1))
				.thenReturn(Optional.of(entityWithId1));
		when(repositoryInterface.findByFileName(filename2))
				.thenReturn(Optional.of(entityWithId2));
		doNothing().when(repositoryInterface).deleteById(entityWithId1.getId());
		doNothing().when(repositoryInterface).deleteById(entityWithId2.getId());

		Assertions.assertEquals(2, repository.deleteAll());
	}
}
END OF EXAMPLE

=>SPRING BOOT FILE STORAGE WITH THYMELEAF EXAMPLE TESTS
=>SPRING BOOT FILE STORAGE WITH THYMELEAF REPOSITORY EXAMPLE
