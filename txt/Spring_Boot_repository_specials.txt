=================================================================================
SPRING BOOT REPOSITORY SPECIALS
=================================================================================
1. LIKE QUERY IN POSTGRESQL STRING ARRAY COLUMN (ARRAY_TO_STRING)
2. NAMED QUERIES
3. QUERY REWRITER
4. ENTITY MANAGER

=================================================================================
1. LIKE QUERY IN POSTGRESQL STRING ARRAY COLUMN (ARRAY_TO_STRING)
=================================================================================
Via using custom query methods with @Query annotation, most of the SQL (JPQL) queries can be defined.
In case the query targets a string array column in the database (mostly available in PostgreSQL), using the ANY and IN keywords in the expression can solve relation checks between values and array-element values.
However, in case partial and-or case-insensitive checks are needed in an array elements, defining such query is not possible since there is no tool in SQL (JPQL) for that. Instead, defining a conversion from array to text is needed on repository level, and that text can be checked e.g. partially.

Please note, the solution described here is applicable until Hibernate 5. After that the right solution needs research.
In case using Hibernate 6+ (Spring Boot 3+), consider having text column type instead of text[] with infinite size.
Also, array column types are not common among databases which points to aiming for more general data formats.

A query in SQL would be like one of these:
    - select * from employee where ARRAY_TO_STRING(keywords, ‘,’) LIKE ‘%lunch%’;
    - select * from employee where UPPER(ARRAY_TO_STRING(keywords, ‘,’)) LIKE UPPER(‘%lunch%’);

Defining the custom ARRAY_TO_STRING and LIKE functionalities above needs the steps below:
    - define a custom dialect to register the SQL function in JPA
    - define a SearchCriteria
    - define a custom specification for the entity class
    - define repository of the entity class via using custom specification

Below is the set of examples shows implementation of LIKE functionality for String array column.

EXAMPLE FOR DEFINITION OF CUSTOM DIALECT:
public class CustomDialect extends PostgreSQL94Dialect {
    public CustomDialect() {
        super();
        registerFunction("array_to_string", new StandardSQLFunction("array_to_string"));
    }
}
END OF EXAMPLE

EXAMPLE FOR DEFINITION OF SEARCH CRITERIA:
/*
key: field name
operation: e.g. equality or less than
value: field value
*/
public class SearchCriteria {
    private String key;
    private String operation;
    private List<String> value;
}
END OF EXAMPLE

EXAMPLE FOR DEFINITION OF CUSTOM SPECIFICATION:
/*
Employee: entity (domain) class
root: name of database table
CriteriaQuery: the query, good for applying DISTINCT, sub-queries, ORDER BY, etc.
CriteriaBuilder: contains the conditions, good for creating your WHERE clauses.
*/
public class EmployeeSpecification implements Specification<Employee> {
    private List<SearchCriteria> searchCriteria = new ArrayList<>();

    public void add(SearchCriteria criteria) {
        this.searchCriteria.add(criteria);
    }

    @Override
    public Predicate toPredicate(Root<Employee> root, CriteriaQuery<?> query, CriteriaBuilder builder) {
        List<Predicate> predicates = new ArrayList<>();
        for (SearchCriteria myCriteria : searchCriteria) {
            for (Object vals : myCriteria.getValue()) {
                //for array of string datatype "keywords" column in employee table
                if (myCriteria.getOperation().equalsIgnoreCase("ARRAY_STRING_EQUALITY")) {
                    Expression<String> delimiter = builder.<String>literal(",");
                    predicates.add(builder.like(
                            builder.function(
                                    "array_to_string",
                                    String.class,
                                    root.get(myCriteria.getKey()),
                                    delimiter
                            ),
                            "%" + vals.toString().toLowerCase() + "%"
                    ));
                }
            }
        }
        return builder.and(predicates.toArray(new Predicate[0]));
    }
}
END OF EXAMPLE

EXAMPLE FOR DEFINITION OF REPOSITORY:
public interface EmployeeRepository extends JpaRepository<Employee, Long>, JpaSpecificationExecutor<Employee> {
}
END OF EXAMPLE

MORE HERE: https://www.baeldung.com/hibernate-custom-types
MORE HERE: https://www.baeldung.com/java-hibernate-map-postgresql-array

=================================================================================
2. NAMED QUERIES
=================================================================================
Custom named queries can be rendered to the domain class:
    - annotation-based configuration (see on SPRING BOOT ENTITY page)
    - JPA named queries

The JPA named queries are defined in XML configuration metafile while attached to the repository with additional method declaration of the repository interface.
These queries are read at every call runtime.
The configuration metafile directory should be placed on the domain class path and named META-INF.
The file itself should be named orm.xml.
The named query will be accessible by invoking the DomainClassName.methodName(...) in the code.
In case the invoked query can not be found in the metafile, JPA will try to understand it by the name of the method by looking for keyword, see above.

Although using named queries are valid strategy for a limited number of queries, this technique ties them to the entity instead of the repository where their place should be.
Therefore, using them does not fit to best practices.

EXAMPLE FOR A NAMED QUERY DEFINITION:
<named-query name="User.findByLastname">
    <query>select u from User u where u.lastname = ?1</query>
</named-query>
END OF EXAMPLE

The abstract method which uses the query definition, should be added to the repository interface.

EXAMPLE FOR THE ABSTRACT METHOD REFERENCING TO THE QUERY DEFINITION:
List<User> findByLastname(String lastname);
END OF EXAMPLE

EXAMPLE FOR INVOKING THE NAMED QUERY:
List<User> list = User.findByLastname(lastname);
END OF EXAMPLE

=================================================================================
3. QUERY REWRITER
=================================================================================
In the previous variants queries are a priori defined.
These queries are sent to the EntityManager of Hibernate upon usage.
It is possible to alternate a pre-defined query before it reaches the manager by utilizing the QueryRewriter:
    - via custom QueryRewriter class
    - via extending the repository interface with QueryRewriter

When the rewriter is expressed via class, in case such query is invoked, JPA will search for a QueryRewriter bean. Therefore, the class should be marked with @Component annotation or should be lifted into the configuration class of the entity as a @Bean.
This version is advised when e.g. more services or more repositories would access the same rewriter.

EXAMPLE FOR REPOSITORY INTERFACE WITH QUERY METHODS REFERENCING TO QUERY REWRITER (SQL AND JPQL):
public interface MyRepository extends JPARepository<EntityClassName, idType> {
    @Query(value = "select original_user_alias.* from SD_USER original_user_alias", nativeQuery = true, queryRewriter = MyQueryRewriter.class)
    List<User> findByNativeQuery(String param);

    @Query(value = "select original_user_alias from User original_user_alias", queryRewriter = MyQueryRewriter.class)
    List<User> findByNonNativeQuery(String param);
}
END OF EXAMPLE

EXAMPLE FOR CUSTOM QUERY REWRITER CLASS:
@Component
public class MyQueryRewriter implements QueryRewriter {

     @Override
     public String rewrite(String query, Sort sort) {
         return query.replaceAll("original_user_alias", "rewritten_user_alias");
     }
}
END OF EXAMPLE

When the rewriter is part of the repository, will be used only by that repository.
This version is advised when the container repository uses it only.

EXAMPLE FOR INTEGRATED QUERY REWRITER:
public interface MyRepository extends JPARepository<EntityClassName, idType>, QueryRewriter {
    @Query(value = "select original_user_alias.* from SD_USER original_user_alias", nativeQuery = true, queryRewriter = MyRepository.class)
    List<User> findByNativeQuery(String param);

    @Query(value = "select original_user_alias from User original_user_alias", queryRewriter = MyRepository.class)
    List<User> findByNonNativeQuery(String param);

     @Override
     public String rewrite(String query, Sort sort) {
         return query.replaceAll("original_user_alias", "rewritten_user_alias");
     }
}
END OF EXAMPLE

=================================================================================
4. ENTITY MANAGER
=================================================================================
The purpose of the EntityManager is to interact with the persistence context.
Spring Data JPA abstracts the developer from the EntityManager through Repository interfaces.
However, in certain cases, utilizing the EntityManager can be necessary.

The EntityManager is a Spring bean. Before using it, must be injected into a service component via @Autowired.
The EntityManager can be element of a JPA repository as well, could extend the functionality spectrum of the repository interface. In such case the EntityManager will be used by the repository methods and-or (if declared public) any class of the Business layer.

EXAMPLE FOR INJECTING ENTITY MANAGER INTO REPOSITORY:
@Repository
public interface RepositoryClassName extends JpaRepository<EntityClassName, TypeOfID> {

    @Autowired
    public TestEntityManager entityManager;
}
END OF EXAMPLE

EXAMPLE FOR INJECTING ENTITY MANAGER INTO SERVICE:
@Service
public class ServiceClassName {

    @Autowired
    private RepositoryClassName repository;

    @Autowired
    private TestEntityManager entityManager;
}
END OF EXAMPLE

The EntityManager bean handles all entity (domain) classes available in the Spring hierarchy. By calling read or write functionality, will identify the entity class through its arguments.
Its most commonly used method is the persist(). It writes a record to the database. In case of fail raises Exception.

=>SPRING BOOT REPOSITORY
