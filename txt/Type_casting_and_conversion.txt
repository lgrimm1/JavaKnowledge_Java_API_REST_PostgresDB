=================================================================================
TYPE CASTING AND CONVERSION
=================================================================================
Converting a type to an other type.

1. WIDENING (IMPLICIT) CASTING
2. NARROWING (EXPLICIT) CASTING
3. TYPE CONVERSION
4. HEXADECIMAL, BINARY AND OCTAL NUMBER CONVERSIONS

=================================================================================
1. WIDENING (IMPLICIT) CASTING
=================================================================================
Automatic, no data loss, a type will be converted to a type which can hold wider data.

EXAMPLE FOR IMPLICIT (WIDENING) CASTING:
int i = 25;
long l = i; //25L
double d = i; //25D
END OF EXAMPLE

=================================================================================
2. NARROWING (EXPLICIT) CASTING
=================================================================================
The target type is narrower, part of the source type will be truncated or trimmed.

EXAMPLE FOR EXPLICIT (NARROWING) CASTING:
double d = -12.65D;
int i = (int) d; //-12, the decimal part will be truncated which means the whole part of the original
float f = (float) d; //-12.65f, can be processed only when the stored value can fit into the narrower type; throws exception if d falls outside of float interval
END OF EXAMPLE

EXAMPLE FOR TYPICAL NARROWING CASTING:
import java.io.File;
...
File f = new File(...);
int length = (int) f.size(); //f.size() is a file size in Byte, it can be bigger than INTEGER.MAXVALUE however in many cases methods can accept only int parameter for input
END OF EXAMPLE

=================================================================================
3. TYPE CONVERSION
=================================================================================
If the target class has (wrapper classes always have) type conversion methods, can convert data into their own type.
The .valueOf() methods return a wrapper class-type value.
The .parseInt(), .parseDouble() etc. methods return a primitive-type value of the referred wrapper class.
Calling a parser on a primitive type is fast, but a .valueOf() first creates a wrapper type then down-casts it to be a primitive one.
Always use .valueOf() in case the source and the target are classes, and parsing when both are primitives. Otherwise, use .valueOf() if the target is a class.

EXAMPLE FOR CONVERSIONS:
int i = 32;
double d = -12.435D;
String s = String.valueOf(i); //"32"
s = String.valueOf(d); //"-12.435"
d = Double.parseDouble(s); //-12.435D; if conversion is not possible throws exception
Double d2 = Double.valueOf(s); //s is converted into a wrapper class, -12.435D as an object
i = Integer.parseInt(s); //conversion throws exception, "-12.435" is not an int
END OF EXAMPLE

=================================================================================
4. HEXADECIMAL, BINARY AND OCTAL NUMBER CONVERSIONS
=================================================================================
Hexadecimal numbers are stored in Strings, 2 characters per a byte.
For a few byte-to-hexa conversions, can use String formatting since formatting is a slower process but it is a simple solution.
For general byte-to-hexa solution, use dedicated method.
For integer, use the Integer.toHexString() method for int-to-hexa, and Integer.parseInt() method for hexa-to-int conversions. Both methods handle minus signs. The toHexString() method results lower case characters, use toUpperCase() method on the result if needed.
Byte conversions can be handled via int-to-hexa and hexa-to-int conversions as well but must check data against valid byte intervals and the one-byte-two-characters rule.
The Integer.parseInt() method has an optional second parameter which marks which number the given first parameter represents. If missing, marks the default decimal system.

EXAMPLE FOR BYTE-TO-HEXA CONVERSION VIA STRING FORMATTING:
byte[] ba = ...;
String s = "";
for (byte b : ba) {
    s += String.format("%02X", b);
}
END OF EXAMPLE

EXAMPLE FOR BYTE-TO-HEXA CONVERSION VIA DEDICATED METHOD:
public static String byteArrayToHexa(byte[] byteArray) {
    private final static char[] hexArray = "0123456789ABCDEF".toCharArray();
    char[] hexChars = new char[byteArray.length * 2];
    for (int i = 0; i < byteArray.length; i++) {
        int v = bytes[i] & 0xFF;
        hexChars[j * 2] = hexArray[v >>> 4];
        hexChars[j * 2 + 1] = hexArray[v & 0x0F];
    }
    return new String(hexChars);
}
END OF EXAMPLE

EXAMPLE FOR INT-TO-HEXA CONVERSION:
int n = ...;
String s = Integer.toHexString(n).toUpperCase();
END OF EXAMPLE

EXAMPLE FOR HEXA-TO-INT CONVERSION:
String s = ...;
int n = Integer.parseInt(s, 16);
END OF EXAMPLE

Binary numbers are stored in Strings, a number per String.
For int-to-bin conversion, use Integer.toBinaryString(), bin-to-int conversion, use Integer.parseInt() methods. Both methods handle minus signs.

EXAMPLE FOR INT-TO-BIN CONVERSION:
int n = ...;
String s = Integer.toBinaryString(n);
END OF EXAMPLE

EXAMPLE FOR BIN-TO-INT CONVERSION:
String s = ...;
int n = Integer.parseInt(s, 2);
END OF EXAMPLE

Octal numbers are stored in Strings, a number per String.
For int-to-octal conversion, use Integer.toOctalString(), octal-to-int conversion, use Integer.parseInt() methods. Both methods handle minus signs.

EXAMPLE FOR INT-TO-OCTAL CONVERSION:
int n = ...;
String s = Integer.toOctalString(n);
END OF EXAMPLE

EXAMPLE FOR OCTAL-TO-INT CONVERSION:
String s = ...;
int n = Integer.parseInt(s, 8);
END OF EXAMPLE

The parseInt() method throws exception in case the input String contains invalid characters for the prefix (e.g. F character in octal number String).

=>PRIMITIVE DATA TYPES
=>WRAPPER CLASSES
=>STRING
=>VARIABLES
=>OBJECTS
=>STATEMENTS
