=================================================================================
SPRING BOOT FILE STORAGE WITH THYMELEAF EXAMPLE SERVICE TESTS
=================================================================================
For the two solutions, there are tests which are identical, and certain tests which have significant differences. Code blocks and methods which are not the same, are marked.

EXAMPLE FOR SERVICE CLASS UNIT TEST:
import org.junit.jupiter.api.*;
import org.mockito.*;
import org.springframework.core.io.*;
import org.springframework.http.*;
import org.springframework.test.web.*;
import org.springframework.web.servlet.*;
import java.io.*;
import java.net.*;
import java.nio.file.*;
import java.util.*;
import java.util.stream.*;
import static org.mockito.Mockito.when;

//in-folder:
class FileInFolderServiceTest {
	FileInFolderRepository repository;
	FileInFolderService service;
	Path path1, path2;
	Stream<Path> paths;

//in-database:
class FileInDatabaseServiceTest {
	FileInDatabaseRepository repository;
	FileInDatabaseService service;
	Stream<String> filenameStream;
	FileInDatabaseEntity entity1;
	FileInDatabaseEntity entity2;

	String filename1, filename2, content1, content2, baseUrl;
	FileInfo fileInfo1, fileInfo2;
	List<FileInfo> fileInfoList;
	Multipart file1, file2;

	@BeforeEach
	void setUp() {
        //in-folder:
		repository = Mockito.mock(FileInFolderRepository.class);
		when(repository.init("." + File.separator + "upload", false))
				.thenReturn(true);
		service = new FileInFolderService(repository);
		//in-database:
		repository = Mockito.mock(FileInDatabaseRepository.class);
		service = new FileInDatabaseService(repository);

		baseUrl = "localhost:8080";
		filename1 = "file1.txt";
		filename2 = "file2.txt";
		fileInfo1 = new FileInfo(filename1, baseUrl + "/files/" + filename1);
		fileInfo2 = new FileInfo(filename2, baseUrl + "/files/" + filename2);
		fileInfoList = List.of(fileInfo1, fileInfo2);
		content1 = "content1";
		content2 = "content2";
		file1 = new Multipart("file", filename1, MediaType.TEXT_PLAIN_VALUE, content1.getBytes());
		file2 = new Multipart("file", filename2, MediaType.TEXT_PLAIN_VALUE, content2.getBytes());

		//in-folder:
		path1 = new File(filename1).toPath();
		path2 = new File(filename2).toPath();
		paths = Stream.of(path1, path2);
		when(repository.findAll())
				.thenReturn(paths);

        //in-database:
		filenameStream = Stream.of(filename1, filename2);
		entity1 = new FileInDatabaseEntity(1L, filename1, content1, "file type 1");
		entity2 = new FileInDatabaseEntity(2L, filename2, content2, "file type 2");
		when(repository.findAll())
				.thenReturn(filenameStream);
	}

    //in-folder method:
	@Test
	void init_Fail() {
		String root = "." + File.separator + "upload";
		when(repository.init(root, false))
				.thenReturn(false);
		when(repository.init(root, true))
				.thenReturn(false);

		Exception e = Assertions.assertThrows(Exception.class, () -> new FileInFolderService(repository));
		Assertions.assertEquals("Could not initialize the file storage!", e.getMessage());
	}

    //in-folder method:
	@Test
	void init_Success() {
		String root = "." + File.separator + "upload";
		when(repository.init(root, false))
				.thenReturn(true);
		when(repository.init(root, true))
				.thenReturn(true);

		service = Assertions.assertDoesNotThrow(() -> new FileInFolderService(repository));
		Assertions.assertNotNull(service);
	}

	@Test
	void newFile() {
		Payload expectedPayload = new Payload(
				null,
				null,
				null
		);
		Map<String, Object> model = new HashMap<>();
		model.put("payload", expectedPayload);

		ModelAndView actualModelAndView = service.newFile();
		ModelAndViewAssert.assertViewName(actualModelAndView, "upload");
		ModelAndViewAssert.assertModelAttributeValues(actualModelAndView, model);
	}

	@Test
	void uploadFile_NullFile() {
		Payload expectedPayload = new Payload(
				"No file was given.",
				null,
				fileInfoList
		);
		Map<String, Object> model = new HashMap<>();
		model.put("payload", expectedPayload);

		ModelAndView actualModelAndView = service.uploadFile(null, baseUrl);
		ModelAndViewAssert.assertViewName(actualModelAndView, "file_list");
		ModelAndViewAssert.assertModelAttributeValues(actualModelAndView, model);
	}

	@Test
	void uploadFile_WrongFilename() {
		String filename3 = "file3\ntxt";
		String content3 = "content3";
		Multipart file3 = new Multipart("file", filename3, MediaType.TEXT_PLAIN_VALUE, content3.getBytes());

		//in-folder:
		when(repository.save(file3))
				.thenReturn(Optional.empty());

		Payload expectedPayload = new Payload(
				"Could not upload the file: " + filename3,
				null,
				fileInfoList
		);
		Map<String, Object> model = new HashMap<>();
		model.put("payload", expectedPayload);

		ModelAndView actualModelAndView = service.uploadFile(file3, baseUrl);
		ModelAndViewAssert.assertViewName(actualModelAndView, "file_list");
		ModelAndViewAssert.assertModelAttributeValues(actualModelAndView, model);
	}

	@Test
	void uploadFile_FileExists() {
		when(repository.save(file1))
				.thenReturn(Optional.empty());
		Payload expectedPayload = new Payload(
				"Could not upload the file: " + filename1,
				null,
				fileInfoList
		);
		Map<String, Object> model = new HashMap<>();
		model.put("payload", expectedPayload);

		ModelAndView actualModelAndView = service.uploadFile(file1, baseUrl);
		ModelAndViewAssert.assertViewName(actualModelAndView, "file_list");
		ModelAndViewAssert.assertModelAttributeValues(actualModelAndView, model);
	}

	@Test
	void uploadFile_NoSuchFile() {
		when(repository.save(file1))
				.thenReturn(Optional.of(filename1));
		Payload expectedPayload = new Payload(
				filename1 + " file has been successfully uploaded.",
				null,
				fileInfoList
		);
		Map<String, Object> model = new HashMap<>();
		model.put("payload", expectedPayload);

		ModelAndView actualModelAndView = service.uploadFile(file1, baseUrl);
		ModelAndViewAssert.assertViewName(actualModelAndView, "file_list");
		ModelAndViewAssert.assertModelAttributeValues(actualModelAndView, model);
	}

	@Test
	void uploadFiles_NullFiles() {
		Payload expectedPayload = new Payload(
				null,
				List.of("No files were given."),
				fileInfoList
		);
		Map<String, Object> model = new HashMap<>();
		model.put("payload", expectedPayload);

		ModelAndView actualModelAndView = service.uploadFiles(null, baseUrl);
		ModelAndViewAssert.assertViewName(actualModelAndView, "file_list");
		ModelAndViewAssert.assertModelAttributeValues(actualModelAndView, model);
	}

	@Test
	void uploadFiles_EmptyFiles() {
		Payload expectedPayload = new Payload(
				null,
				List.of("No files were given."),
				fileInfoList
		);
		Map<String, Object> model = new HashMap<>();
		model.put("payload", expectedPayload);

		ModelAndView actualModelAndView = service.uploadFiles(new ArrayList<>(), baseUrl);
		ModelAndViewAssert.assertViewName(actualModelAndView, "file_list");
		ModelAndViewAssert.assertModelAttributeValues(actualModelAndView, model);
	}

	@Test
	void uploadFiles_GivenFiles() {
		List<Multipart> filesWithoutNull = new ArrayList<>();
		filesWithoutNull.add(file1);
		filesWithoutNull.add(file2);
		List<Multipart> filesWithNull = new ArrayList<>(filesWithoutNull);
		filesWithNull.add(null);

        //in-folder:
		when(repository.saveAll(filesWithoutNull))
				.thenReturn(Stream.of(filename1, filename2));
        //in-database:
		Stream<String> filenameStream2 = Stream.of(filename1, filename2);
		when(repository.saveAll(filesWithoutNull))
				.thenReturn(filenameStream2);

		Payload expectedPayload = new Payload(
				null,
				List.of("Results:", filename1 + ": [Success]", filename2 + ": [Success]"),
				fileInfoList
		);
		Map<String, Object> model = new HashMap<>();
		model.put("payload", expectedPayload);

		ModelAndView actualModelAndView = service.uploadFiles(filesWithNull, baseUrl);
		ModelAndViewAssert.assertViewName(actualModelAndView, "file_list");
		ModelAndViewAssert.assertModelAttributeValues(actualModelAndView, model);
	}

	@Test
	void getFileList() {
		Payload expectedPayload = new Payload(
				null,
				null,
				fileInfoList
		);
		Map<String, Object> model = new HashMap<>();
		model.put("payload", expectedPayload);

		ModelAndView actualModelAndView = service.getFileList(baseUrl);
		ModelAndViewAssert.assertViewName(actualModelAndView, "file_list");
		ModelAndViewAssert.assertModelAttributeValues(actualModelAndView, model);
	}

    //in-folder method:
	@Test
	void getFile_NullFilename() {
		ResponseEntity<Resource> expectedResponseEntity = ResponseEntity
				.badRequest()
				.header(HttpHeaders.CONTENT_DISPOSITION, "")
				.body(null);

		Assertions.assertEquals(expectedResponseEntity, service.getFile(null));
	}

    //in-folder method:
	@Test
	void getFile_BlankFilename() {
		ResponseEntity<Resource> expectedResponseEntity = ResponseEntity
				.badRequest()
				.header(HttpHeaders.CONTENT_DISPOSITION, "")
				.body(null);

		Assertions.assertEquals(expectedResponseEntity, service.getFile("  "));
	}

    //in-folder method:
	@Test
	void getFile_WrongFilename() {
		String filename3 = "file\ntxt";
		when(repository.getByFilename(filename3))
				.thenReturn(Optional.empty());
		ResponseEntity<Resource> expectedResponseEntity = ResponseEntity
				.badRequest()
				.header(HttpHeaders.CONTENT_DISPOSITION, "")
				.body(null);

		Assertions.assertEquals(expectedResponseEntity, service.getFile(filename3));
	}

    //in-folder method:
	@Test
	void getFile_NoSuchFile() {
		when(repository.getByFilename(filename1))
				.thenReturn(Optional.empty());
		ResponseEntity<Resource> expectedResponseEntity = ResponseEntity
				.badRequest()
				.header(HttpHeaders.CONTENT_DISPOSITION, "")
				.body(null);

		Assertions.assertEquals(expectedResponseEntity, service.getFile(filename1));
	}

    //in-folder method:
	@Test
	void getFile_ExistingFile() throws MalformedURLException {
		Resource resource = new UrlResource(path1.toUri());
		when(repository.getByFilename(filename1))
				.thenReturn(Optional.of(resource));
		ResponseEntity<Resource> expectedResponseEntity = ResponseEntity
				.ok()
				.header(HttpHeaders.CONTENT_DISPOSITION,
						"attachment; filename=\"" + resource.getFilename() + "\"")
				.body(resource);

		Assertions.assertEquals(expectedResponseEntity, service.getFile(filename1));
	}

    //in-database method:
	@Test
	void getFile_NullFilename() {
		ResponseEntity<byte[]> expectedResponseEntity = ResponseEntity
				.badRequest()
				.header(HttpHeaders.CONTENT_DISPOSITION, "")
				.body(null);

		Assertions.assertEquals(expectedResponseEntity, service.getFile(null));
	}

    //in-database method:
	@Test
	void getFile_BlankFilename() {
		ResponseEntity<byte[]> expectedResponseEntity = ResponseEntity
				.badRequest()
				.header(HttpHeaders.CONTENT_DISPOSITION, "")
				.body(null);

		Assertions.assertEquals(expectedResponseEntity, service.getFile("  "));
	}

    //in-database method:
	@Test
	void getFile_WrongFilename() {
		String filename3 = "file\ntxt";
		ResponseEntity<byte[]> expectedResponseEntity = ResponseEntity
				.badRequest()
				.header(HttpHeaders.CONTENT_DISPOSITION, "")
				.body(null);

		Assertions.assertEquals(expectedResponseEntity, service.getFile(filename3));
	}

    //in-database method:
	@Test
	void getFile_NoSuchFile() {
		when(repository.getByFilename(filename1))
				.thenReturn(Optional.empty());
		ResponseEntity<byte[]> expectedResponseEntity = ResponseEntity
				.badRequest()
				.header(HttpHeaders.CONTENT_DISPOSITION, "")
				.body(null);

		Assertions.assertEquals(expectedResponseEntity, service.getFile(filename1));
	}

    //in-database method:
	@Test
	void getFile_ExistingFile() {
		when(repository.getByFilename(filename1))
				.thenReturn(Optional.of(entity1));
		ResponseEntity<byte[]> expectedResponseEntity = ResponseEntity
				.ok()
				.header(HttpHeaders.CONTENT_DISPOSITION,
						"attachment; filename=\"" + filename1 + "\"")
				.body(content1.getBytes());

		Assertions.assertEquals(expectedResponseEntity, service.getFile(filename1));
	}

	@Test
	void deleteFile_NullFilename() {
		Payload expectedPayload = new Payload(
				"No file was given.",
				null,
				fileInfoList
		);
		Map<String, Object> model = new HashMap<>();
		model.put("payload", expectedPayload);

		ModelAndView actualModelAndView = service.deleteFile(null, baseUrl);
		ModelAndViewAssert.assertViewName(actualModelAndView, "file_list");
		ModelAndViewAssert.assertModelAttributeValues(actualModelAndView, model);
	}

	@Test
	void deleteFile_BlankFilename() {
		Payload expectedPayload = new Payload(
				"No file was given.",
				null,
				fileInfoList
		);
		Map<String, Object> model = new HashMap<>();
		model.put("payload", expectedPayload);

		ModelAndView actualModelAndView = service.deleteFile("  ", baseUrl);
		ModelAndViewAssert.assertViewName(actualModelAndView, "file_list");
		ModelAndViewAssert.assertModelAttributeValues(actualModelAndView, model);
	}

	@Test
	void deleteFile_WrongFilename() {
		String filename3 = "file\ntxt";

		//in-folder:
		when(repository.delete(filename3))
				.thenReturn(false);
		Payload expectedPayload = new Payload(
				filename3 + " file does not exist!",
				null,
				fileInfoList
		);
		//in-database:
		Payload expectedPayload = new Payload(
				"Wrong file was given.",
				null,
				fileInfoList
		);

		Map<String, Object> model = new HashMap<>();
		model.put("payload", expectedPayload);

		ModelAndView actualModelAndView = service.deleteFile(filename3, baseUrl);
		ModelAndViewAssert.assertViewName(actualModelAndView, "file_list");
		ModelAndViewAssert.assertModelAttributeValues(actualModelAndView, model);
	}

	@Test
	void deleteFile_NoSuchFile() {
		when(repository.delete(filename1))
				.thenReturn(false);
		Payload expectedPayload = new Payload(
				filename1 + " file does not exist!",
				null,
				fileInfoList
		);
		Map<String, Object> model = new HashMap<>();
		model.put("payload", expectedPayload);

		ModelAndView actualModelAndView = service.deleteFile(filename1, baseUrl);
		ModelAndViewAssert.assertViewName(actualModelAndView, "file_list");
		ModelAndViewAssert.assertModelAttributeValues(actualModelAndView, model);
	}

	@Test
	void deleteFile_FileExists() {
		when(repository.delete(filename1))
				.thenReturn(true);
		Payload expectedPayload = new Payload(
				filename1 + " file has been deleted.",
				null,
				fileInfoList
		);
		Map<String, Object> model = new HashMap<>();
		model.put("payload", expectedPayload);

		ModelAndView actualModelAndView = service.deleteFile(filename1, baseUrl);
		ModelAndViewAssert.assertViewName(actualModelAndView, "file_list");
		ModelAndViewAssert.assertModelAttributeValues(actualModelAndView, model);
	}

	@Test
	void deleteAllFiles() {
		when(repository.count())
				.thenReturn(2L);
		when(repository.deleteAll())
				.thenReturn(1L);

        //in-folder:
		paths = Stream.of(path1);
		when(repository.findAll())
				.thenReturn(paths);
		//in-database:
		filenameStream = Stream.of(filename1);
		when(repository.findAll())
				.thenReturn(filenameStream);

		fileInfoList = List.of(fileInfo1);
		Payload expectedPayload = new Payload(
				"1 of 2 file(s) has been deleted.",
				null,
				fileInfoList
		);
		Map<String, Object> model = new HashMap<>();
		model.put("payload", expectedPayload);

		ModelAndView actualModelAndView = service.deleteAllFiles(baseUrl);
		ModelAndViewAssert.assertViewName(actualModelAndView, "file_list");
		ModelAndViewAssert.assertModelAttributeValues(actualModelAndView, model);
	}

	@Test
	void handleMaxSizeException() {
		Payload expectedPayload = new Payload(
				"The selected file (or one of them) is too large!",
				null,
				fileInfoList
		);
		Map<String, Object> model = new HashMap<>();
		model.put("payload", expectedPayload);

		ModelAndView actualModelAndView = service.handleMaxSizeException(baseUrl);
		ModelAndViewAssert.assertViewName(actualModelAndView, "file_list");
		ModelAndViewAssert.assertModelAttributeValues(actualModelAndView, model);
	}
}
END OF EXAMPLE

=>SPRING BOOT FILE STORAGE WITH THYMELEAF EXAMPLE TESTS
=>SPRING BOOT FILE STORAGE WITH THYMELEAF SERVICE EXAMPLE
