=================================================================================
SPRING BOOT CONFIGURATION
=================================================================================
After building up the Spring hierarchy or after launched the application, pre-configuration is possible.

1. CONFIGURATION CLASS
2. DATA.SQL FILE
3. DEFINE REPOSITORY-DOMAIN CHAINS

=================================================================================
1. CONFIGURATION CLASS
=================================================================================
This class is used to create pre-configuration of the Spring Boot application for development purposes.
Useful when need e.g. records in the database at startup.

The application classes are rendered into graph hierarchy by their package and class dependency injections. The configuration class applies on the package its defined and below in the hierarchy.
Create a configuration class per graph branch if needed.
For an application branch, place the class in the appropriate folder under the /src/main/java folder.
For the whole application, place the class next to the main controller class.
For a test branch, place the class in the appropriate folder under the /src/test/java folder.

The configuration is made of beans. These beans will be injected when Spring arrives at the point when builds the hierarchy or when using the bean makes sense.

The CommandLineRunner bean is used for sending commands to the application only after it fully started up.
As a result, for example in tests when the application not or partially started (unit tests or MockMVC controller tests), this bean will not be alive, will not be invoked.

EXAMPLE FOR CONFIGURATION CLASS:
package packageName;

import org.springframework.boot.*;
import org.springframework.context.annotation.*;

import java.util.*;

@Configuration
public class Config {
	@Bean
	CommandLineRunner commandLineRunner(RepositoryClass repositoryName) {
		return args -> {
			EntityClass entity1 = new EntityClass("Test Data 1", ...);
			EntityClass entity2 = new EntityClass("Test Data 2", ...);
			repositoryName.saveAll(List.of(se1, se2));
		};
	}
}
END OF EXAMPLE

=================================================================================
2. DATA.SQL FILE
=================================================================================
Such file is used for initializing of a database. The file contains basic SQL scripts.
The file will be automatically loaded.

Place a data.sql file in the src/main/resources folder for the application.
Place a data.sql file in the src/test/resources folder for the test.

EXAMPLE FOR DATA.SQL:
INSERT INTO countries (id, name) VALUES (1, 'USA');
INSERT INTO countries (id, name) VALUES (2, 'France');
INSERT INTO countries (id, name) VALUES (3, 'Brazil');
INSERT INTO countries (id, name) VALUES (4, 'Italy');
INSERT INTO countries (id, name) VALUES (5, 'Canada');
END OF EXAMPLE

The accepted .sql filename and-or its location can be changed via utilizing the proper application properties settings. Also, several files can be defined as well. Disabling the loading procedure is possible as well.
The SQL files are loaded before the Hibernate initialization. With this, script-based initialization with other database migration tools such as Flyway and Liquibase becomes possible. It is possible to set Hibernate to initialize first.
Visit the SPRING APPLICATION PROPERTIES page for details.

=================================================================================
3. DEFINE REPOSITORY-DOMAIN CHAINS
=================================================================================
In order to distinguish the domain-repository chains (for example to separate the Data JPA hierarchy from the Data MongoDB), you can use the configuration class as well.

EXAMPLE FOR DEFINITION SIMPLE REPOSITORY-DOMAIN CHAIN IN CONFIGURATION:
@Configuration
@EnableJpaRepositories(basePackages = "com.acme.repositories.jpa")
@EnableMongoRepositories(basePackages = "com.acme.repositories.mongo")
class Configuration {
...
}
END OF EXAMPLE

EXAMPLE FOR DEFINITION OF MONGODB REPOSITORY-DOMAIN CHAIN IN CONFIGURATION WITH SPECIFIC RETURN VALUES:
@Configuration
@EnableMongoRepositories("com.acme..repositories")
class ApplicationConfig extends AbstractMongoClientConfiguration {
    @Override
    protected String getDatabaseName() {
        return "e-store";
    }

    @Override
    protected String getMappingBasePackage() {
        return "com.acme..repositories";
    }
}
END OF EXAMPLE

=>SPRING BOOT
=>SPRING APPLICATION PROPERTIES
=>SPRING BOOT REPOSITORY
