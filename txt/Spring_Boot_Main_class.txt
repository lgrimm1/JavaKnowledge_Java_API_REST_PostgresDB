=================================================================================
SPRING BOOT MAIN CLASS
=================================================================================
Under the src/main/java/<package> folder, the Main.java can be found or must be placed. Of course, can have different name (advised to rename it in order to resemble the project name or purpose) in which case all Main references should be re-written to that name, please see below.
This class contains the web application launcher, and optionally, calls on-time initialization methods from the Business layer.
The @SpringBootApplication annotation marks that this is the launcher class. This annotation summarizes the next annotations, courtesy of Spring Boot:
    - @Configuration
    - @EnableAutoConfiguration
    - @EnableWebMvc
    - @ComponentScan

The @ComponentScan part:
    - instructs Spring Boot that find and instantiate all classes marked with @Bean or @Component or @Repository or @Service or @Controller or @RestController annotation in a backward chain (lowest level first)
    - in case the @Autowired annotation is used for class dependency injection (see later), the dependent class will be instantiated as singleton class
    - in case the @Scope(value = "prototype") annotation is used for class dependency injection (see later), the dependent class will not be instantiated as singleton class

The @EnableJpaRepositories annotation configures JPA, also instructs the Spring that the repository classes can be managed by Spring Data JPA if the repository is an interface and extends JpaRepository.
In case of in-memory storage (no database) solution, this annotation can be left out.

Optional parameters of @EnableJpaRepositories annotation:
    - escapeCharacter = 'character' (defines custom escape character e.g. in JSON Strings)
    - value = "Package[.Package...].RepositoryClassName" (marks the exact class path of the repository with which the JPA can build-up)
It is possible to use the same annotation with different parameters on different class paths. Be aware of having duplicated annotation use (when there would be more than one enabled repository alive on the given class level).
In case the value is used, JPA will build up the referred repository from the class of the annotation and below in the classpath graph.

At startup, the JVM will initialize Spring which will run through the dependency injection chain, creates objects from the bottom to up. In case the Main class needs to access resource from lower levels, use the @Resource annotation with a field which represents the needed resource. This technique is typical at once-time initialization of the application.

The Main class could contain fields, method etc. When the flow reaches the run(), all controllers will be started up and stay up until the application receives a stop signal.
Because all controllers are practically independent threads, any code written after the run() method will be executed on the original thread parallel.

The Main class should wear a class name which resembles the name of the application. The main() method however, must not be renamed.

EXAMPLE FOR MAIN CLASS (JPA):
package packageName;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.data.jpa.repository.config.*;

@SpringBootApplication
@EnableJpaRepositories
public class Main {
	public static void main(String[] args) {
		SpringApplication.run(Main.class, args);
	}
}
END OF EXAMPLE

EXAMPLE FOR MAIN CLASS (JPA, INITIALIZATION, RENAMED MAIN CLASS):
package packageName;

import javax.annotation.Resource;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.data.jpa.repository.config.*;
import org.springframework.boot.CommandLineRunner;

@SpringBootApplication
@EnableJpaRepositories
public class ApplicationName implements CommandLineRunner {

	@Autowired
	ServiceClassName serviceName;

	public static void main(String[] args) {
		SpringApplication.run(ApplicationName.class, args);
	}

	@Override
	public void run(String... arg) throws Exception {
		serviceName.initMethodName();
	}
}
END OF EXAMPLE

The application context means what objects and variables are created at a certain point of the program flow.
In case of Spring Boot, the context means the class and object structure existing when the flow reaches the SpringApplication.run(). It is possible to catch the context by storing the returned value of this method.
In Spring terminology all objects are beans (components).

EXAMPLE FOR MAIN CLASS (CATCHING CONTEXT, JPA):
package packageName;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.data.jpa.repository.config.*;
import org.springframework.context.*;

@SpringBootApplication
@EnableJpaRepositories
public class Main {
	public static void main(String[] args) {
		ConfigurableApplicationContext context = SpringApplication.run(Main.class, args); //catch the web app context
		ClassName variable = context.getBean(ClassName.class); //addresses the object created from ClassName class at web app startup
	}
}
END OF EXAMPLE

In case the class dependency injection follows Spring best practices, any getBean() will return the original object created at web app launch.
In case a class is marked with @Scope(value = "prototype") annotation as well, Spring will not create singleton from that class but keep it as prototype.
That is, when the web app is launched, an object will be created from it normally, but for every getBean() method, other instances will be made from the referred class.

=>SPRING BOOT
=>SPRING BOOT TESTS;1. MAIN CLASS TEST
