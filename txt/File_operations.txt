=================================================================================
FILE OPERATIONS
=================================================================================
Separators in a file or folder path are the same within an OS, but are different by operating systems.
In order to make a path OS independent, use the File.separator constant instead of \\ or /.
In case of using file/folder list, File.pathSeparator constant will give OS independent solution (e.g. on Windows ; separates two paths in a list).

1. INFORMATION
2. CREATE AND DELETE
3. RENAME AND MOVE
4. READ
5. WRITE
6. SCANNER
7. LIST FILES AND FOLDERS
8. READ AND WRITE INPUTSTREAMS

=================================================================================
1. INFORMATION
=================================================================================
EXAMPLE FOR GETTING INFORMATION OF FILE:
import java.io.File;
import java.nio.file.*;
...
String path = ...; //can be relative, absolute, or even just a filename in which case the application folder and JAVAPATH will be checked
String extension = ...;
File f = new File(path);
boolean success = false;
long fileSize;
String fileName, fileExtension, fileNameWithExtension, filePath, fullName, fileAbsolutePath, fileDriver;
int pos;
try {
	success = f.exists();
	fileSize = f.length();
	success = f.isFile();
	success = f.isDirectory();
	fileNameWithExtension = f.getName(); //without path
	if (fileNameWithExtension.endsWith(extension)) {...}
	pos = fileNameWithExtension.lastIndexOf(".");
	if (pos > -1) {
	    fileName = fileNameWithExtension.substring(0, pos);
	    fileExtension = fileNameWithExtension.substring(pos);
	}
	else {
	    fileName = fileNameWithExtension;
	    fileExtension = ""; //no extension
	}
	filePath = f.getParent(); //without the ending \ sign; in case of relative path, will return relative path
	fullName = f.getPath(); //filename with file path, equals with f.getParent() + File.separator + f.getName()
	fileAbsolutePath = filePath.getCanonicalPath(); //without the ending \ sign; returns absolute path
	fileDriver = ((fileAbsolutePath.length() > 1) && (fileAbsolutePath.charAt(1) == ':')) ? fileAbsolutePath.substring(0, 2) : ""; //letter plus the : sign, or ""
	Path p1 = Path.of(f);
	Path p2 = f.toPath();
	String name = p1.getFileName().toString();
	String directory = p1.getParent().toString();
}
catch (Exception e) {
	...
}
END OF EXAMPLE

=================================================================================
2. CREATE AND DELETE
=================================================================================
EXAMPLE FOR CREATING AND DELETING FILE (FILE CLASS):
import java.io.File;
...
String path = ...;
File f = new File(path); //path: filename and extension with optional path
File d = new File(path); //path: folder name with optional path without ending \
boolean success = false;
try {
	success = f.createNewFile();
	success = f.deleteFile();
	success = d.mkdir();
	success = d.mkdirs(); //creates it with creating all needed new folders above it
	success = d.deleteFile();
}
catch (Exception e) {
	...
}
END OF EXAMPLE

EXAMPLE FOR CREATING DIRECTORY (PATHS, PATH AND FILES CLASS):
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.Files;
import java.io.IOException;
...
Path path = Paths.get("./upload"); //the directory will open from project root, on the same level with /scr and /target
try {
    Files.createDirectories(root);
}
catch (IOException e) {
    throw new RuntimeException("Could not initialize folder for upload!");
}
END OF EXAMPLE

=================================================================================
3. RENAME AND MOVE
=================================================================================
EXAMPLE FOR RENAMING AND MOVING FILE:
import java.io.File;
...
String oldPathAndName = ...;
String newPathAndName = ...;
File oldFile = new File(oldPathAndName);
File newFile = new File(newPathAndName);
boolean success = false;
try {
	success = oldFile.renameTo(newFile);
}
catch (Exception e) {
	...
}
END OF EXAMPLE

=================================================================================
4. READ
=================================================================================
EXAMPLE FOR READING FILE (VIA FILEREADER):
import java.io.File;
import java.io.FileReader;
...
String path = ...;
File file = new File(path);
char[] content;

boolean success = false;
try (FileReader fileReader = new FileReader(path)) { //or:
try (FileReader fileReader = new FileReader(file)) {
    content = new char[(int) file.length()];
	success = fileReader.read(content); //the parameter is the target
}
catch (Exception e) {
	...
}
END OF EXAMPLE

EXAMPLE FOR READING FILE (VIA FILES):
import java.io.File;
import java.nio.file.*;
import java.util.*;
...
String path = ...;
File file = new File(path);
List<String> content;
byte[] byteContent;

boolean success = false;
try {
	content = Files.readAllLines(file.toPath()); //or:
	byteContent = Files.readAllBytes(file.toPath);
	success = true;
}
catch (Exception e) {
	...
}
END OF EXAMPLE

=================================================================================
5. WRITE
=================================================================================
EXAMPLE FOR WRITING FILE (VIA FILEWRITER):
import java.io.File;
import java.io.FileWriter;
...
int asciiContent = ...;
char[] caContent = ...;
String strContent = ...;
int startIndex = ..., length = ...;
String path = ...;
File file = new File(path);
boolean append = true;

boolean success = false;
try (FileWriter fileWriter = new FileWriter(path)) { //or:
try (FileWriter fileWriter = new FileWriter(file)) {
	success = fileWriter.write(asciiContent); //a character based upon the ascii code, for 1st overwrites the file then appends it; or:
	success = fileWriter.write(caContent); //for 1st overwrites the file then appends; or:
	success = fileWriter.write(caContent, append); //the boolean marks appending; or:
	success = fileWriter.write(caContent, startIndex, length); //extracts from caContent, for 1st overwrites the file then appends; or:
	success = fileWriter.write(strContent); //for 1st overwrites the file then appends; or:
	success = fileWriter.write(strContent, append); //the boolean marks appending; or:
	success = fileWriter.write(strContent, startIndex, length); //extracts from strContent, for 1st overwrites the file then appends
}
catch (Exception e) {
	...
}
END OF EXAMPLE

EXAMPLE FOR WRITING FILE (VIA FILES):
import java.io.File;
import java.nio.file.*;
import java.util.*;
...
String path = ...;
File file = new File(path);
List<String> content = ...;
byte[] byteContent = ...;

boolean success = false;
try {
	Files.write(file.toPath(), content, StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING); //overwrites, or:
	Files.write(file.toPath(), content, StandardOpenOption.CREATE, StandardOpenOption.APPEND); //appends, or:
	Files.write(file.toPath(), byteContent, StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING); //overwrites, or:
	Files.write(file.toPath(), byteContent, StandardOpenOption.CREATE, StandardOpenOption.APPEND); //appends
	success = true;
}
catch (Exception e) {
	...
}
END OF EXAMPLE

=================================================================================
6. SCANNER
=================================================================================
EXAMPLE FOR USING SCANNER FOR READING FILE:
import java.util.Scanner;
import java.io.File;
...
File data = new File(...);
String line;
try (Scanner scanner = new Scanner(data)) {
	while (scanner.hasNextLine()) {
		line = scanner.nextLine();
		//processing
	}
}
catch (Exception e) {
	...
}
END OF EXAMPLE

=================================================================================
7. LIST FILES AND FOLDERS
=================================================================================
EXAMPLE FOR LISTING FILES AND FOLDERS:
import java.io.File;
import java.util.stream.Stream;
...
String path = ...; //folder path without ending \
File directory = new File(path);
String[] list1;
File[] list2;
try {
	list1 = directory.list();
	list2 = directory.listFiles();
}
catch (Exception e) {
	...
}
List<File> files = Arrays.toStream(list2)
        .filter(File::isFile)
        .toList();
List<File> directories = Arrays.toStream(list2)
        .filter(File::isDirectory)
        .toList();
END OF EXAMPLE

=================================================================================
8. READ AND WRITE INPUTSTREAMS
=================================================================================
EXAMPLE FOR USING INPUTSTREAMS (READING, WRITING FILES):
import java.io.File;
import java.io.InputStream;
import java.io.OutputStream;
...
byte[] data;
String sourcePath = ...;
String destinationPath = ...;
File sourceFile = new File(sourcePath);
File destinationFile = new File(destinationPath);
try (
        FileInputStream fileInputStream = new FileInputStream(sourcePath);
        FileOutputStream fileOutputStream = new FileOutputStream(destinationPath);
) { //or:
try (
        FileInputStream fileInputStream = new FileInputStream(sourceFile);
        FileOutputStream fileOutputStream = new FileOutputStream(destinationFile);
) {
	data = new byte[(int) sourceFile.length()]; //in case file size < 2 GB or else use BigFile class
	fileInputStream.read(data);
	fileOutputStream.write(data);
}
catch (Exception e) {
	...
}
END OF EXAMPLE

=>STATEMENTS
=>ITERATION
=>EXCEPTIONS
=>SCANNER
=>ARRAY
=>IMPORT
=>FILEREADER
=>FILEWRITER
=>INPUTSTREAM
=>OUTPUTSTREAM
=>FILES
