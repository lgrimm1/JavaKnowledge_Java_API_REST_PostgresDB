=================================================================================
ARRAYLIST
=================================================================================
1. ARRAYLIST IN GENERAL, METHODS
2. ARRAYLIST SORTING
3. ARRAYLIST CONVERTING TO 1D ARRAY AND BACK
4. ARRAYLIST CONVERTING TO HASHMAP AND BACK

=>VARIABLES
=>PRIMITIVE DATA TYPES
=>OBJECTS
=>ITERATION
=>LIST
=>LINKEDLIST
=>COLLECTION
=>VECTOR
=>ARRAY
=>COMPARATOR
=>ITERATOR
=>LISTITERATOR
=>LAMBDA EXPRESSIONS
=>HASHMAP
=>STREAM
=>MATRIX

=================================================================================
1. ARRAYLIST IN GENERAL, METHODS
=================================================================================
1.1. IN GENERAL
1.2. METHODS
1.3. LAMBDA SOLUTIONS
1.4. ITERATOR

1.1. IN GENERAL
---------------------------------------------------------------------------------
Implements the List interface.
Dynamic 1D array of objects of the same type.
The 1st element has the 0th index.

Differences between ArrayList and LinkedList:
    a. ArrayList implements List, LinkedList implements List, Queue and Deque
    b. ArrayList stores a simple value, LinkedList stores the element, previous and next addresses
    c. ArrayList provides a resizeable array, LinkedList provides a doubly-linked list
    d. For inserting element, ArrayList shifts all elements after, LinkedList modifies prev and next fields in the surrounding nodes
    e. To access data, in ArrayList elements can be accessed randomly, in LinkedList sequentially

Differences between Vector and ArrayList:
    a. in case a thread opens the Vector for writing, the Vector will be blocked for other threads, for them throws an exception (ArrayList is safe for multi-tread access)
    b. ArrayList uses Collection.synchronizedList() to synchronize accessing methods (Vector blocks instead)
Based upon these, usage of ArrayList is preferred for thread-safety, and it is more efficient.

EXAMPLE FOR MAKING SYNCHRONIZED (THREAD-SAFE) ARRAYLIST:
ArrayList<type> al = new ArrayList<>();
ArrayList<type> alSync = Collections.synchronizedList(al); //access is thread-safe on alSync
END OF EXAMPLE

1.2. METHODS
---------------------------------------------------------------------------------
In case a Collection is passed to the particular method, throws an exception if the Collection is null or not compatible.
In case an index is passed to the method, throws an exception if the index is out of bounds.

import java.util.ArrayList;
...
boolean b;
int index = ...;
int size, fromIndex = ..., toIndex = ...;
elementType element = ...;
collectionType collection = ...; //some Collection type, e.g. an other ArrayList
ArrayList<elementType> al = new ArrayList<>(); //allocate memory create through constructor
ArrayList<elementType> al = new ArrayList<>(Arrays.asList(value1, value2, ...)); //allocate memory create through constructor with fix elements (immutable List)
List<elementType> al = new ArrayList<>(); //allocate memory create through List interface and ArrayList constructor
size = al.size(); //number of elements
b = al.isEmpty(); //returns true if empty
b = al.add(element); //append; returns true if success
al.add(index, element); //insert at index position
b = al.addAll(collection); //append a series of data; returns true if success
b = al.addAll(index, collection); //insert a series of data; returns true if success
element = al.set(index, element); //change element at index; returns the overwritten element
element = al.remove(index); //delete element at index; returns the removed element
b = al.remove(element); //find and delete element; returns true if success
b = al.removeAll(collection); //delete all elements from the ArrayList contained by collection; returns true if success
al.clear(); //delete all elements
ArrayList<elementType> al2 = al.clone(); //creates a copy of data and its allocation parameters like memory size
element = al.get(index); //read the element at index
b = al.contains(element); //returns true if element exists in al
index = al.indexOf(element); //returns the index of the 1st element from beginning, or -1 if not found
index = al.lastIndexOf(element); //returns the index of the 1st element from ending, or -1 if not found
ArrayList<elementType> al2 = al.subList(fromIndex, toIndex); //extracts sub-list
elementType[] array = al.toArray(); //convert itself to an array with the same elementType
al.toArray(array); //convert itself into the passed array with the same elementType
String s = al.toString(); //convert itself into String, output will be like [1,2,3]
al.ensureCapacity(size); //increase memory allocation if necessary to cover the minimum element number
al.trimToSize(); //set memory allocation to the actual needed size
b = al.retainAll(collection); //synchronizing by keeping what the collection has, deleting what the collection does not have, returns true if deleting was applied
b = al.containsAll(collection); //returns true if all elements of the collection was found in the ArrayList (means is the collection a sub-set of the ArrayList)

1.3. LAMBDA SOLUTIONS
---------------------------------------------------------------------------------
import java.util.ArrayList;
...
ArrayList<elementType> al = new ArrayList<>();
...
al.removeIf(lambdaExpression); //remove by filter
al.forEach(lambdaExpression); //iterate through all elements and execute lambdaExpression

EXAMPLE FOR LAMBDAS:
e -> (e % 2) == 0
e -> e.contains("abc")
(e) -> {
    e = e * 10;
}
END OF EXAMPLE

1.4. ITERATOR
---------------------------------------------------------------------------------
import java.util.ArrayList;
import java.util.Iterator;
...
ArrayList<elementType> al = new ArrayList<>();
elementType element;
...
Iterator<elementType> iter = al.iterator();
while (iter.hasNext()) {
    element = iter.next();
    //processing the element
}

The ListIterator class would have the same processing structure however it can move backward as well and can replace the last read element.

=================================================================================
2. ARRAYLIST SORTING
=================================================================================
2.1. SORT, COLLECTIONS
2.2. SORT, COMPARATOR

2.1. SORT, COLLECTIONS
---------------------------------------------------------------------------------
import java.util.ArrayList;
import java.util.Collections;
...
ArrayList<elementType> ial = new ArrayList<>();
...
Collections.sort(ial); //ascending order
Collections.sort(ial, Collections.reverseOrder()); //descending order

2.2. SORT, COMPARATOR
---------------------------------------------------------------------------------
Without declaring a Comparator, uses basic comparing technics.
By declaring a Comparator, custom and complex comparing technics can be introduced.

EXAMPLE FOR BASIC COMPARING TECHNICS:
import java.util.ArrayList;
import java.util.Comparator;
...
ArrayList<elementType> ial = new ArrayList<>();
...
ial.sort(Comparator.naturalOrder()); //ascending order
ial.sort(Comparator.reverseOrder()); //descending order
ial.sort(Comparator.nullsFirst()); //ascending order, zeros first; only for number-based elementTypes
ial.sort(Comparator.nullsLast()); //ascending order, zeros last; only for number-based elementTypes
END OF EXAMPLE

=================================================================================
3. ARRAYLIST CONVERTING TO 1D ARRAY AND BACK
=================================================================================
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
...
ArrayList<String> sal = new ArrayList<>();
...
int length = sal.size();
String[] sa = new String[length];
//in case element type is not primitive
sal.toArray(sa);
//or:
for (int index = 0; index < length; index++) {
    sa[index] = sal.get(index);
}
...
List sal2 = new ArrayList<>(Arrays.asList(sa));
//or:
ArrayList<String> sal2 = new ArrayList<>();
for (String s : sa) {
	sal2.add(s);
}

=================================================================================
4. ARRAYLIST CONVERTING TO HASHMAP AND BACK
=================================================================================
import java.util.Map;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.List;
import java.util.stream;
import java.util.stream.Collectors;
...
List<Integer> keyList = new ArrayList<>();
List<String> valueList = new ArrayList<>();
...
int lengthKeyList = keyList.size();
if (lengthKeyList == valueList.size()) {
    Map<Integer, String> map = new HashMap<>();
    for (int index = 0; index < lengthKeyList; index++) {
        map.put(keyList.get(index), valueList.get(index));
    }
}
else {
    //unable to pair all keys and values
}
...
List<Integer> keyList2 = new ArrayList<>(map.keySet());
List<String> valueList2 = new ArrayList<>(map.values());
//or:
List<Integer> keyList2 = map.keySet().stream().collect(Collectors.toList());
List<String> valueList2 = map.values().stream().collect(Collectors.toList());
