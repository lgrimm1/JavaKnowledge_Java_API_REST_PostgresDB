Notes
------------------------
Colors:
    a. Black #000000 ()
    b. DarkSlateGray #2F4F4F (general background, button text)
    c. DarkGray #A9A9A9 (fieldset border, table border, Header4)
    d. LightGray #D3D3D3 (text, Header1-3, button background)

Views:
    a. root: start page
    b. list: search result page
    c. page: show a page
    d. management: source side
    e. source: for editing

"Root" view:
    if "search" field is null or blank, search button results full list

"List" view:
    a. first row is automatically selected
    b. one title can be selected

"Page" view:
    a. all references are collected into a side box on the right side
    b. all headers are collected to the top rows of content
    c. all references are collected to the last rows of content
    d. the content is shown in a frame

"Management" view:
    a. first row is automatically selected
    b. more titles can be selected
    c. if more titles are selected, Edit will reload "Management" with error message
    d. the confirm checkbox applies for Delete and ImportTxt

"Source" view:
    the "Save" flow on endpoint depends on new or edit mode

Not needed test case, kept as template:
/*
	@Test
	void getListOfFiles() {
		File folder1 = Mockito.mock(File.class);
		when(folder1.isFile())
				.thenReturn(false);
		when(folder1.getName())
				.thenReturn("folder 1");
		File folder2 = Mockito.mock(File.class);
		when(folder2.isFile())
				.thenReturn(false);
		when(folder2.getName())
				.thenReturn("folder 2");
		File file1 = Mockito.mock(File.class);
		when(file1.isFile())
				.thenReturn(true);
		when(file1.getName())
				.thenReturn("file 1");
		File file2 = Mockito.mock(File.class);
		when(file2.isFile())
				.thenReturn(true);
		when(file2.getName())
				.thenReturn("file 2.xyz");
		File file3 = Mockito.mock(File.class);
		when(file3.isFile())
				.thenReturn(true);
		when(file3.getName())
				.thenReturn("file 3.txt");
		File file4 = Mockito.mock(File.class);
		when(file4.isFile())
				.thenReturn(true);
		when(file4.getName())
				.thenReturn("file 4.txt");
		File file5 = Mockito.mock(File.class);

		File sourceFolder = Mockito.mock(File.class);

		when(sourceFolder.listFiles())
				.thenReturn(null);
		Assertions.assertTrue(fileOperations.getListOfFiles(sourceFolder, ".txt").isEmpty());

		when(sourceFolder.listFiles())
				.thenReturn(new File[]{folder1, folder2, file1, file2, file3, file4});
		Assertions.assertIterableEquals(List.of(file3, file4), fileOperations.getListOfFiles(sourceFolder, ".txt"));
		Assertions.assertIterableEquals(List.of(file1, file2, file3, file4), fileOperations.getListOfFiles(sourceFolder, ""));
	}
*/
