=================================================================================
SPRING BOOT THYMELEAF
=================================================================================
1. GENERALLY
2. SETTING UP
3. THYMELEAF TEMPLATES
4. HTML STANDARD TAG PARAMETERS
5. THYMELEAF TEMPLATE TAG PARAMETERS
6. THYMELEAF TEMPLATE FRAGMENTATION
7. THYMELEAF TEMPLATE FORMS
8. EXAMPLES

=================================================================================
1. GENERALLY
=================================================================================
The Spring Boot ThymeLeaf is part of the Spring framework which enables using automated templates of frontend for backend communication in model&view or object/model&view mode.
A template is an JSON/HTML/XML/etc. page into which the answer is injected via defining HTML variables and e.g. Javascript codes.

On frontend side, different file formats can be used, e.g. HTML or PHP.
The frontend communicates with the backend through the Communication layer of the backend.
Basically, the frontend sends requests to the backend on which the backend sends answers like a normal website would do.
The answers are data which can be rendered into HTML, PHP etc. pages.
Above the pages, frontend scripts can form an other layer with which data manipulation, visual elements etc. can be managed, also the data sent back to the server.

=================================================================================
2. SETTING UP
=================================================================================
In order to address ThymeLeaf, the following tags should be inserted into pom.xml.
After these modifications, type "mvn compile" to make Maven to find and install all what needed.

Spring Boot ThymeLeaf has two main versions:
    - optimized for working with Spring
    - optimized for working with Spring Boot

Spring Boot ThymeLeaf is an extension of Spring Boot. Therefore, before adding the dependency, make sure that all Spring Boot dependencies already are added.

EXAMPLE FOR ADDING THYMELEAF DEPENDENCY:
<!-- (it is possible to define version tag with the dependency) -->
<!-- (in case of no version tag, the best compatible version read from the parent tag, will be used by Maven) -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>
END OF EXAMPLE

Alternatively, use Spring Initializr to generate a new empty project with added ThymeLeaf.

=================================================================================
3. THYMELEAF TEMPLATES
=================================================================================
The server answer (if there is any) sends message to the frontend via filling out a template and sending that template to caller client (e.g. browser).
For a template, HTML, JSON etc. files can be created.
The templates are placed under the src/main/resources/templates folder.
In case of external CSS style, the .css file must be placed into the src/main/resources/static folder. For more, visit the CSS page.
A template can be created in design-time and in run-time as well, latter before reaching it via GET, POST etc. queries.
The <html> tag must contain the xmlns:th="http://www.thymeleaf.org" parameter in order to let the interpreters understand the ThymeLeaf dialect.

EXAMPLE FOR A GENERAL THYMELEAF HTML TEMPLATE:
<!DOCTYPE HTML>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Title</title>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
</head>
<body>
<!-- code -->
<script>
    <!-- script codes -->
</script>
</body>
</html>
END OF EXAMPLE

In the template, in case the ThymeLeaf is referenced in the <html> tag, within almost all HTML tags the th:... parameters can be used (th refers to ThymeLeaf). Such parameters are for handling data accessed through Spring Boot via ThymeLeaf. In case no such data is accessed in a tag, th parameters should be avoided.
ThymeLeaf parameters can be defined in two variants of HTML tags:
    - opened tag: <tag_name parameters />
    - closed tag: <tag_name parameters>...</tag_name>
Please note that opened tags are not supported by all browsers.

ThymeLeaf offers a <th:block> closed tag which serves literally as a block tag without any special meaning. Useful when other tags should be rendered together as nested tags and <span>, <div> or other HTML block tags do not fit.

=================================================================================
4. HTML STANDARD TAG PARAMETERS
=================================================================================
In a tag, depending on the tag itself, pre-defined tag parameters can be defined. Most of them are optional. In case a parameter is required but not given, the interpreter (the browser) will skip the tag along with logging an error.

The tag parameters have two versions:
    - parameterized (a value must be given along)
    - not parameterized (only giving the parameter is needed)

The general formula for giving parameter value follows the HTML standards:
    - for character and text value: parameter_name="'value'"
    - other types: parameter_name="value"
    - for referring script methods: parameter_name="method_name(argument)"

The id= parameter defines a text by which the tag can be identified (e.g. id="tag_identifier").
The for= parameter marks that by its name, the control is for which other control (e.g. for="control_identifier"). Mainly used with label tags which will be visible only when the marked control is visible and transfers the onclick event to the marked control (easier aimed control).
For controls (inputs), the on...= parameters (e.g. onclick=, onload=) are used for capturing event-driven actions (e.g. onclick="script_method(this)").
For size-like parameters (e.g. width=, height=), px, % and other units are accepted (e.g. width="80%" height="50px"). Please note, there is no space between the amount and the unit.
The class= parameter defines CSS class name (e.g. class="h4_style"), visit the CSS page for details.
The style= parameter can hold local CSS codes (e.g. style="width=80%; height=50px"); visit the CSS page for details.

=================================================================================
5. THYMELEAF TEMPLATE TAG PARAMETERS
=================================================================================
Almost any parametrized tag parameter has ThymeLeaf counterpart. Such parameter names are equal with the standard names but with a th: marker directly before the parameter name. By using a th: parameter, HTML attributes can be addressed which are sent by and to the backend. In case a tag needs ThymeLeaf parameter(s), use the th: version, in case not, use standard name.

The most used th: tag parameters are:
    - th:text= (a text)
    - th:utext= (a text interpreted as HTML code)
    - th:each= (iteration through a collection)
    - th:if= (if the condition is true, does a thing)
    - th:unless= (if the condition is false, does a thing)
    - th:switch= (multiple condition for enumerable-type attribute)
    - th:case= (given variant for switched attribute)

Any variable can be sent in a template, ThymeLeaf recognizes all wrapper classes and theoretically all Collection types. It also can handle classes with subclasses. In order to send a primitive type to a template, convert it to wrapper class. Enums can be used only with tags which are designed to handle limited values e.g. radio input (see later), otherwise use String instead.
A variable carrying data in the template is called HTML attribute. Its name can be different from Java variable name, the connection is made by the Model or ModelAndView classes in Spring Boot, see later.
Attribute names are case-sensitive.
In case the type of Java variable is a class with sub-classes (e.g. a whole entity is sent as HTML attribute), inside that, attribute fields can be accessed by their Java names (case-sensitive).

A template filled with data is called a view in Java.
After preparation, the controller will create a static page under the /static folder and will send a view referring to that static page to the frontend.

The total of data is called model in Java.
Attributes can be added to the model via utilizing Model or ModelAndView classes:
    - model.addAttribute("attribute_name", object);
    - modelAndView.addObject("attribute_name", object);

An attribute can be accessed:
    - th:object="${attribute_name}"
A field can be accessed (e.g. from within a form or a multiple-value tag with th:each= parameter):
    - th:field="${attribute_name.fieldName}"
    - th:field="*{fieldName}"
General access:
    - th:text="${attribute_name}"
    - th:text="${attribute_name.fieldName}"
    - th:text="*{fieldName}"
Please note, th:text= and th:utext= are for printing out data while th:object= and th:field= are for printing out and-or returning data (see forms later).

EXAMPLE FOR A THYMELEAF TEMPLATE (JAVA SIDE, VARIABLES):
//single variables
String firstName;
Integer retirementAge;
String htmlCode;

//subclasses-in-a-class type
enum GenderType {
    MALE, FEMALE
}
class Person implements Serializable {
    String lastName;
    Integer age;
    String htmlCode;
    Character gender;
    GenderType genderType;
    //constructors, getters-setters
}

//subclasses-in-a-class variable
Person p = new Person(...);

//collection variable
List<Person> personList = ...;

//add data by variables, literals or objects, to a Model or ModelAndView
model.addAttribute("first_name", firstName);
model.addAttribute("retirement_age", retirementAge);
model.addAttribute("html_code", htmlCode);
model.addAttribute("person", person);
model.addAttribute("person_list", personList);
END OF EXAMPLE

EXAMPLE FOR A THYMELEAF TEMPLATE (HTML SIDE, ATTRIBUTES):
<!DOCTYPE HTML>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Title</title>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
</head>
<body>
<!-- single attributes: -->
<p th:text="'Hello, ' + ${name} + '!'" />
<span th:text="'Retirement age: ' + ${retirement_age}" />
<div th:utext="${html_code}" />
<!-- subclasses-in-a-class attribute: -->
<p th:text="'Name: ' + ${person.lastName}" />
<p th:text="'Age: ' + ${person.age}" />
<div th:utext="${person.htmlCode}" />
<table>
    <tr>
        <th>NAME</th><th>AGE</th><th>RETIRED</th>
    </tr>
    <!-- collection attribute: -->
    <tr th:each="person: ${person_list}">
        <td th:text="${person.name}"/>
        <td th:text="${person.age}"/>
        <div th:utext="${person.htmlCode}" />
        <!-- conditional attribute: -->
        <td>
            <span th:if="${person.age} >= ${retirement_age}" th:text="'YES'"/>
            <span th:unless="${person.age} >= ${retirement_age}" th:text="'NO'"/>
        </td>
        <!-- switched attribute: -->
        <td th:switch="${person.gender}">
            <span th:case="'M'" th:text="'male'"/>
            <span th:case="'F'" th:text="'female'"/>
        </td>
        <td th:switch="${person.genderType}">
            <span th:case="MALE" th:text="'male'"/>
            <span th:case="FEMALE" th:text="'female'"/>
        </td>
    </tr>
</table>
</body>
</html>
END OF EXAMPLE

=================================================================================
6. THYMELEAF TEMPLATE FRAGMENTATION
=================================================================================
It is possible to design a template from parts and divide it into smaller (more handleable) pieces. This is called fragmentation.
The fragments can be re-used several times, the template system becomes modular.
For details, visit the SPRING BOOT THYMELEAF TEMPLATE FRAGMENTATION page.

=================================================================================
7. THYMELEAF TEMPLATE FORMS
=================================================================================
7.1. FORM TAG
7.2. INPUTS

7.1. FORM TAG
---------------------------------------------------------------------------------
In case the value(s) are needed to be sent back to backend, must use form(s) on the page, otherwise the template serves as an output page.
In order to create and use forms, 3 main steps are needed:
    - a request which invokes a template which carries the form on server side
    - the activated form on client side, sends a request to server with filled data at submit
    - a POST request handler on server side
When the first GET, POST etc. request arrives in, the backend prepares the form template and sends it back to the client. The form at Submit sends a defined request to the backend with the filled data which is processed there.

In the template the <form> tag header can contain these parameters:
    - th:action="@{/endpoint_name}": on this endpoint the submit request will be sent
    - th:object="${object-attribute_name}": this attribute is received and sent by the form, contains data presented with the form
    - autocomplete="on_or_off": for all inputs, forces the browser to suggest complete values based upon a few typed characters
    - method="post": defines what request the form must send when the user submits
    - novalidate: no input value validation will happen when submitting (validation on server side)
    - id="form_name": unique name of the form with which actions etc. can refer to it
    - enctype="multipart/form-data": defines that to the submitted post Multipart will be attached, required for file uploading

7.2. INPUTS
---------------------------------------------------------------------------------
In the template all data which should be sent back, are rendered into input tags and similar as parameter.
HTML parameters depend on the tag and the input type.
If the input tag contains object or field data:
    - type="text", type="number" or type="checkbox" etc.: the input-type
    - th:object="${attribute_name}" or th:field="${attribute_name.fieldName}" or th:field="*{fieldName}": the contained data
    - value="default_value" or ="'default_value'": fill the input with default value, Reset renders back to this; should not be defined if the form is bound via ThymeLeaf (it knows the defaults)
If the input tag is button-like:
    - type="submit", type="reset" or type="button": the type of the button-like control (the latter generally used for calling a script method)
    - value="caption on button": the caption of the button-like control, if not defined, uses local default e.g. Submit, Reset
    - formaction="/endpoint": define targeted endpoint for submit-type input
    - formmethod="post": define targeted query type for submit-type input
    - onclick="script_name" or onclick="alert('message_text')": took action in case of click, or shows a dialog, only for button-type input
The name= parameter of an input tag, in case no th:object or :field is rendered to the input, defines a new HTML attribute name which will be posted upon submit. In controller endpoint this attribute will be accessible via the @RequestParam("html_attribute_name") annotation; required explicitly when multipart (file or files) is submitted, see at description of file input below.

In the template the next types can be used for input, data is defined within the opening tag.

||INPUT|INPUT|INPUT|INPUT||
||button|checkbox|color|date||
||datetime-local|email|file|hidden||
||image|month|number|password||
||radio|range|reset|search||
||submit|tel|text|time||
||url|week|-|-||

In the template the next types can be used for input, data is defined between the opening and closing tags.

||INPUT|INPUT||
||select|textarea||

Button:
    - a button appears
    - pressing it means invoking a script method
    - with the above parameters more buttons can be used in a <form>
    - the value= parameters defines the button caption

Checkbox:
    - the checked parameter pre-selects
    - usually used together with <label> tag which produces the shown text (consider id= and for= parameters)

Color:
    - the browser shows a color brick button, which will launch a color picker
    - the value= parameter sets default color, format is #xxxxxx where RGB codes are stored in 2-letter hexa numbers

Date:
    - the browser shows a divided input field for date with a date picker icon
    - format in the background is YYYY-MM-DD
    - shown format follows local settings

Datetime-local:
    - the browser shows a divided input field for date and time, with a date picker icon
    - format in the background is YYYY-MM-DD
    - shown format follows local settings

File:
    - a localized Browse button appears, next to it the chosen file name or number of files
    - the multiple parameter allows the user to enter more than one value
    - the webkitdirectory parameter instructs the interpreter to launch a directory dialog instead of file dialog; there can be some internet browsers which do not recognize this parameter
    - the accept= parameter contains allowed file types separated by comma (will not provide thorough check)
    - the value= parameter contains empty String at the beginning, when file(s) is-are selected, will contain the first file path and name as C:\fakepath\filename or similar for security reasons (exchanged with th:field= or :object=)
    - the HTMLInputElement.files property will contain all selected files, as C:\fakepath\filename or similar (exchanged with th:field= or :object=); this property is a list of files.
    - a file element of the list contains filename, last modification datetime and date, size, MIME-type
    - the capture= parameter is a String identifies which camera channel should be used (user-facing or main) for capturing video or image (depending on accept= type); if not present, file mode is activated
    - the user= parameter defines that the user-facing camera and/or microphone should be used (used together with capture=)
    - the environment= parameter specifies that the outward-facing camera and/or microphone should be used (if missing, will decide on its own; used together with capture=)
    - returns either a file name array or a text in which the file names are separated by commas
    - uploaded file content will be attached to the posted data as Multipart, works only when enctype="multipart/form-data" parameter is defined in the <form> tag
    - the name= parameter is required for file uploading (defines a new HTML attribute name, rendered to the Multipart itself)
    - the th:object or :field can be used for the file names and descriptive data but not for the file content
    - at backend side, the receiver endpoint signature must contain a @RequestParam("html_attribute_name") annotation and its marked argument must have MultipartFile (single file) or MultipartFile[] (multiple files) type
    - for file upload technique, visit the SPRING BOOT THYMELEAF FILE STORAGE EXAMPLE page

Email:
    - the multiple parameter allows the user to enter more than one value

Hidden:
    - the input will not be visible but can store data needed e.g. for a field of object still needed to be sent back
    - any developer tools etc. reaches, not proper for secure data

Image:
    - the src= parameter defines default image file path
    - the alt="Submit" parameter activates Submit if image is clicked
    - the width= and height= parameters set presentation dimensions (need in case the page design should be pre-set)
    - the POST will send X, Y coordinates of the image

Month:
    - month and year can be asked in
    - format is YYYY-MM
    - Firefox and Safari do not support it

Number:
    - text-like appearance with spin buttons

Radio:
    - the value= parameter defines which radio refers to which value of the possible choices
    - the first choice is the 0th
    - accepts enum as text
    - the checked parameter pre-selects
    - only one can be selected per name= parameter value, per <form> or per <fieldset>
    - more <form>-s and <fieldset>-s can be used on a page at the same time if needed
    - usually used together with <label> tag which produces the shown text (consider id= and for= parameters)

Range:
    - a slider appears
    - the min= and the max= parameters define the low and high limits
    - for submit, an integer number will be sent

Reset:
    - a button appears
    - pressing it re-sets the initial values of all inputs etc.
    - the value= parameter sets the caption

Search:
    - the input behaves like a text input

Select:
    - it works as a combobox (scroll-down list) by default, as a list otherwise
    - the size= parameter defines the number of visible items, and the select will work as a list control, otherwise will work as a combobox
    - the multiple parameter lets more items to be selected in list control appearance
    - nested <option> tags define from which items can be the input value chosen
    - between the opening and closing <option> tags the visible item value is defined (HTML standard, use it when the items are static)
    - in an opened <option> tag the th:text= parameter defines the visible item text (use it when items are dynamic)
    - an <option> tag contains the value= parameter which means the postable value of the item (HTML standard, static)
    - an <option> tag contains the th:value= parameter which means the postable value of the item (dynamic)
    - the selected <option> parameter pre-selects an item
    - by default, for manually defined items, the first option, for dynamically defined items, the last added option fills the input
    - the disabled parameter of an <option> makes that item un-selectable

Submit:
    - a button appears
    - pressing it sends the form to the controller
    - the formaction= parameter can contain endpoint name or URL, reverts the form submit direction
    - the formmethod= parameter can contain "get", "post", "patch", "delete" values and overwrites the form request type
    - the formtarget="_blank" opens the target on a new page
    - the formnovalidate="formnovalidate" reverts from input value validation (overwrites similar settings of the <form>)
    - the value= parameter sets the caption
    - with the above parameters more submit buttons can be used in a <form>

Textarea:
    - multi-line text input
    - the rows= and cols= parameters define the visible dimensions (same as using style= local settings e.g. style="width:200px; height:600px;")
    - between the opening and closing markers of the tag the starting text can be written (the text will contain all spaces before the effective text, do not indent the text to fit to the <textarea> tag)
    - default height is 3 rows
    - wraps the content by default
    - the wrap= parameter sets how the wrapped text will be collected when submitting ("hard" will submit the wrapped text, "soft" (only if it does not have effect, use "off" instead) will submit unwrapped text)
    - new line will be marked with CR LF characters upon submit (see details below)

Time:
    - the browser shows a divided input field for time
    - shown format follows local settings

Week:
    - week can be asked in
    - Firefox and Safari do not support it

All numerical inputs (number, range, date, datetime-local, month, time, week):
    - min="minvalue" and max="maxvalue" can be defined as parameter as well
    - the step="step_value" parameter defines by how many numbers should the value jump when the spin buttons are used (only for number and range)

All text-like inputs (email, password, search, tel, text, url):
    - the maxlength="max_character_length" parameter can be used, when reaching the limit no new characters can be entered, no message or hint will be shown to the user, if that is not acceptable, writing Javascript code is needed
    - the pattern="pattern_text" parameter sets how the data will appear in the input, and exactly what characters are accepted in its positions, contains [minValue-maxValue]{validForThisLength} blocks, between blocks any characters can be, e.g. [A-Za-z]{3} or [0-9]{6}-[A-Z]{2}
    - the placeholder="hint" parameter defines input hint which appears in the empty input with different appearance than the entered data have, appears only when the input is empty
    - the list="datalist_id" parameter lets the user optionally choose from pre-defined texts (defined in <datalist> tag) when typing letters into the input, matching is based upon containing, the input accepts any value but in case a pre-set choice is exists, will show it in a popup list under the input

All text-like inputs plus textarea:
    - spell-check is enabled by default for the first approximately 74 rows, to turn it off use spellcheck="false" parameter

All text-like inputs plus color, date pickers, time:
    - the autocomplete="on_or_off" parameter forces the browser to suggest complete values based upon a few typed characters, overwrites <form> settings

All input-types (if relevant):
    - the readonly parameter makes the input unchangeable
    - the disabled parameter sets the input read-only and un-clickable, its value will not be sent when submitting
    - the required parameter means the input must be filled
    - the size="size_in_characters" parameter sets the maximum value length of the applicable input type (default is 20)
    - the autofocus parameter forces the focus on the input when the page loads, use it for one input per page
    - the form= parameter marks which <form> the input is part of, it has effect only when in the header of the <form> the id= parameter is used, such marked inputs can be placed outside the correspondent <form> tag, they still will be part of the correspondent <form>
    - the tabindex= parameter defines order of focusing when pressing TAB (e.g. tabindex="2", default is the order in the code)
    - the title= parameter defines hint text which appears on hovering above the input

Restrictions are useful on form-side but via Javascript it is possible to overwrite or get around them. Always check data on server-side.
Without setting width and height for an image, the layout will change as the image loads. For proper design, this should be avoided, set the dimensions beforehand.
Tags can be grouped by using the <fieldset> tag, see below.
In case a field or object is not rendered into an input, that field will be null upon submit at server side. That said, the attribute must have an <input> tag with th:object|field="..." parameter counterpart within the <form>. In case that attribute should not be offered for changing by the user, the <input> should be either readonly (but appears) or type="hidden" (will not appear).

For <textarea>, there are 3 variants how operating systems and browsers handle line feeds:
    - CR (carriage return; #0D or #13 \r; one character)
    - LF (line feed; $0A or #10 or \n; one character)
    - CR LF ($0D $0A or #13#10 or \r\n; two characters)
HTML standard defines that a <textarea> can receive any variant from above and will translate it to the 2-character (\r\n) variant. Furthermore, upon submit, the 2-character version will be sent back.
The length property of a <textarea> will always count the new line as it would be one-character variant.
In case at backend only \n character would be preferred, upon receiving data, replace the \r\n to \n, then the \r to \n for safety.

=================================================================================
8. EXAMPLES
=================================================================================
Visit the SPRING BOOT THYMELEAF EXAMPLES page for examples.

MORE HERE: https://www.baeldung.com/spring-thymeleaf-3-expressions
MORE HERE: https://www.javatpoint.com/spring-boot-thymeleaf-view
MORE HERE: https://stackoverflow.com/questions/28325708/thymeleaf-how-to-pass-html-to-the-div
MORE HERE: https://www.baeldung.com/spring-boot-crud-thymeleaf
MORE HERE: https://www.baeldung.com/spring-thymeleaf-error-messages

=>SPRING BOOT THYMELEAF EXAMPLES
=>SPRING BOOT THYMELEAF TEMPLATE FRAGMENTATION
=>SPRING BOOT THYMELEAF FILE STORAGE EXAMPLE
=>CSS
=>WEB APPLICATION
=>SPRING BOOT
=>SPRING BOOT CONTROLLER
=>SERIALIZATION
=>SPRING MODELANDVIEW
