=================================================================================
INPUTSTREAM
=================================================================================
Abstract class for handling input streams of byte.
Extending subclasses are FileInputStream, ByteArrayInputStream, ObjectInputStream, BufferedInputStream.
Due to being an abstract class, for declaration use constructor of a subclass.
Processing of the stream is sequential: after reading the given amount of data, the position will shift as well, the next reading will start from there.
In case a method tries to access data after the end of the source (accessed length is greater than the actually available), exception raises.
The stream must be closed after processing in order to release the source.
After closing the stream, any method will raise exception.
The InputStream implements the AutoClosable interface, the try-with-resources statement can be used to ensure proper closing.

||METHOD|DESCRIPTION||
||read()|reads a single byte||
||read(byte[] byteArray)|reads bytes into the given byte array||
||available()|returns the readable number of bytes in the stream, decreases as data is read||
||mark()|marks the position in the stream it was read until||
||reset()|returns the position to the marked position||
||markSupported()|checks whether the mark() and reset() are supported by the stream||
||skip()|skips the given number of bytes in the stream||
||close()|closes the stream||

EXAMPLE FOR USAGE:
import java.io.InputStream;
import java.io.FileInputStream;
...
try {
    InputStream inputStream = new FileInputStream(fileName); //attach the source
    byte[] byteArray = new byte[inputStream.available()]; //set up a byte array with proper size
    inputStream.read(byteArray); //read the source
    String string = new String(byteArray); //convert to String if source contains characters
    inputStream.close(); //close the stream (release the source)
}
catch (Exception e) {...} //in case the source was not accessible

EXAMPLE FOR USAGE WITH TRY-WITH-RESOURCES:
import java.io.InputStream;
import java.io.FileInputStream;
...
try (InputStream inputStream = new FileInputStream(fileName)) {
    byte[] byteArray = new byte[inputStream.available()]; //set up a byte array with proper size
    inputStream.read(byteArray); //read the source
    String string = new String(byteArray); //convert to String if source contains characters
}
catch (Exception e) {...} //in case the source was not accessible

=>STREAM
=>FILEINPUTSTREAM
=>BYTEARRAYINPUTSTREAM
=>OBJECTINPUTSTREAM
=>BUFFEREDINPUTSTREAM
=>FILE OPERATIONS
=>STATEMENTS;15. TRY-WITH-RESOURCES STATEMENT
