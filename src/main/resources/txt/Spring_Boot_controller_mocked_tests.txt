=================================================================================
SPRING BOOT CONTROLLER MOCKED TESTS
=================================================================================
1. MOCKMVC BASICS
2. MOCKMVC REQUEST BUILDERS
3. MOCKMVC RESULT MATCHERS
4. MOCKMVC REQUEST BUILDERS AND RESULT MATCHERS EXAMPLES

=>SPRING BOOT
=>SPRING BOOT TESTS
=>SPRING BOOT CONTROLLER TESTS
=>SPRING BOOT CONFIGURATION
=>MOCKITO
=>JUNIT
=>SPRING BOOT CONTROLLER
=>SPRING MODELANDVIEW
=>SPRING BOOT VALIDATION
=>SERIALIZATION

=================================================================================
1. MOCKMVC BASICS
=================================================================================
This kind of testing will not start the web service but mock it. The direct Communication layer will be started.
From the mocked environment we can send requests to the controller like it would arrive from the outside, and check the controller response as it would be sent out.
Due to the two statements above, testing the startup itself is necessary, see the main class test earlier.
With the structure above, in case of normally mocking the service classes as well, independent unit testing becomes possible.
This kind of testing is possible for controller methods in any mode.

For separating the service class(es) and their methods, they will be mocked by using Mockito. Mockito is included in Spring test web dependency.
For separating the web layer, the MockMVC will be used which is part of the Spring frameworks.
Due to automatism possible this way, no cURL commands are needed, tests will stay within Maven and the IDE.

The MockMVC uses a JSON parser and de-parser to transform incoming JSON strings to serialized object and vica-versa. The serialized object will be transformed to object normally.
The JSON parser of earlier MockMVC versions evaluates numbers in JSON as Long for whole numbers and BigDecimal for float numbers.
Although the BigDecimal has proper automatism for serialization and deserialization, does not have automatism to convert to wrapper or primitive type of float numbers.
Due to these, when using lower versions of MockMVC, the receiver object can contain Long, Integer, long and int types for whole numbers, but for float numbers in object, use BigDecimal as type.
In such cases, only for test purposes should the BigDecimal problem be handled, without modifying the original data model.

When MockMVC is used along with Spring Data JPA, an important issue can appear.
Normally, the main application class carries the @EnableJPARepositories annotation which instructs Hibernate (which is part of JPA core) to collect the repository beans. That said, the Spring layer of the application must be fully started up in order to enable Hibernate to search for beans in the class hierarchy.
The MockMVC controller test environment does not start the whole Spring framework therefore it is not possible for Hibernate to search for Spring beans. Furthermore, the test class is part of a lower level in the hierarchy.
Solution is to instruct JPA to re-calibrate the search graph with the MockMVC test class as start by using the @AutoConfigureDataJpa annotation for the particular MockMVC controller test class.
When no JPA is involved with the test class, this annotation is not needed.

In case if using JUnit4, the class-level @RunWith(SpringRunner.class) annotation is needed additionally.

EXAMPLE FOR CONTROLLER TEST CLASS (MOCKMVC, MOCKITO, JPA):
package packageName;

import static org.mockito.Mockito.when;
import static org.hamcrest.Matchers.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
import org.junit.jupiter.api.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.orm.jpa.*;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.*;
import org.springframework.test.web.servlet.*;
import org.springframework.web.servlet.*;

import java.util.*;

@WebMvcTest(ControllerClassName.class)
@AutoConfigureDataJpa
public class ControllerTest {

	@Autowired
	private MockMvc mockMvc;

	@MockBean
	private ServiceClass serviceName;

    //test cases marked with @Test annotation.
}
END OF EXAMPLE

In test cases, first task is mocking the correspondent service method with Mockito.
As second task, with MockMVC, the next data should be defined:
    a. incoming request type (get, post, put, patch, delete)
    b. endpoint (with query if there is)
    c. incoming media type (if there is incoming data)
    d. accepted incoming media type (if there is incoming data)
    e. incoming request body (JSON or XML or other, in String)
    f. expected outgoing media type (if there is outgoing data)
    g. expected outgoing data (if there is; can be JSON or XLS or other, in String)
    h. expected HTTP response code (codes are exchanged to verbal constants)
    i. expected HTTP response message
Using the above defined MockMVC components are optional, mainly depends on the particular controller method.
The HTTP response codes match with HTTP statuses.

With perform() method the test case is set. Order of the perform steps is important: the media types must be set before the content is defined.
Optionally, the MockMVC can be forced to print information about the results of performed action with the print() method. By default, the same information will appear when using Spring Data JPA because Hibernate is verbal.
Every andExpect() method means an assertion for its argument.

Important, in model&view and object/model&view modes, when the model is not cleared before new objects are added, the size of the outgoing model can be higher with the number of incoming model objects (see the andExpect(model().size(size)) method below).

Some expected statuses (look for more under StatusResultMatcher methods below):
    a. isOk()
    b. isAccepted()
    c. isBadRequest()
    d. isCreated()
    e. isFound()
    f. notAcceptable()
    g. notFound()
    h. notModified()

EXAMPLE FOR A TEST CASE METHOD (PUT ON /ENDPOINT, OBJECT MODE, JSON REQUEST BODY AND EXPECTED RESPONSE BODY, EXPECTED HTTP200 SUCCESS CODE):
@Test
public void testCaseName() throws Exception {
    //mocking service method
	when(purchaseService.serviceMethodName(...))
			.thenReturn(...);

	//mocking web layer and controller
	mockMvc
	        .perform(
	                put("/endpoint")
					.contentType(MediaType.APPLICATION_JSON_VALUE)
					.accept(MediaType.APPLICATION_JSON_VALUE)
					.content(...)
					)
			.andDo(print())
			.andExpect(status().isOk())
			.andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))
			.andExpect(content().json(...)); //or:
			.andExpect(content().string(...)); //or:
			.andExpect(content().string(containsString(...)));
}
END OF EXAMPLE

For model&view and object/model&view modes, because these modes are based upon models, the best approach is to declare a class which:
    a. is capable of storing all objects the model or models might receive or send
    b. has default and full constructors for Spring
    c. specific constructors for manual definition of specific portion of data fitting to actual need in controller method
    d. all getters and setters
    e. equals() and hashCode() methods
This class will represent the payload sent and received to and from the frontend.
In the tests payload objects will be defined for receiving and sending, the latter will be added to the model (or to the ModelAndView object).
The test will check whether for the received payload the sent payload is created.

EXAMPLE FOR DECLARING PAYLOAD CLASS:
package ...;

//imports

public class Payload {
    //private fields

    public Payload() {}
    public Payload(all fields) {...}
    public Payload(field variation 1) {...}
    ...
    public Payload(field variation n) {...}

    //getters, setters, equals(), hashCode()
}
END OF EXAMPLE

EXAMPLE FOR A TEST CASE METHOD (PUT ON /ENDPOINT, MODEL&VIEW AND OBJECT/MODEL&VIEW MODES, EXPECTED HTTP200 SUCCESS CODE):
@Test
public void testCaseName() throws Exception {
    //definition of variables containing received data
	Payload receivedPayload = new Payload(...); //use proper special constructor with received data
    //definition of variables containing sent data
	Payload sentPayload = new Payload(...); //use proper special constructor with sent data
	ModelAndView modelAndView = new ModelAndView("initial_view_name", "payload", sentPayload);
	//mocking service, passed data are received variables:
	when(service.serviceMethod(...))
			.thenReturn(modelAndView);

	mockMvc
			.perform(
					post("/endpoint")
							.flashAttr("payload", receivedPayload)
			)
			.andExpect(status().isOk())
			.andDo(print())
			.andExpect(view().name("view_name"))
			.andExpect(model().size(1))
			.andExpect(model().attribute("payload", sentPayload))
            .andExpect(forwardedUrl("UrlName"))
            .andExpect(redirectedUrl("UrlName"));
}
END OF EXAMPLE

=================================================================================
2. MOCKMVC REQUEST BUILDERS
=================================================================================
The MockMvcRequestBuilders class defines the incoming request type, and the endpoint or the endpoint path and the path parameters.
By default, MockMVC does not require to express this class explicitly in its perform() method which means e.g. the MockMvcRequestBuilders.get() methods equals with the get() method.

Every request type has a method in MockMvcRequestBuilders:
    a. get()
    b. post()
    c. put()
    d. delete()
    e. options()
    f. patch()
    g. head()
    h. request(): general method for all request types
    i. multipart(): multipart POST request or any request type if defined with HttpMethod argument

Variants of get()/.../head() method parameters:
    a. String URI (which means endpoint; object mode)
    b. String urlTemplate[, Object... uriVariables] (model&view mode)

Variants of request() method parameters:
    a. HttpMethod method, String URI (URI means the whole endpoint path)
    b. HttpMethod method, String urlTemplate[, Object... uriVariables]
    c. String httpMethod, String urlTemplate[, Object... uriVariables] (lets the developer use any custom request type)

In case of using path parameters, the urlTemplate/uriVariable1/uriVariable2/... text forms the whole endpoint path. Expressing it by using the (urlTemplate, uriVariables) argument variant:
    a. "/urlTemplate/{param1}/{param2}", paramValue1, paramValue2

Every MockMvcRequestBuilders method returns a MockHttpServletRequestBuilder instance. Methods of this instance represents the environment under which the mocked action will be held.
MockHttpServletRequestBuilder methods:
    a. accept(String... mediaTypes), accept(MediaType... mediaTypes): sets what the requester can accept
    b. buildRequest(ServletContext servletContext): builds a request, returns a MockHttpServletRequest instance
    c. characterEncoding(String encoding), characterEncoding(Charset encoding)
    d. content(byte[] content), content(String content): sets the request body
    e. contentType(String contentType), contentType(MediaType contentType): sets the request body type
    f. contextPath(String contextPath)
    g. cookie(Cookie... cookies): adds cookies to the request
    h. createServletRequest(ServletContext servletContext): returns a MockHttpServletRequest instance
    i. flashAttr(String name, Object value), flashAttrs(Map<String,Object> flashAttributes)
    j. header(String name, Object... values), headers(HttpHeaders httpHeaders): adds header to the request
    k. locale(Locale locale), locale(Locale... locales)
    l. param(String name, String... values), params(MultiValueMap<String,String> params): adds request parameter
    m. pathInfo(String pathInfo): specify the portion of the requestURI that represents the pathInfo
    n. postProcessRequest(MockHttpServletRequest request): adds a post-processing server request, returns a MockHttpServletRequest instance
    o. queryParam(String name, String... values), queryParams(MultiValueMap<String,String> params)
    p. requestAttr(String name, Object value): adds model attribute to the request (model&view mode)
    q. secure(boolean secure): indicates secure channel e.g. HTTPS
    r. servletPath(String servletPath): specify the portion of the requestURI that represents the path to which the Servlet is mapped
    s. session(MockHttpSession session): set the HTTP session to use, possibly re-used across requests
    t. sessionAttr(String name, Object value), sessionAttrs(Map<String,Object> sessionAttributes)

=================================================================================
3. MOCKMVC RESULT MATCHERS
=================================================================================
The MockMvcResultMatchers class defines the expected response body along with the HTTP response code (e.g. 200, 404) and the response cookie.
By default, MockMVC does not require to express this class explicitly in its andExpect() method which means e.g. the MockMvcResultMatchers.content() methods equals with the content() method.
This class makes the expected JSON object to be checked in parts and so on.

MockMvcResultMatchers methods:
    a. content(): response body; returns a ContentResultMatchers instance
    b. cookie(), flash(): response cookie, response flash attribute
    b. forwardedUrl(String url), forwardedUrlPattern(String url)
    c. forwardedUrlTemplate(String urlTemplate, Object... uriVars)
    d. jsonPath(String expression, Object... args): response JSON field, returns a JsonPathResultMatchers instance
    e. jsonPath(String expression, Matcher <? super T> matcher): response JSON field, returns a JsonPathResultMatchers instance
    f. jsonPath(String expression, Matcher <? super T> matcher, Class <T> targetType): response JSON field, returns a JsonPathResultMatchers instance
    g. model(): model-related assertion, returns a ModelResultMatchers instance
    h. redirectedUrl(String url), redirectedUrlPattern(String url)
    i. redirectedUrlTemplate(String urlTemplate, Object... uriVars)
    k. request(): returns a RequestResultMatchers instance
    l. status(): returns a StatusResultMatcher instance
    m. view(): view-related assertion, returns a ViewResultMatchers instance
These methods return instances with similar namings. Methods of the returned instances will provide the values which the MockMVC will check in andExpect() assertions.

ContentResultMatchers methods:
    a. bytes(byte[] expectedContent)
    b. contentType(String contentType), contentType(MediaType contentType)
    c. contentTypeCompatibleWith(String contentType), contentTypeCompatibleWith(MediaType contentType)
    d. encoding(String characterEncoding), encoding(Charset characterEncoding)
    e. json(String jsonContent), json(String jsonContent, boolean strict)
    f. string(String expectedContent)
    g. xml(String xmlContent)

JsonPathResultMatchers methods:
    a. doesNotExist()
    b. doesNotHaveJsonPath()
    c. exists()
    d. hasJsonPath()
    e. isArray()
    f. isBoolean()
    g. isEmpty()
    h. isMap()
    i. isNotEmpty()
    j. isNumber()
    k. isString()
    l. value(Object expectedValue), value(Matcher<? super T> matcher)
    m. value(Matcher<? super T> matcher, Class<T> targetType)

ModelResultMatchers methods:
    a. attribute(String name, Object value), attribute(String name, Matcher<? super T> matcher)
    b. attributeDoesNotExist(String... names)
    c. attributeErrorCount(String name, int expectedCount)
    d. attributeExists(String... names)
    e. attributeHasErrors(String... names)
    f. attributeHasFieldErrorCode(String name, String fieldName, String error)
    g. attributeHasFieldErrorCode(String name, String fieldName, Matcher<? super String> matcher)
    h. attributeHasFieldErrors(String name, String... fieldNames)
    i. attributeHasNoErrors(String... names)
    j. errorCount(int expectedCount)
    k. hasErrors()
    l. hasNoErrors()
    m. size(int size): number of model attributes

RequestResultMatchers methods:
    a. asyncNotStarted(): assert that asynchronous processing was not started
    b. asyncResult(Object expectedResult): assert the result from asynchronous processing
    c. asyncResult(Matcher<? super T> matcher): assert the result from asynchronous processing with the given matcher
    d. asyncStarted(): assert whether asynchronous processing started, usually as a result of a controller method returning Callable or DeferredResult
    e. attribute(String name, Object expectedValue): assert a request attribute value
    f. attribute(String name, Matcher<? super T> matcher): assert a request attribute value with the given Hamcrest Matcher
    g. sessionAttribute(String name, Object value): assert a session attribute value
    h. sessionAttribute(String name, Matcher<? super T> matcher): assert a session attribute value with the given Hamcrest Matcher
    i. sessionAttributeDoesNotExist(String... names): assert the given session attributes do not exist

StatusResultMatcher methods:
    a. is(int status)
    b. is1xxInformational(), is2xxSuccessful(), is3xxRedirection(), is4xxClientError(), is5xxServerError()
    c. isAccepted()
    d. isAlreadyReported()
    e. isBadGateway()
    f. isBadRequest()
    g. isBandwidthLimitExceeded()
    h. isCheckpoint()
    i. isConflict()
    j. isContinue()
    k. isCreated()
    l. isExpectationFailed()
    m. isFailedDependency()
    n. isForbidden()
    o. isFound()
    p. isGatewayTimeout()
    q. isGone()
    r. isHttpVersionNotSupported()
    s. isIAmATeapot()
    t. isImUsed()
    u. isInsufficientStorage()
    v. isInternalServerError()
    w. isLengthRequired()
    x. isLocked()
    y. isLoopDetected()
    z. isMethodNotAllowed()
    aa. isMovedPermanently()
    ab. isMultipleChoices()
    ac. isMultiStatus()
    ad. isNetworkAuthenticationRequired()
    ae. isNoContent()
    af. isNonAuthoritativeInformation()
    ag. isNotAcceptable()
    ah. isNotExtended()
    ai. isNotFound()
    aj. isNotImplemented()
    ak. isNotModified()
    al. isOk()
    am. isPartialContent()
    an. isPayloadTooLarge()
    ao. isPaymentRequired()
    ap. isPermanentRedirect()
    aq. isPreconditionFailed()
    ar. isPreconditionRequired()
    as. isProcessing()
    at. isProxyAuthenticationRequired()
    au. isRequestedRangeNotSatisfiable()
    av. isRequestHeaderFieldsTooLarge()
    aw. isRequestTimeout()
    ax. isResetContent()
    ay. isSeeOther()
    az. isServiceUnavailable()
    ba. isSwitchingProtocols()
    bb. isTemporaryRedirect()
    bc. isTooEarly()
    bd. isTooManyRequests()
    be. isUnauthorized()
    bf. isUnavailableForLegalReasons()
    bg. isUnprocessableEntity()
    bh. isUnsupportedMediaType()
    bi. isUpgradeRequired()
    bj. isUriTooLong()
    bk. isVariantAlsoNegotiates()

ViewResultMatchers methods:
    a. name(String expectedViewName): assert the selected view name
    b. name(Matcher<? super String> matcher): assert the selected view name with the given Hamcrest Matcher

=================================================================================
4. MOCKMVC REQUEST BUILDERS AND RESULT MATCHERS EXAMPLES
=================================================================================
EXAMPLE FOR SEPARATING ENDPOINT FROM PATH PARAMETER, OUTPUT COMPONENTS FROM JSON:
@Test
public void testCaseName() throws Exception {
    //mocking service method
	when(purchaseService.serviceMethodName(...))
			.thenReturn(...);

	//mocking web layer and controller
	mockMvc
	        .perform(
	                MockMvcRequestBuilders.get("/endpoint/{param}", paramValue)
					.contentType(MediaType.APPLICATION_JSON_VALUE)
					.accept(MediaType.APPLICATION_JSON_VALUE))
			.andDo(print())
			.andExpect(MockMvcResultMatchers.status().isOk()) //or:
			.andExpect(MockMvcResultMatchers.status().isBadRequest())
			.andExpect(MockMvcResultMatchers.content().contentType(MediaType.APPLICATION_JSON_VALUE)) //or:
			.andExpect(MockMvcResultMatchers.content().contentType(textPlainUtf8)) //or:
			.andExpect(MockMvcResultMatchers.content().contentTypeCompatibleWith("application/json"))
			.andExpect(MockMvcResultMatchers.jsonPath("$.fieldName").value(paramValue)); //or:
			.andExpect(MockMvcResultMatchers.jsonPath("$.fieldName", Is.is(paramValue))); //for error message; or:
			.andExpect(MockMvcResultMatchers.jsonPath("$.fieldName", is(paramValue))); //or:
			.andExpect(MockMvcResultMatchers.jsonPath("$.fieldName").value(paramValue)); //or:
			.andExpect(MockMvcResultMatchers.jsonPath("$.fieldName").exists());
}
END OF EXAMPLE

EXAMPLE FOR TESTING EXPECTED EXCEPTIONS:
@Test
public void givenNotFound_whenGetSpecificException_thenNotFoundCode() throws Exception {
    String exceptionParam = "not_found";

    mvc.perform(get("/exception/{exception_id}", exceptionParam)
      .contentType(MediaType.APPLICATION_JSON))
      .andExpect(status().isNotFound())
      .andExpect(result -> assertTrue(result.getResolvedException() instanceof ResourceNotFoundException))
      .andExpect(result -> assertEquals("resource not found", result.getResolvedException().getMessage()));
}
END OF EXAMPLE
