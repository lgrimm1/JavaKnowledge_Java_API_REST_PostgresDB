=================================================================================
CONCURRENTHASHMAP
=================================================================================
Implementing class of ConcurrentMap.

Constructor signatures:
    a. (): default capacity is 16, default load factor is 0.75
    b. (capacity in int, load factor in float): how many entries it can store, if load factor is exceeded, the map is moved to an other map with double size
    c. (other Map class): converting from that map to HashMap; need identical pair types

Creating instance by using a constructor:
import java.util.concurrent.ConcurrentMap;
import java.util.concurrent.ConcurrentHashMap;
...
ConcurrentHashMap<keyType, valueType> chm = new ConcurrentHashMap<>();

EXAMPLE FOR CONVERSION:
import java.util.concurrent.ConcurrentHashMap;
import java.util.HashMap;
...
HashMap<keyType, valueType> hm = new HashMap<>();
...
ConcurrentHashMap<keyType, valueType> chm = new ConcurrentHashMap<>(hm);
END OF EXAMPLE

All methods of Map are available. Specific methods are below.

||Method|Description||
||forEach(parallelismThreshold, [transformer], function)|iterates through entries, parallelismThreshold: how many element-operations can be parallel, transformer: a function transforming the data before the data is passed to the specified function||
||forEachEntry(...)|iterates through entries||
||forEachKey(...)|iterates through keys||
||forEachValue(...)|iterates through values||
||search([parallelThreshold])|searches the map based on the specified function and returns the matched entry||
||searchEntries(...)|searches among entries||
||searchKeys(...)|searches among keys||
||searchValues(...)|searches among values||
||reduce([parallelThreshold], [transformer], function)|generates a value from all entries||
||reduceEntries(...)|generates a value from entries||
||reduceKeys(...)|generates a value from keys||
||reduceValues(...)|generates a value from values||

EXAMPLE FOR FOREACH(), SEARCH() AND REDUCE():
import java.util.concurrent.ConcurrentHashMap;
...
ConcurrentHashMap<keyType, valueType> chm = new ConcurrentHashMap<>();
...
chm.forEach(4, (key, value) -> ...); //parallelismThreshold: 4, function on (key, value): ...
chm.forEach(4, (key, value) -> value, (value) -> ...); //parallelismThreshold: 4, (key, value) is transformed to value, function on (value): ...
String key = chm.search(4, (key, value) -> {return value == 3 ? key : null;});
//parallelismThreshold defines: in case the map contains minimum 4 elements, maximum 4 thread can execute operations on the map
valueType value = chm.reduce(4, (k, v) -> v, (v1, v2) -> v1+v2); //transforms every pair to its value, then adds all values
END OF EXAMPLE

Differences between ConcurrentHashMap and HashMap:
    a. ConcurrentHashMap is thread-safe, HashMap is not
    b. ConcurrentHashMap provides methods for bulk operations like forEach(), search() and reduce(), HashMap does not

ConcurrentHashMap is divided into 16 segments which allows 16 thread accesses parallel. Handles it in case more threads want to access the map at the same time.
It provides its own synchronization.

=>Map
=>ConcurrentMap
=>HashMap
=>Lambda_expressions
