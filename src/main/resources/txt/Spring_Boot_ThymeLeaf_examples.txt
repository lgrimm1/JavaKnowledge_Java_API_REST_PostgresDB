=================================================================================
SPRING BOOT THYMELEAF EXAMPLES
=================================================================================
1. CODE SNIPPETS OF GENERAL TAGS
2. CODE SNIPPETS OF INPUT TAGS
3. CODE SNIPPETS FOR SCRIPTS

=================================================================================
1. CODE SNIPPETS OF GENERAL TAGS
=================================================================================
The ThymeLeaf HTML tags are in the next order below:
    - banner
    - blockquote
    - div
    - favicon and style
    - fieldset
    - form
    - formatting (bold, italics, strong, small, sup, sub ,code, quotation etc.)
    - image
    - iframe
    - label
    - paragraph
    - reference
    - span
    - table (formatting-purpose)
    - table (data-purpose)

For all tags, optional parameters:
    - width="width_value" height="height_value" style="style data" class="style_name" on...="script_method(this)"
For surrounding tags (body, fieldset, form), optional parameter:
    - autocomplete="on"

Please note, in case more images are nested into am anchor (<a><img ...><img ...></a>), always write the nested <img> tags inline with the <a> tag. Reason is that some browsers will put an underlined space between every image.

EXAMPLE FOR BANNER:
<a href="url"><img src="url" alt="alternative text"></a>
<a href="url">ANY TEXT<img src="url" alt="alternative text">ANY TEXT</a>
<a href="url"><img src="url" alt="alternative text"><br>ANY TEXT</a>
END OF EXAMPLE

EXAMPLE FOR BLOCKQUOTE:
<!-- simple content: -->
<blockquote cite="source_url" th:text="*<fieldName>" />

<!-- content-series from collection: -->
<blockquote cite="source_url">
    <span th:each="line : *{collectionFieldName}" th:text="${line}" />
</blockquote>
END OF EXAMPLE

EXAMPLE FOR DIV:
<!-- one div, text: -->
<div th:text="*{fieldName}" />

<!-- one div, HTML code: -->
<div th:utext="*{fieldName}" />

<!-- more divs from collection, text: -->
<wrapping_tag>
    <div th:each="div : *{collectionFieldName}" th:text="${div}" />
</wrapping_tag>

<!-- more divs from collection, HTML code: -->
<wrapping_tag>
    <div th:each="div : *{collectionFieldName}" th:utext="${div}" />
</wrapping_tag>
END OF EXAMPLE

EXAMPLE FOR FAVICON AND STYLE:
<!-- pure template -->
<head>
    <!-- code -->
    <link rel="icon" type="image/x-icon" th:href="@{/images/favicon.ico}">
    <link rel="stylesheet" th:href="@{/styles/dark_gray.css}">
</head>

<!-- pure template used with and without ThymeLeaf -->
<head>
    <!-- code -->
    <link rel="icon" type="image/x-icon" th:href="@{/images/favicon.ico} href="/images/favicon.ico">
    <link rel="stylesheet" th:href="@{/styles/dark_gray.css} href="/styles/dark_gray.css">
</head>
END OF EXAMPLE

EXAMPLE FOR FIELDSET:
<!-- no group caption: -->
<fieldset>
    <!-- labels, inputs etc. -->
</fieldset>

<!-- fix group caption: -->
<fieldset>
    <legend>&nbsp;Group title&nbsp;</legend>
    <!-- labels, inputs etc. -->
</fieldset>

<!-- dynamic group caption: -->
<fieldset>
    <legend th:text="'&nbsp;' + *{fieldName} + '&nbsp;'" />
    <!-- labels, inputs etc. -->
</fieldset>
END OF EXAMPLE

EXAMPLE FOR FORM:
<form id="form_name" action="#" th:object="${payload}" th:action="@{/page}" method="post" novalidate>
    <!-- code -->
</form>
END OF EXAMPLE

EXAMPLE FOR FORMATTING (BOLD, ITALICS, STRONG, SMALL, SUP, SUB, CODE, QUOTATION ETC.):
<!-- <b>, <i>, <strong>, <code>, <q> etc. -->
<tag_name th:text="*{fieldName}" />
END OF EXAMPLE

EXAMPLE FOR IMAGE:
<!-- one image: -->
<img th:src="*{fieldName1}" th:alt="*{fieldName2}">

<!-- more images from collection: -->
<img th:each="image : *{collectionFieldName}" th:src="${image.src}" th:alt="${image.alt}">

<!-- one image with reference: -->
<a th:href="*{fieldName1}">
    <img th:src="*{fieldName2}" th:alt="*{fieldName3}">
</a>

<!-- more images with references from collection: -->
<a th:each="image : *{collectionFieldName}" th:href="${image.href}">
    <img th:src="${image.src}" th:alt="${image.alt}">
</a>
END OF EXAMPLE

EXAMPLE FOR IFRAME:
<!-- referenced page in root directory: -->
<div style="width:100%; height:300px; overflow:hidden;">
        <iframe th:src="@{*{fieldName}}" allow="fullscreen" />
</div>
END OF EXAMPLE

EXAMPLE FOR LABEL:
<!-- one label: -->
<label th:text="*{fieldName}" class="label_style" />

<!-- more labels from collection: -->
<label th:each="any_name : *{collectionFieldName}" th:text="${any_name}" class="label_style" />
END OF EXAMPLE

EXAMPLE FOR PARAGRAPH:
<!-- one paragraph: -->
<p th:text="*{fieldName}" class="paragraph_style" />

<!-- more paragraphs from collection -->
<p th:each="any_name : *{collectionFieldName}" th:text="${any_name}" class="paragraph_style" />
END OF EXAMPLE

EXAMPLE FOR REFERENCE:
<!-- one reference: -->
<a href="*{fieldName.url}" th:text="*{fieldName.text}" tabindex="number" /><br>

<!-- more references from collection: -->
<span th:each="reference : *{collectionFieldName}">
    <a href="${reference.url}" th:text="${reference.text}" /><br>
</span>
END OF EXAMPLE

EXAMPLE FOR SPAN:
<!-- one span: -->
<wrapping_tag><span th:text="*{fieldName}" /></wrapping_tag>

<!-- more spans from collection: -->
<wrapping_tag>
    <span th:each="span : *{collectionFieldName}" th:text="${span}" />
</wrapping_tag>
END OF EXAMPLE

EXAMPLE FOR TABLE (FORMATTING-PURPOSE):
<table class="formatter_table_style">
    <tr>
        <td style="width: 75%">
            <!-- code -->
        </td>
        <td style="width: 25%">
            <!-- code -->
        </td>
    </tr>
</table>
<br>
END OF EXAMPLE

EXAMPLE FOR TABLE (DATA-PURPOSE):
<!-- fix rows: -->
<table class="table_style">
    <tr>
        <th>Header text 1</th><th>Header text 2</th><th>Header text 3</th>
    </tr>
    <tr>
        <td th:text="*{fieldName1}" th:class="td_style" />
        <td th:text="*{fieldName2}" th:class="td_style" />
        <td th:text="*{fieldName3}" th:class="td_style" />
    </tr>
</table>
<br>

<!-- dynamic rows: -->
<table class="table_style">
    <tr>
        <th th:text="*{fieldName}" />
    </tr>
    <tr>
        <td th:each="row : *{collectionFieldName}" th:text="${row}" th:class="td_style" />
    </tr>
</table>
<br>
END OF EXAMPLE

=================================================================================
2. CODE SNIPPETS OF INPUT TAGS
=================================================================================
Below ThymeLeaf HTML tags are in the next order:
    - button-like inputs (submit, reset, button)
    - checkbox
    - file
    - image
    - numeric inputs (number, range)
    - picker-like and time inputs (color, date, datetime-local, time)
    - radio
    - text-like inputs (email, password, search, tel, text, url)
    - select (scroll-down, list)
    - textarea

For all inputs, optional parameters:
    - width="width_value" height="height_value" style="style data" class="style_name" tabindex="number" autofocus form="form_name" on...="script_method(this)" required readonly disabled
For checkbox input, optional parameter:
    - checked
For all picker-like and time inputs, optional parameters:
    - min="min_value" max="max_value" autocomplete="on"
For all numeric inputs, optional parameters:
    - min="min_value" max="max_value" step="step_value" size="max_size_in_characters" autocomplete="on"
For radio input, optional parameter:
    - name="group_name" checked
For all text-like inputs, optional parameters:
    - maxlength="max_character_length" size="max_size_in_characters" pattern="pattern_text" list="datalist_name" placeholder="hint" autocomplete="on" spellcheck="false"
For select input, optional parameters:
    - size="height_in_number_of_items" multiple
For textarea input, optional parameters:
    - rows="number_of_rows" cols="number_of_characters" wrap="hard|soft|off" spellcheck="false"

For file-type input, it has the ability to receive focus (tabbing), activate for key press while on focus, opening selection dialog, storing file selection, receive files via drag&drop, showing names of selected files, also lets screen readers to detect it.
The appearing button and the file-list behind it is not modifiable, CSS parameters have no effect.
Workaround is to wrap the input into a label and give button-like style to it while hiding (visually or totally) the original input, visit the CSS page for style examples. See examples below.
The accept= parameter of the <input> lets the developer define which files are accepted by the <input>. In case of more types, separate them with comma (without space). File types can be extension or MIME-type or combined.
The file content is Multipart attached to the submitted data. Can be received by the backend only when the <form> tag carries the enctype="multipart/form-data" parameter.

For all inputs, consider using a br tag after the label and-or after the input.
Also, inputs will not inherit font properties, must define these on the inputs as well.

For select, when items are dynamically determined from a Collection field, the default selected item will be the last added one. Consider adding a script which selects the needed item on load, see script examples below.

For textarea, although the visible control contains lines, any Collection-type data will be called in as Collection.toString(). That said, for a List of two lines, the visible text will be e.g. [Line1, Line2] by default. Instead, pass String with "\n" line ends.
Also, the wrap= parameter sets submit wrapping behaviour: "soft" (only if it has no effect, use "off" instead) will ignore wrapping when submitting, "hard" will submit the content in its visible wrapped form.
When wrap="hard" is set, the cols= parameter must be defined as well.

EXAMPLE FOR NOT EDITABLE BUT SUBMITTED FIELDS:
<!-- visible: -->
<input type="text" th:field="*{fieldName}" readonly>
<!-- not visible: -->
<input type="hidden" th:field="*{fieldName}">
END OF EXAMPLE

EXAMPLE FOR BUTTON-LIKE INPUTS (SUBMIT, RESET, BUTTON):
<input type="submit" value="caption text" formaction="/endpoint" formmethod="post" />
<input type="reset" value="caption text" />
<input type="button" value="caption text" onclick="script_method(this)" />
END OF EXAMPLE

EXAMPLE FOR CHECKBOX:
<!-- label is before: -->
<label for="input_name" style="style data" class="label_style">label text</label>
<input id="input_name" type="checkbox" th:field="*{fieldName}" />

<!-- label is after: -->
<input id="input_name" type="checkbox" th:field="*{fieldName}" />
<label for="input_name" style="style data" class="label_style">label text</label>
END OF EXAMPLE

EXAMPLE FOR FILE TYPES (ACCEPT=):
.jpg
image/*
image/jpg
audio/*
video/*
.doc,.docx,.xml,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document (anything which might be Microsoft Office Word file)
combined (.pdf,.png,audio/*)
END OF EXAMPLE

EXAMPLE FOR FILE:
<!-- CSS class definitions for labels of file-type inputs: .label_of_custom_file_input {...} -->
<!-- CSS definitions for file-type inputs: input[type="file"] {...} -->

<!-- Javascript: -->
<label for="file-upload" class="custom_file_upload"">
    <span id="file-selected"></span>
    <input id="file-upload" type="file" th:field="*{fieldName}" onchange="show_name(this) multiple />
    button text
</label>
<script>
    <!-- show selected file names: -->
    function show_name(input) {
        document.getElementById("file-selected").innerHTML = input.files.item(0).name;
    };
    <!-- show selected file names: -->
    function show_name(input) {
        document.getElementById("file-selected").innerHTML = input.files.item(0).name;
    };
    <!-- show there are selected files: -->
    function show_name(input) {
        document.getElementById("file-selected").innerHTML = 'File(s) were selected.';
    };
</script>

<!-- JQuery: -->
<label for="file-upload" class="custom_file_upload" onchange="show_name(this)">
    <span id="file-selected"></span>
    <input id="file-upload" type="file" th:field="*{fieldName}" multiple />
    button text
</label>
<script>
    <!-- show selected file names: -->
    $('#file-upload').bind('change', function() {
        var fileName = '';
        fileName = $(this).val();
        $('#file-selected').html(fileName); <!-- or, in case it shows fake file path: -->
        $('#file-selected').html(fileName.replace(/^.*\\/, ""));
    })
    <!-- show there are selected files: -->
    $('#file-upload').bind('change', function() {
        var fileName = '';
        fileName = 'File(s) were selected.';
        $('#file-selected').html(fileName);
    })
</script>
END OF EXAMPLE

EXAMPLE FOR IMAGE:
<input id="input_name" type="image" src="*{fieldName}" alt="Submit" />
END OF EXAMPLE

EXAMPLE FOR NUMERIC INPUTS (NUMBER, RANGE):
<!-- label for any numeric input: -->
<label for="input_name" style="style data" class="label_style">label text</label>

<!-- input variants: -->
<input id="input_name" type="number" th:field="*{fieldName}" />
<input id="input_name" type="range" th:field="*{fieldName}" />
END OF EXAMPLE

EXAMPLE FOR PICKER-LIKE AND TIME INPUTS (COLOR, DATE, DATETIME-LOCAL, TIME):
<!-- label for any picker-like or time input: -->
<label for="input_name" style="style data" class="label_style">label text</label>

<!-- input variants: -->
<input id="input_name" type="color" th:field="*{fieldName}" />
<input id="input_name" type="date" th:field="*{fieldName}" />
<input id="input_name" type="datetime-local" th:field="*{fieldName}" />
<input id="input_name" type="time" th:field="*{fieldName}" />
END OF EXAMPLE

EXAMPLE FOR RADIO INPUTS:
<!-- fix options, text values: -->
<input type="radio" id="input_name_1" th:field="*{fieldName1}" value="'value1'" />
<label for="input_name_1" th:text="value1" />
<input type="radio" id="input_name_2" th:field="*{fieldName2}" value="'value2'" />
<label for="input_name_2" th:text="value2" />

<!-- dynamic options, text values: -->
<span th:each="value : *{collectionFieldName}">
    <input type="radio" th:field="*{fieldName}" value="${value}" />
    <label th:text="${value}" /><br>
</span>

<!-- fix options, enum: -->
<input type="radio" id="input_name_1" th:field="*{fieldName1}" value="VALUE1" />
<label for="input_name_1" th:text="value1" />
<input type="radio" id="input_name_2" th:field="*{fieldName2}" value="VALUE2" />
<label for="input_name_2" th:text="value2" />
END OF EXAMPLE

EXAMPLE FOR TEXT-LIKE INPUTS (EMAIL, PASSWORD, SEARCH, TEL, TEXT, URL):
<!-- label for any text-like input: -->
<label for="input_name" style="style data" class="label_style">label text</label>

<!-- input variants: -->
<input id="input_name" type="email" th:field="*{fieldName}" multiple />
<input id="input_name" type="password" th:field="*{fieldName}" />
<input id="input_name" type="search" th:field="*{fieldName}" />
<input id="input_name" type="tel" th:field="*{fieldName}" />
<input id="input_name" type="text" th:field="*{fieldName}" />
<input id="input_name" type="url" th:field="*{fieldName}" />

<!-- optional fix data definition to choose from: -->
<datalist id="datalist_name">
    <option value="value1">
    <option value="value2">
    <option value="value3">
</datalist>

<!-- optional dynamic data definition to choose from: -->
<datalist id="datalist_name">
    <option th:each="data : *{collectionFieldName}" th:value="${data}">
</datalist>

<!-- input variants with datalist: -->
<input id="input_name" type="email" list="datalist_name" th:field="*{fieldName}" multiple />
<input id="input_name" type="password" list="datalist_name" th:field="*{fieldName}" />
<input id="input_name" type="search" list="datalist_name" th:field="*{fieldName}" />
<input id="input_name" type="tel" list="datalist_name" th:field="*{fieldName}" />
<input id="input_name" type="text" list="datalist_name" th:field="*{fieldName}" />
<input id="input_name" type="url" list="datalist_name" th:field="*{fieldName}" />
END OF EXAMPLE

EXAMPLE FOR SELECT (SCROLL-DOWN, LIST):
<!-- scroll-down, fix items: -->
<select id="input_name" th:field="*{fieldName}">
    <option value="value1">value text 1</option>
    <option value="value2">value text 2</option>
    <option value="value3">value text 3</option>
</select>

<!-- list, fix items: -->
<select id="input_name" th:field="*{fieldName}" size="3">
    <option value="value1">value text 1</option>
    <option value="value2">value text 2</option>
    <option value="value3">value text 3</option>
</select>

<!-- scroll-down, dynamic items: -->
<select id="input_name" th:field="*{fieldName}">
    <option th:each="item : *{collectionFieldName}" th:value="${item}" th:text="${item}" />
</select>

<!-- list, dynamic items: -->
<select id="input_name" th:field="*{fieldName}" size="10">
    <option th:each="item : *{collectionFieldName}" th:value="${item}" th:text="${item}" />
</select>

<!-- list, dynamic items, conditional selection: -->
<select id="input_name" th:field="*{fieldName}" size="10">
    <option th:each="item : *{collectionFieldName}" th:value="${item.value}" th:text="${item.caption}" th:selected="${item.selected}" />
</select>
END OF EXAMPLE

EXAMPLE FOR TEXTAREA:
<!-- please modify the text-area tag name to textarea! -->

<!-- starting text is null or from field: -->
<text-area id="input_name" th:field="*{fieldName}">
</text-area>

<!-- fix starting text: -->
<text-area id="input_name" th:field="*{fieldName}">
    starting text
</text-area>

<!-- dynamic starting text: -->
<text-area id="input_name" th:field="*{fieldName1}">
    <span th:text="*{fieldName2}" />
</text-area>

<!-- parameters for code-like content: -->
<text-area id="input_name" ... wrap="soft">
    content
</text-area>
END OF EXAMPLE

=================================================================================
3. CODE SNIPPETS FOR SCRIPTS
=================================================================================
JavaScripts can be declared internally or externally.
For internal solution, one or more <script> closed tag(s) should be placed somewhere in the <body> block, inside the scripts will take place.
In case scripts are used by several pages and templates, create external JavaScript file(s) under /static/js directory, write the scripts into these and import the files in the <head> block of the correspondent page or template. The a .js file should contain all lines which would be inside a <script> block but without the <script> tag.

EXAMPLE FOR INTERNAL SCRIPT BLOCKS:
<body>
<script>
    <!-- codes -->
</script>
</body>
END OF EXAMPLE

EXAMPLE FOR EXTERNAL JAVASCRIPT FILE:
<!-- in the page or template: -->
<head>
    ...
    <script type="text/javascript" th:src="@{/js/scriptfile.js}"></script>
</head>

<!-- content of scriptfile.js: -->
<!-- codes -->
END OF EXAMPLE

EXAMPLE FOR JAVASCRIPT SOLUTIONS:
<!-- caller side: content_to_clipboard('element_id') -->
function content_to_clipboard(id) {
    document.getElementById(id).select();
    document.execCommand('copy');
}

<!-- caller side: content_to_clipboard(this) -->
function content_to_clipboard(element) {
    element.select();
    document.execCommand('copy');
}

<!-- caller side: input_to_full_size(this) -->
function input_to_full_size(element) {
    element.style.height = "";
    element.style.height = element.scrollHeight + "px";
}

<!-- textarea to full size on page load -->
window.onload = function() {
    var textarea = document.getElementById("textarea_id");
    textarea.style.height = "";
    textarea.style.height = textarea.scrollHeight + "px";
}

<!-- set textarea wrapping behaviour on page load -->
window.onload = function() {
    document.getElementById("textarea_id").wrap='off|soft|hard';
}

<!-- text-like input and textarea, caret to last position on page load -->
window.onload = function() {
    var element = document.getElementById("element_id");
    element.focus();
    element.setSelectionRange(element.value.length, element.value.length);
}

<!-- select 1st item in <select> on page load: - -->
window.onload = function() {
    var s = document.getElementById("select_id");
    s.selectedIndex = 0;
}

<!-- select last item in <select> on page load: - -->
window.onload = function() {
    var s = document.getElementById("select_id");
    s.selectedIndex = s.options.length - 1;
}
END OF EXAMPLE

MORE HERE: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file
MORE HERE: https://www.baeldung.com/thymeleaf-select-option
MORE HERE: https://o7planning.org/11659/thymeleaf-form-select-option

=>SPRING BOOT THYMELEAF
=>SPRING BOOT THYMELEAF TEMPLATE FRAGMENTATION
=>SPRING BOOT THYMELEAF FILE STORAGE EXAMPLE
=>CSS
=>WEB APPLICATION
=>SPRING BOOT
=>SPRING BOOT CONTROLLER
=>SERIALIZATION
=>SPRING MODELANDVIEW
