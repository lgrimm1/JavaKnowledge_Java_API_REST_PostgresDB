=================================================================================
INPUTSTREAMREADER
=================================================================================
Extends Reader.
Extended by FileReader.
Converts data of bytes coming from a StreamReader (any subclasses) into data of characters. That said, it is a bridge between byte streams and character streams, reads bytes from an input stream as characters.
For 1-byte characters (ASCII) using an InputStream then convert the output to a String through the new String(byteArray) constructor is valid.
For minimum 2-byte characters (UTF-8, Unicode), the InputStreamReader is needed since it can read more bytes together as one character.
After building the bridge over it, the handled input stream needs no further access, methods of the bridge can be used.
In case a method tries to access data after the end of the source (accessed length is greater than the actually available), exception raises.
The stream must be closed after processing in order to release the input stream source.
After closing the stream, any method will raise exception.
The InputStreamReader implements the AutoClosable interface, the try-with-resources statement can be used to ensure proper closing.

Constructor parameters:
    a. (FileInputStream fileInputStream): links the bridge to the input stream (e.g. FileInputStream), default character coding
    b. (FileInputStream fileInputStream, Charset charset): links the bridge to the input stream, charset character coding

The defined character coding will be forced during accessing the source stream.
Available methods are below.

||METHOD|DESCRIPTION||
||read()|reads a single character||
||read(char[] characterArray)|reads characters into the given character array||
||read(char[] characterArray, int start, int length)|reads length number of characters into the given character array from its start index||
||getEncoding()|detects the character encoding in the input stream, set earlier by constructor||
||close()|closes the stream reader over the input stream||
||ready()|checks whether the source stream is ready to be read||
||mark()|marks the position in the stream it was read until||
||reset()|returns the position to the marked position||

EXAMPLE FOR USAGE:
import java.io.FileInputStream;
import java.io.InputStreamReader;
...
try {
    FileInputStream fileInputStream = new FileInputStream(fileName); //attach the source
    InputStreamReader inputStreamReader = new InputStreamReader(fileInputStream); //or:
    InputStreamReader inputStreamReader = new InputStreamReader(fileInputStream, Charset cs);
    char[] characterArray = new char[100]; //set up a character array
    inputStreamReader.read(characterArray); //read the source into array
    inputStreamReader.close(); //close the bridge (release the source stream)
    fileInputStream.close(); //close the input stream (release the source)
}
catch (Exception e) {...} //in case the source was not accessible or the bridge was not built over the stream

EXAMPLE FOR USAGE WITH TRY-WITH-RESOURCES:
import java.io.FileInputStream;
import java.io.InputStreamReader;
...
try (FileInputStream fileInputStream = new FileInputStream(fileName); InputStreamReader inputStreamReader = new InputStreamReader(fileInputStream)) {
    char[] characterArray = new char[100]; //set up a character array
    inputStreamReader.read(characterArray); //read the source into array
}
catch (Exception e) {...} //in case the source was not accessible or the bridge was not built over the stream

EXAMPLE FOR USING CHARACTER CODINGS:
...
InputStreamReader inputStreamReader1 = new InputStreamReader(fileInputStream); //will use canonical naming e.g. Cp1252
InputStreamReader inputStreamReader2 = new InputStreamReader(fileInputStream, Charset.forName("UTF8")); //will use the given naming
String s = inputStreamReader1.getEncoding(); //"Cp1252"
s = inputStreamReader2.getEncoding(); //"UTF8"

=>STREAM
=>READER
=>FILEREADER
=>INPUTSTREAM
=>FILEINPUTSTREAM
=>CHARSET
=>STATEMENTS;15. TRY-WITH-RESOURCES STATEMENT
