=================================================================================
STATEMENTS
=================================================================================
1. GROUP OF STATEMENTS
2. DECLARATION STATEMENTS
3. MEMORY ALLOCATION STATEMENT
4. IF STATEMENT
5. IF-ELSE STATEMENT
6. IF-ELSE-IF STATEMENT
7. NESTED IF STATEMENT
8. SWITCH STATEMENT
9. ENHANCED SWITCH STATEMENT
10. RETURN STATEMENT
11. RETURN-SWITCH STATEMENT
12. TRY-CATCH STATEMENT
13. TRY-FINALLY STATEMENT
14. TRY-CATCH-FINALLY STATEMENT
15. TRY-WITH-RESOURCES STATEMENT
16. ENHANCED TRY-WITH-RESOURCES STATEMENT
17. MULTI-CATCH (COLLAPSED) CATCH BLOCK
18. CHAINED STATEMENTS

=================================================================================
1. GROUP OF STATEMENTS
=================================================================================
Between { and } brackets; can be empty; in case no statements inside, can be left.
Other name of it: code block.

=================================================================================
2. DECLARATION STATEMENTS
=================================================================================
EXAMPLE FOR DECLARATION STATEMENT:
int i;
String s;
END OF EXAMPLE

EXAMPLE FOR DECLARATION STATEMENT COMBINED WITH MEMORY ALLOCATION STATEMENT:
Can be combined with memory allocation statement:
int a = 11;
String[] sa = new String[5];
END OF EXAMPLE

=================================================================================
3. MEMORY ALLOCATION STATEMENT
=================================================================================
EXAMPLE FOR MEMORY ALLOCATION STATEMENT:
k = 3 * 5; //3 * 5: expression
l = new ArrayList<>();
m = makeImpression(abu, dzabu);
n = "window";
END OF EXAMPLE

EXAMPLE FOR MEMORY ALLOCATION STATEMENT COMBINED WITH DECLARATION STATEMENT:
int a = 11;
String[] sa = new String[5];
END OF EXAMPLE

=================================================================================
4. IF STATEMENT
=================================================================================
EXAMPLE FOR IF STATEMENT:
if (condition) {
	...
}
END OF EXAMPLE

=================================================================================
5. IF-ELSE STATEMENT
=================================================================================
EXAMPLE FOR IF-ELSE STATEMENT:
if (condition) {
	...
}
else {
	...
}
END OF EXAMPLE

=================================================================================
6. IF-ELSE-IF STATEMENT
=================================================================================
EXAMPLE FOR IF-ELSE-IF STATEMENT:
if (condition) {
	...
}
else if (condition) {
	...
}
else if (condition) {
	...
}
else {
	...
}
END OF EXAMPLE

=================================================================================
7. NESTED IF STATEMENT
=================================================================================
EXAMPLE FOR NESTED IF STATEMENT:
if (condition) {
	if (condition) {
		...
	}
	else {
		...
	}
}
else {
	if (condition) {
		...
	}
	else {
		...
	}
}
END OF EXAMPLE

=================================================================================
8. SWITCH STATEMENT
=================================================================================
EXAMPLE FOR SWITCH STATEMENT:
switch (variable) {
	case value1:
		statement;
		statement;
		break;
	case value2:
		statement;
		break;
	[default:
		statement;
		break;]
}
END OF EXAMPLE

Variable can be primitive, enumerated types, String, wrapper classes.
Leaving a break; statement causes that the flow jumps on the next case.

=================================================================================
9. ENHANCED SWITCH STATEMENT
=================================================================================
EXAMPLE FOR ENHANCED SWITCH STATEMENT:
switch (variable) {
	case value1 -> statement;
	case value2 -> {
		statement;
		statement;
	}
	[default -> statement;]
}
END OF EXAMPLE

=================================================================================
10. RETURN STATEMENT
=================================================================================
EXAMPLE FOR RETURN STATEMENT:
return true;
return 3 * 2;
return variable;
return (condition) ? true : false;
return (condition) ? 3 * 2 : 5 / 6;
return (condition) ? variable1 : variable2;
END OF EXAMPLE

=================================================================================
11. RETURN-SWITCH STATEMENT
=================================================================================
EXAMPLE FOR RETURN-SWITCH STATEMENT:
return switch (variable) {
	case value1 -> statement;
	case value2 -> {
		statement;
		statement;
	}
	[default -> statement;]
};
END OF EXAMPLE

=================================================================================
12. TRY-CATCH STATEMENT
=================================================================================
EXAMPLE FOR TRY-CATCH STATEMENT:
try {
    //tried statements
}
catch (exceptionType exceptionVariable) {
    //process exceptionVariable in case thrown such exception
}
[catch (exceptionType2 exceptionVariable2) {
    //process exceptionVariable2 in case thrown such exception
}
...
catch (exceptionTypeX exceptionVariableX) {
    //process exceptionVariableX in case thrown such exception
}]
END OF EXAMPLE

=================================================================================
13. TRY-FINALLY STATEMENT
=================================================================================
EXAMPLE FOR TRY-FINALLY STATEMENT:
try {
    //tried statements
}
finally {
    //closing statements, invoked after try clause
}
END OF EXAMPLE

The finally block will not apply:
    - after System.exit() method
    - unhandled exception in finally block
    - thread freezes

=================================================================================
14. TRY-CATCH-FINALLY STATEMENT
=================================================================================
EXAMPLE FOR TRY-CATCH-FINALLY STATEMENT:
try {
    //tried statements
}
catch (exceptionType exceptionVariable) {
    //process exceptionVariable in case thrown such exception
}
[catch (exceptionType2 exceptionVariable2) {
    //process exceptionVariable2 in case thrown such exception
}
...
catch (exceptionTypeX exceptionVariableX) {
    //process exceptionVariableX in case thrown such exception
}]
finally {
    //closing statements, invoked after tried statements and caught exceptions
}
END OF EXAMPLE

Less safe try statement for more objects need closing after process: there is a possibility that one of the .close methods will not run if the previous one fails.

The "finally" block will not apply:
    - after System.exit() method
    - unhandled exception in finally block
    - thread freezes

=================================================================================
15. TRY-WITH-RESOURCES STATEMENT
=================================================================================
EXAMPLE FOR TRY-WITH-RESOURCES STATEMENT:
try (resource declaration) {
    //tried statements
}
catch (exceptionType exceptionVariable) {
    //process exceptionVariable in case thrown such exception
}
[catch (exceptionType2 exceptionVariable2) {
    //process exceptionVariable2 in case thrown such exception
}
...
catch (exceptionTypeX exceptionVariableX) {
    //process exceptionVariableX in case thrown such exception
}]
END OF EXAMPLE

Resource declaration: autoClosableType autoClosableVariable = ...[; ...; autoClosableTypeX autoClosableVariableX = ...]
After tried statements and caught exceptions, invokes .close() methods for all declared resources.
The most safe try statement for objects need closing after process.
Closing the resources will happen in reverse order (last first).

EXAMPLE FOR RESOURCE DECLARATION:
Scanner sci = new Scanner(...)
FileReader fr = new FileReader(...)
END OF EXAMPLE

=================================================================================
16. ENHANCED TRY-WITH-RESOURCES STATEMENT
=================================================================================
From Java9.
The try header can handle resources declared before the try block.

EXAMPLE FOR ENHANCED TRY-WITH-RESOURCES:
Scanner sc = new Scanner(...);
...
try (sc) {...}
END OF EXAMPLE

=================================================================================
17. MULTI-CATCH (COLLAPSED) CATCH BLOCK
=================================================================================
Several catch blocks can be collapsed into one called multi-catch block. The original exceptions must not have near or far parent-child relation in the Exception tree.

EXAMPLE FOR MULTI-CATCH BLOCK:
//original catch blocks:
catch (ExceptionClassName1 exceptionVariable1) {...}
catch (ExceptionClassName2 exceptionVariable2) {...}
catch (ExceptionClassName3 exceptionVariable3) {...}

//collapsed catch block:
catch (ExceptionClassName1 | ExceptionClassName2 | ExceptionClassName3 exceptionVariable) {...}
END OF EXAMPLE

=================================================================================
18. CHAINED STATEMENTS
=================================================================================
In case a statement has a return value which will be used for an other method, the statements can be attached into a chain.
By using this, less explicit variables can be used since the returned values will not be stored one-by-one but of the last statement.
The code will be more readable, and less variables will be stored.

Formula 1 for chained statements (variable holds the class; no return value for the last statement):
    - variable.method1().method2().method3();

Formula 2 for chained statements (variable holds the first class, return value for the last statement):
    - variable2 = variable.method1().method2().method3();

Formula 3 for chained statements (variable holds the first class; no return value for the last statement):
    - variable.method1().method2().method3();

Formula 4 for chained statements (variable holds the first class; return value for the last statement):
    - variable2 = variable.method1().method2().method3();

These methods will be executed in their respected order.
Every method will result data the next method will work on. That said, new memory will be allocated with all statement.

EXAMPLE FOR CHAINED STATEMENTS 1:
ArrayList<String> sal = new ArrayList<>();
...
sal.stream()
    .filter((p) -> p.startsWith("abc")) //returns Stream
    .map((p) -> p.toUpperCase()) //returns Stream
    .sorted() //returns Stream
    .forEach((p) -> System.out.println(p)); //no returned value
END OF EXAMPLE

EXAMPLE FOR CHAINED STATEMENTS 2:
String s = ...;
String s2 = s
    .toUpperCase() //returns String
    .substring(0, 4); //returns String
END OF EXAMPLE

EXAMPLE FOR CHAINED STATEMENTS 3:
String[] sa = new String[]{...};
StringBuilder sb = new StringBuilder();
for (String s : sa) {
    if (sb.length() == 0) {
        sb.append(s);
    }
    else {
        sb.append(", ").append(s);
        //or:
        sb.append(", ")
            .append(s);
        //or:
        sb
            .append(", ")
            .append(s);
    }
}
END OF EXAMPLE

EXAMPLE FOR CHAINED STATEMENTS 4:
ArrayList<Character> cal = new ArrayList<>();
cal.add('A');
cal.add('b');
cal.add('c');
int index = cal
	.toString() //returns String
	.toUpperCase() //returns String
	.indexOf('B'); //returns int
END OF EXAMPLE

=>BREAK AND CONTINUE STATEMENTS
=>STRINGBUILDER
=>STREAM
=>STRING
=>VARIABLES
=>ITERATION
=>KEYWORDS AND IDENTIFIERS
=>OPERATORS
