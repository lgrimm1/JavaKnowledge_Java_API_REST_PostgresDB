=================================================================================
SPRING.BOOT VALIDATION
=================================================================================
1. GENERALLY
2. SETTING UP
3. DECLARE VALIDITY CONDITION SET
4. METHOD-LEVEL VALIDATION
5. CLASS-LEVEL VALIDATION
6. PARTIAL VALIDATION
7. EXCEPTION HANDLER METHOD
8. STANDARD VALIDATION EXAMPLES
9. CUSTOM VALIDATION ANNOTATION

=>Spring_Boot
=>Spring_Boot_entity_validation
=>Spring_Boot_entity
=>Spring_Boot_controller
=>Spring_Boot_controller_tests

=================================================================================
1. GENERALLY
=================================================================================
The entity object of Spring.Boot manifests an element of the repository. In order to use an entity together with Spring.Data, Spring will use the default constructor of the entity class which means no pre-checking of field values. That said, all data checks should be coded in the Service layer beforehand, e.g. via applying to dedicated validation helper methods.
For keeping data validation with the entity and integrate the validation into the Repository, Service or Communication layers, the Spring Validation extension is used.
The extension contains JSR303 (this will be standard in Java core but Spring implemented it beforehand) and Hibernate Validator (implemented for Spring).
Basically, before an entity object is created, the data will be checked and if not qualify, exception is raised.
Failed validation can be handled via handler method (different answers for different errors) or being totally automatically handled by Spring.Validation.
Validation can be applied to all Spring beans.

Validation declared on fields of a class creates a validation layer above the class. That said, belongs to that class entirely as a condition set.
In case the same class should have more than one validation rule set, either create independent classes per condition set or write validation method(s) for the class in the Business layer.

Failed validation will raise a certain exception with an exception message declared with the condition for which the validation failed.
Coming from Spring, the exception will instruct the Communication layer that instead of success, a HTTP error code and that message will be sent towards the frontend.
In order to have that message included into the HTTP response, two conditions must be met:
    a. the return object (or primitive) type of the corresponding controller method must be String or ResponseEntity<T> (object and model&view modes)
    b. the custom exception message output must be allowed in the application.properties config file
The config file should have this line:
    server.error.include-message=always
If the conditions above are not met, with the exception a JPA default message will be sent, see below.

=================================================================================
2. SETTING UP
=================================================================================
In order to address the framework, the following tags should be inserted into pom.xml.
After these modifications, type "mvn compile" to make Maven to find and install all what needed.

If there is not, create a block under the properties block:
    <dependencies>
    </dependencies>
Then inside, add the next (it is possible to define version tag with all dependencies, in case no version tag, the best compatible version will be used by Maven):
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>
Spring.Validation will not work without dependencies of Spring.Boot framework since it is an extension of the framework. See the Setting up section there.

Alternatively, use Spring Initializr to create a ready-to-use empty project with Validation added.

=================================================================================
3. DECLARE VALIDITY CONDITION SET
=================================================================================
Checking the data when an instance is created from the entity class and filled with incoming values, can be done by several ways:
    a. the constructor uses default values when data is not appropriate (in case of JPA which uses default constructor, this is not a good way, and frontend will not receive error)
    b. the service manipulates the object values (will not be visible in the entity class, frontend can receive error if coded that way)
    c. the controller manipulates data (and sends error to frontend in return value, coding is still needed)
    c. valid data is defined in entity class, the Spring.Boot will check validity at controller endpoint (automatically sent error if needed without entering to controller method with the flow)

For data validity, automatism is preferred and prevents unnecessary coding (best practice).
Automatism is reached by using validation annotations.
In case no parameter is added to such annotation, using brackets of that annotation is optional.

The next annotations can mark object or wrapper fields for validation:
    a. @NotNull
    b. @Null
Because the validation can be applied for null values as well, together with Validation annotations, beware using Spring's @NonNull annotation in front of constructor and setter method argument because that annotation prevents reaching the Validation annotation but raises exception beforehand, uncontrollable.

The next annotations can mark String fields for validation:
    a. @NotBlank (not null and trimmed length is greater than zero)
    b. @NotEmpty
    c. @Size(min = minimumNumberOfCharacters)
    d. @Size(max = maximumNumberOfCharacters)
    e. @Size(min = minimumNumberOfCharacters, max = maximumNumberOfCharacters)
    f. @Length(numberOfCharacters)
    g. @Email
    g. @URL
    i. @Pattern(regexp = "regexpString") (e.g. "[0-9 | A-Z | a-z | -_\u00e4\u00f6\u00fc\u00c4\u00d6\u00dc\u00df]+" or "[\\-]?[0-9]{1,13}\\.[0-9]{0,4}" or "AT(XXX|[0-9]{3})")

The next annotations can mark number fields for validation:
    a. @Min([value = ]minimumValue)
    b. @Max([value = ]maximumValue)
    d. @Digits(numberOfDigits)
    e. @Negative
    f. @NegativeOrZero
    g. @Positive
    h. @PositiveOrZero
    i. @NumberFormat(pattern = "###,###.##")
    j. @DecimalMin(value = "minimumDoubleValue"[, inclusive = false]) (value as literal)
    k. @DecimalMax(value = "maximumDoubleValue"[, inclusive = false]) (value as literal)
    l. @Currency
    m. @EAN
    n. @ISBN
    o. @CreditCardNumber

The next annotations can mark date and time fields for validation:
    a. @Past (value is in the past)
    b. @PastOrPresent
    c. @Future (value is in the future)
    d. @FutureOrPresent
    e. @DateTimeFormat(pattern = "MM/dd/yyyy")

The next annotations can mark List fields for validation:
    a. @Size(min = minimumNumberOfElements)
    b. @Size(max = maximumNumberOfElements)
    c. @Size(min = minimumNumberOfElements, max = maximumNumberOfElements)

Every annotation can have optional parameter:
    message = "..." (sends message to the frontend in case of invalidity, along with HTML error code)

EXAMPLE FOR SETTING FIELD CHECKS:
package PackageName;

import jakarta.validation.constraints.*;
import org.hibernate.validator.constraints.*;
import org.springframework.format.annotation.*;

@Entity
public class EntityClass {
    @NotNull @Size(min = 5, max = 10)
    private String password;

    @Min(value = 1, message = "Minimum 1.") @Max(value = 10, message = "Maximum 10.")
    private int numberOfConnections;

    //not-validated fields, constructors, getters, setters etc.
}

=================================================================================
4. METHOD-LEVEL VALIDATION
=================================================================================
At the place of validation (e.g. at controller or service method) the @Valid annotation must be used in front of the proper incoming argument.
In case of nested entity classes, validation of the nested class happens in the container class.
In case the whole object is not filled with data for checked fields (e.g. the incoming model fills 2 fields from 4), this type of validation fails for the whole object.

In case the validation fails, MethodArgumentNotValidException is raised and HTTP400 error code is sent back. The default message will be "Validation failed for object='objectName'. Error count: 1".

EXAMPLE FOR VALIDATING IN CONTROLLER METHOD SIGNATURE:
public String methodName(@Valid ClassName variableName) {...}
public String methodName(@Valid @ModelAttribute("HTMLAttributeName") ClassName variableName) {...}
public ResponseEntity<String> methodName(@Valid ClassName variableName) {...}
public ResponseEntity<String> methodName(@Valid @ModelAttribute("HTMLAttributeName") ClassName variableName) {...}
END OF EXAMPLE

EXAMPLE FOR NESTED ENTITY CLASS VALIDATION:
public class NestedEntityClass {
    @NotBlank
    private FieldType fieldName;
}
public class ContainerEntityClass {
    @Valid
    @NotNull
    private NestedEntityClass nestedFieldName;

    //other fields
}

=================================================================================
5. CLASS-LEVEL VALIDATION
=================================================================================
It is possible to mark a whole class for obligatory validation.
That said, no call of validation will be needed on caller side, and every attempt to create an instance of the marked class, will check the data for validity first.
In case the entire object is not filled with data for checked fields (e.g. the incoming model fills 2 fields from 4), validation fails for the entire object.

In case the validation fails, IllegalStateException is raised and HTTP500 error code is sent back. The default message will be "Could not commit JPA transaction".

EXAMPLE FOR CLASS-LEVEL VALIDATION:
import org.springframework.validation.annotation.*;

@Validated
public class ClassName {...}

=================================================================================
6. PARTIAL VALIDATION
=================================================================================
In case not the whole object should be validated (e.g. user authentication in two steps), instead of using simply the @Valid annotation in-place of checking, the next steps are needed:
    a. divide the marked-for-validation fields into groups
    b. validate only a group at a time

In order to define validation groups, every annotation can have an additional parameter:
    groups = ClassName.class
The ClassName marks a form at frontend side in which the check will be called.
In case the parameter above is defined on a field, calling partial validation on that group, checks will be done for only the correspondent validation group.
At the place of validation (e.g. at controller or service method) the @Validated(ClassName.class) annotation must be used in front of the proper incoming argument.
It is not an obligation to use ClassName for group name, instead, any name can do.

In case the argument on caller side which is marked with @Validated annotation, can receive a List (@RequestBody) or String (@RequestParam), the validation check will not be started.
If possible, avoid using this kind of validation technique if such issue can appear.

In case the validation fails, MethodArgumentNotValidException is raised and HTTP400 error code is sent back. The default message will be "Validation failed for object='objectName'. Error count: 1".

=================================================================================
7. EXCEPTION HANDLER METHOD
=================================================================================
In case validation fails (wrong data) the MethodArgumentNotValidException or IllegalStateException exception is raised. These exceptions can be handled optionally for getting different error messages on backend side or leave the handler and the backend will send a general HTTP400 error (HttpStatus.BAD_REQUEST) or HTTP500 (HttpStatus.INTERNAL_SERVER_ERROR) towards the caller. The message part will contain the message set via annotation.
Via using handler method, it becomes possible to send all raised validation errors to caller in a response body (in a Map object).

This technique is needed when the response object is not a String nor a ResponseEntity.

See below.

=================================================================================
8. STANDARD VALIDATION EXAMPLES
=================================================================================
EXAMPLE FOR ENTITY DECLARATION (VALIDATION):
package PackageName;

import jakarta.validation.constraints.*;
import org.hibernate.validator.constraints.*;
import org.springframework.format.annotation.*;

@Entity
public class EntityClass {
    //conditionAnnotations(..., message = errorMessage)
    private fieldType fieldName;

    //other validated fields
    //not-validated fields, constructors, getters, setters etc.
}

EXAMPLE FOR CONTROLLER DECLARATION (VALIDATION):
package PackageName;

import org.springframework.beans.factory.annotation.*;
import org.springframework.http.*;
import org.springframework.lang.*;
import org.springframework.stereotype.Controller;
import org.springframework.validation.annotation.*;
import org.springframework.web.bind.annotation.*;
import jakarta.validation.*;

@RestController
@RequestMapping(value = "/api/v1", consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
public class Controller {
	private final Service service;

	@Autowired
	public Controller(Service service) {
		this.service = service;
	}
}

EXAMPLE FOR CONTROLLER METHOD (VALIDATION, OBJECT MODE, RESPONSE ENTITY):
@PutMapping("/new")
public ResponseEntity<String> controllerMethodName(@RequestBody EntityClassName entity) {
    //calling service method
    return ResponseEntity.ok("Successful.");
}

EXAMPLE FOR CONTROLLER METHOD (VALIDATION, MODEL&VIEW MODE, BINDING RESULT):
@PutMapping("/new")
public String controllerMethodName(@RequestBody @Valid EntityClassName entity, BindingResult bindingResult, Model model) {
    if (bindingResult.hasErrors()) {
		return originalTemplateName;
	}
	//calling service method
	model.addAttribute("entity", entity);
    return successTemplateName;
}

EXAMPLE FOR EXCEPTION HANDLER CONTROLLER METHOD (METHOD-LEVEL VALIDATION, HTTP400):
@ResponseStatus(HttpStatus.BAD_REQUEST)
@ExceptionHandler(MethodArgumentNotValidException.class)
public Map<String, String> handleValidationExceptions(MethodArgumentNotValidException ex) {
    Map<String, String> errors = new HashMap<>();
    ex.getBindingResult().getAllErrors().forEach((error) -> {
        String fieldName = ((FieldError) error).getField();
        String errorMessage = error.getDefaultMessage();
        errors.put(fieldName, errorMessage);
    });
    return errors;
}

EXAMPLE FOR EXCEPTION HANDLER CONTROLLER METHOD (CLASS-LEVEL VALIDATION, HTTP500):
@ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)
@ExceptionHandler(IllegalStateException.class)
public Map<String, String> handleValidationExceptions(IllegalStateException ex) {
    Map<String, String> errors = new HashMap<>();
    ex.getBindingResult().getAllErrors().forEach((error) -> {
        String fieldName = ((FieldError) error).getField();
        String errorMessage = error.getDefaultMessage();
        errors.put(fieldName, errorMessage);
    });
    return errors;
}

EXAMPLE FOR MOCKED CONTROLLER TEST METHOD (VALIDATION PASSES):
@Test
public void whenValidEntity_thenCorrectResponse() throws Exception {
    MediaType textPlainUtf8 = new MediaType(MediaType.TEXT_PLAIN, Charset.forName("UTF-8"));
    String incomingJSON = "{...}"; //proper data
    mockMvc
            .perform(MockMvcRequestBuilders.post("/endpoint")
                    .content(incomingJSON)
                    .contentType(MediaType.APPLICATION_JSON_UTF8))
            .andExpect(MockMvcResultMatchers.status().isOk())
            .andExpect(MockMvcResultMatchers.content()
                    .contentType(textPlainUtf8));
}

EXAMPLE FOR MOCKED CONTROLLER TEST METHOD (VALIDATION FAILS):
@Test
public void whenInvalidEntity_thenCorrectResponse() throws Exception {
    String incomingJSON = "{...}"; //wrong data
    mockMvc
            .perform(MockMvcRequestBuilders.post("/endpoint")
                    .content(incomingJSON)
                    .contentType(MediaType.APPLICATION_JSON_UTF8))
            .andExpect(MockMvcResultMatchers.status().isBadRequest())
            .andExpect(MockMvcResultMatchers.jsonPath("$.fieldName", Is.is(errorMessage)))
            .andExpect(MockMvcResultMatchers.content()
                    .contentType(MediaType.APPLICATION_JSON_UTF8));
}

=================================================================================
9. CUSTOM VALIDATION ANNOTATION
=================================================================================
In case of need of checking validity of a custom class or need of custom check on any class, custom validation is needed.
Creation of such validation is reached via three steps:
    a. declare custom checking method
    b. declare custom annotation for the custom checking method
    c. marking the proper fields for custom validation in the entity

The example below shows a solution for validating of the next field:
    private String phone;

EXAMPLE FOR CUSTOM VALIDATION METHOD:
package packageName;

import jakarta.validation.ConstraintValidator;
import jakarta.validation.ConstraintValidatorContext;

public class PhoneValidator implements ConstraintValidator<Phone, String> {

	@Override
	public void initialize(Phone paramA) {
	}

	@Override
	public boolean isValid(String phoneNo, ConstraintValidatorContext ctx) {
		if (phoneNo == null) {
			return false;
		}
		//validate phone numbers of format "1234567890"
        if (phoneNo.matches("\\d{10}")) {
            return true;
        }
        //validating phone number with -, . or spaces
        else if (phoneNo.matches("\\d{3}[-\\.\\s]\\d{3}[-\\.\\s]\\d{4}")) {
            return true;
        }
        //validating phone number with extension length from 3 to 5
        else if (phoneNo.matches("\\d{3}-\\d{3}-\\d{4}\\s(x|(ext))\\d{3,5}")) {
            return true;
        }
        //validating phone number where area code is in braces ()
        else if (phoneNo.matches("\\(\\d{3}\\)-\\d{3}-\\d{4}")) {
            return true;
        }
        //return false if nothing matches the input
        else {
            return false;
        }
	}
}

EXAMPLE FOR DECLARING CUSTOM VALIDITY ANNOTATION (@PHONE):
package packageName;

import java.lang.annotation.Documented;
import java.lang.annotation.Retention;
import java.lang.annotation.Target;
import java.lang.annotation.ElementType;
import java.lang.annotation.RetentionPolicy;

import jakarta.validation.Constraint;
import jakarta.validation.Payload;

@Documented
@Constraint(validatedBy = PhoneValidator.class)
@Target({ElementType.METHOD, ElementType.FIELD})
@Retention(RetentionPolicy.RUNTIME)
public @interface Phone {
    String message() default "{Phone}";
    Class<?>[] groups() default {};
    Class<? extends Payload>[] payload() default {};
}

EXAMPLE FOR DECLARATION OF ENTITY (CUSTOM FIELD VALIDATION):
package PackageName;

import jakarta.validation.constraints.*;
import org.hibernate.validator.constraints.*;
import org.springframework.format.annotation.*;

@Entity
public class EntityClass {
    @Phone(message = errorMessage) //or:
    @Phone
    private String phoneNumber;

    //other validated fields
    //not-validated fields, constructors, getters, setters etc.
}
