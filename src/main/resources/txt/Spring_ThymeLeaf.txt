=================================================================================
SPRING THYMELEAF
=================================================================================
1. GENERALLY
2. SETTING UP
3. TEMPLATES
4. FORMS
5. EXAMPLES

=================================================================================
1. GENERALLY
=================================================================================
The Spring ThymeLeaf is part of the Spring framework which enables using automated templates of frontend for backend communication in model&view or object/model&view mode.
A template is an JSON/HTML/XML/etc. page into which the answer is injected via defining HTML variables and e.g. Javascript codes.

On frontend side, different file formats can be used, e.g. HTML or PHP.
The frontend communicates with the backend through the Communication layer of the backend.
Basically, the frontend sends requests to the backend on which the backend sends answers like a normal website would do.
The answers are data which can be rendered into HTML, PHP etc. pages.
Above the pages, frontend scripts can form an other layer with which data manipulation, visual elements etc. can be managed, also the data sent back to the server.

=================================================================================
2. SETTING UP
=================================================================================
In order to address ThymeLeaf, the following tags should be inserted into pom.xml.
After these modifications, type "mvn compile" to make Maven to find and install all what needed.

If there is not, create a block under the properties block:
    <dependencies>
    </dependencies>
Then inside, add the next (it is possible to define version tag with all dependencies, in case no version tag, the best compatible version will be used by Maven):
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>

Spring ThymeLeaf will not work without dependencies of Spring Boot since it is build upon the framework. See the Setting up section there.

Alternatively, use Spring Initializr to generate a new empty project with added ThymeLeaf.

=================================================================================
3. TEMPLATES
=================================================================================
The server answer (if there is any) sends message to the frontend via filling out a template and sending that template to caller client (e.g. browser).
For a template, HTML, JSON etc. files can be created.
The templates are placed under the src/main/resources/templates folder.
In case of external CSS style, the .css file must be placed into the src/main/resources/static folder. For more, visit the CSS page.
A template can be created in design-time and in run-time as well, latter before reaching it via GET, POST etc. queries.

EXAMPLE FOR A GENERAL THYMELEAF HTML TEMPLATE:
<!DOCTYPE HTML>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Title</title>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
</head>
<body>
<!-- code -->
<script>
    <!-- script codes -->
</script>
</body>
</html>
END OF EXAMPLE

In the template, in case the ThymeLeaf is referenced in the <html> tag, within almost all HTML tags the th:... parameters can be used (th refers to ThymeLeaf). Such parameters are for handling data accessed through Spring Boot via ThymeLeaf. In case no such data is accessed in a tag, th parameters should be avoided.
ThymeLeaf parameters can be defined in two variants of HTML tags:
    a. opened tag: <tag_name parameters />
    b. closed tag: <tag_name parameters>...</tag_name>
Please note that opened tags are not supported by all browsers.

The general formula for using a tag parameter follows the HTML standards (parameter_name="'value'" for character and text, parameter_name="value" otherwise).
Also from the standards, some parameters do not have value, in this case there is no ="'value'" or ="value" after the parameter_name.
For controls (inputs), the on...= parameters (e.g. onclick=, onload=) are used for event-driven actions (e.g. onclick="script_method(this)").
For referring script methods, use parameter_name="method_name(argument)" formula.
For size-like parameters (e.g. width=, height=), px and % units are accepted (e.g. width="80%" height="50px"). Please note, there is no space between the amount and the unit.
The class= parameter defines named CSS style name (e.g. class="h4_style"), visit the CSS page for details.
The style= parameter can hold local CSS codes (e.g. style="width=80%; height=50px"); visit the CSS page for details.
The id= parameter defines a text by which the control can be identified (e.g. id="control_identifier").
The for= parameter marks that by its name, the control is for which other control (e.g. for="control_identifier"). Mainly used with <label> tags which will be visible only when the marked control is visible.

The template tag parameters can be:
    a. th:text= (a text)
    b. th:utext= (a text interpreted as HTML code)
    c. th:each= (iteration through a collection)
    d. th:if= (if the condition is true, does a thing)
    e. th:unless= (if the condition is false, does a thing)
    f. th:switch= (multiple condition for enumerable-type attribute)
    g. th:case= (given variant for switched attribute)

Any variable can be sent in a template, ThymeLeaf recognizes all wrapper classes and theoretically all Collection types. It also can handle classes with subclasses. In order to send a primitive type to a template, convert it to wrapper class. Enums can be used only with tags which are designed to handle limited values e.g. radio input (see later), otherwise use String instead.
A variable carrying data in the template is called HTML attribute. Its name can be different from Java variable name, the connection is made by the Model or ModelAndView classes in Spring Boot, see later.
Attribute names are case-sensitive.
In case the type of Java variable is a class with sub-classes (e.g. a whole entity is sent as HTML attribute), inside that, attribute fields can be accessed by their Java names (case-sensitive).

A template filled with data is called a view in Java.
After preparation, the controller will create a static page under the /static folder and will send a view referring to that static page to the frontend.

The total of data is called model in Java.
Attributes can be added to the model via utilizing Model or ModelAndView classes:
    a. model.addAttribute("attribute_name", object);
    b. modelAndView.addObject("attribute_name", object);

An attribute can be accessed:
    th:object="${attribute_name}"
A field can be accessed (e.g. from within a form or a multiple-value tag with th:each= parameter):
    th:field="${attribute_name.fieldName}"
    th:field="*{fieldName}"
General access:
    th:text="${attribute_name}"
    th:text="${attribute_name.fieldName}"
    th:text="*{fieldName}"
Please note, th:text= and th:utext= are for printing out data while th:object= and th:field= are for printing out and-or returning data (see forms later).

EXAMPLE FOR A THYMELEAF TEMPLATE (JAVA SIDE, VARIABLES):
//single variables
String firstName;
Integer retirementAge;
String htmlCode;

//subclasses-in-a-class type
enum GenderType {
    MALE, FEMALE
}
class Person implements Serializable {
    String lastName;
    Integer age;
    String htmlCode;
    Character gender;
    GenderType genderType;
    //constructors, getters-setters
}

//subclasses-in-a-class variable
Person p = new Person(...);

//collection variable
List<Person> personList = ...;

//add data by variables, literals or objects, to a Model or ModelAndView
model.addAttribute("first_name", firstName);
model.addAttribute("retirement_age", retirementAge);
model.addAttribute("html_code", htmlCode);
model.addAttribute("person", person);
model.addAttribute("person_list", personList);
END OF EXAMPLE

EXAMPLE FOR A THYMELEAF TEMPLATE (HTML SIDE, ATTRIBUTES):
//template:
<!DOCTYPE HTML>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Title</title>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
</head>
<body>
<!-- single attributes: -->
<p th:text="'Hello, ' + ${name} + '!'" />
<span th:text="'Retirement age: ' + ${retirement_age}" />
<div th:utext="${html_code}" />
<!-- subclasses-in-a-class attribute: -->
<p th:text="'Name: ' + ${person.lastName}" />
<p th:text="'Age: ' + ${person.age}" />
<div th:utext="${person.htmlCode}" />
<table>
    <tr>
        <th>NAME</th><th>AGE</th><th>RETIRED</th>
    </tr>
    <!-- collection attribute: -->
    <tr th:each="person: ${person_list}">
        <td th:text="${person.name}"/>
        <td th:text="${person.age}"/>
        <div th:utext="${person.htmlCode}" />
        <!-- conditional attribute: -->
        <td>
            <span th:if="${person.age} >= ${retirement_age}" th:text="'YES'"/>
            <span th:unless="${person.age} >= ${retirement_age}" th:text="'NO'"/>
        </td>
        <!-- switched attribute: -->
        <td th:switch="${person.gender}">
            <span th:case="'M'" th:text="'male'"/>
            <span th:case="'F'" th:text="'female'"/>
        </td>
        <td th:switch="${person.genderType}">
            <span th:case="MALE" th:text="'male'"/>
            <span th:case="FEMALE" th:text="'female'"/>
        </td>
    </tr>
</table>
</body>
</html>
END OF EXAMPLE

=================================================================================
4. FORMS
=================================================================================
In case the value(s) are needed to be sent back to backend, must use form(s) on the page, otherwise the template serves as an output page.
In order to create and use forms, 3 main steps are needed:
    a. a request which invokes a template which carries the form on server side
    b. the activated form on client side, sends a request to server with filled data at submit
    c. a POST request handler on server side
When the first GET, POST etc. request arrives in, the backend prepares the form template and sends it back to the client. The form at Submit sends a defined request to the backend with the filled data which is processed there.

In the template the <form> tag header contains these parameters:
    a. th:action="@{/endpoint_name}": on this endpoint the submit request will be sent
    b. th:object="${object-attribute_name}": this attribute is received and sent by the form, contains data presented with the form
    c. autocomplete="on_or_off": for all inputs, forces the browser to suggest complete values based upon a few typed characters
    d. method="post": defines what request the form must send when the user submits
    e. novalidate: no input value validation will happen when submitting (validation on server side)
    f. id="form_name": unique name of the form with which actions etc. can refer to it

In the template all data which should be sent back, are rendered into input tags and similar as parameter.
HTML parameters depend on the tag and the input type.
If the <input> tag contains object or field data:
    a. type="text", type="number" or type="checkbox" etc.: the input-type
    b. th:object="${attribute_name}" or th:field="${attribute_name.fieldName}" or th:field="*{fieldName}": the contained data
    c. value="default_value" or ="'default_value'": fill the input with default value, Reset renders back to this; should not be defined if the form is bound via ThymeLeaf (it knows the defaults)
If the <input> tag is button-like:
    a. type="submit", type="reset" or type="button": the type of the button-like control (the latter generally used for calling a script method)
    b. value="caption on button": the caption of the button-like control, if not defined, uses local default e.g. Submit, Reset
    c. formaction="/endpoint": define targeted endpoint for submit-type input
    d. formmethod="post": define targeted query type for submit-type input
    e. onclick="script_name" or onclick="alert('message_text')": took action in case of click, or shows a dialog, only for button-type input

In the template the next types can be used for input, data is defined within the opening tag.

||INPUT|INPUT|INPUT|INPUT||
||button|checkbox|color|date||
||datetime-local|email|file|hidden||
||image|month|number|password||
||radio|range|reset|search||
||submit|tel|text|time||
||url|week|-|-||

In the template the next types can be used for input, data is defined between the opening and closing tags.

||INPUT|INPUT||
||select|textarea||

Button:
    a. a button appears
    b. pressing it means invoking a script method
    g. with the above parameters more buttons can be used in a form
    h. the value= parameters defines the button caption

Checkbox:
    a. the checked parameter pre-selects
    b. usually used together with <label> tag which produces the shown text (consider id= and for= parameters)

Color:
    a. the browser shows a color brick button, which will launch a color picker
    b. the value= parameter sets default color, format is #xxxxxx where RGB codes are stored in 2-letter hexa numbers

Date:
    a. the browser shows a divided input field for date with a date picker icon
    b. format in the background is YYYY-MM-DD
    c. shown format follows local settings

Datetime-local:
    a. the browser shows a divided input field for date and time, with a date picker icon
    b. format in the background is YYYY-MM-DD
    c. shown format follows local settings

File:
    a. a Browse button appears, next to it the chosen file name or number of files
    b. the multiple parameter allows the user to enter more than one value

Email:
    the multiple parameter allows the user to enter more than one value

Hidden:
    a. the input will not be visible but can store data needed e.g. for a field of object still needed to be sent back
    b. any developer tools etc. reaches, not proper for secure data

Image:
    a. the src= parameter defines default image file path
    b. the alt="Submit" parameter activates Submit if image is clicked
    c. the width= and height= parameters set presentation dimensions (need in case the page design should be pre-set)
    d. the POST will send X, Y coordinates of the image

Month:
    a. month and year can be asked in
    b. format is YYYY-MM
    c. Firefox and Safari do not support it

Number:
    text-like appearance with spin buttons

Radio:
    a. the value= parameter defines which radio refers to which value of the possible choices
    b. the first choice is the 0th
    c. accepts enum as text
    d. the checked parameter pre-selects
    e. only one can be selected per name= parameter value, per <form> or per <fieldset>
    f. more forms and fieldsets can be used on a page at the same time if needed
    g. usually used together with <label> tag which produces the shown text (consider id= and for= parameters)

Range:
    a. a slider appears
    b. the min= and the max= parameters define the low and high limits
    c. for submit, an integer number will be sent

Reset:
    a. a button appears
    b. pressing it re-sets the initial values of all inputs etc.
    c. the value= parameter sets the caption

Search:
    the input behaves like a text input

Select:
    a. it works as a combobox (scroll-down list) by default, as a list otherwise
    b. the size= parameter defines the number of visible items, and the select will work as a list control, otherwise will work as a combobox
    c. the multiple parameter lets more items to be selected in list control appearance
    d. <option> sub-tags define from which items can be the input value chosen
    e. an <option> tag contains the value= parameter which will be posted
    f. the selected parameter selects an item
    g. by default, for manually defined items, the first option, for dynamically defined items, the last added option fills the input
    h. between the opening and closing markers of an <option> tag the displayed text is written

Submit:
    a. a button appears
    b. pressing it sends the form to the controller
    c. the formaction= parameter can contain endpoint name or URL, reverts the form submit direction
    d. the formmethod= parameter can contain "get", "post", "patch", "delete" values and overwrites the form request type
    e. the formtarget="_blank" opens the target on a new page
    f. the formnovalidate="formnovalidate" reverts from input value validation (overwrites similar settings of the form)
    g. the value= parameter sets the caption
    h. with the above parameters more submit buttons can be used in a form

Textarea:
    a. multi-line text input
    b. the name= parameter defines name of the control
    c. the rows= and cols= parameters define the visible dimensions (same as using style= local settings e.g. style="width:200px; height:600px;")
    d. between the opening and closing markers of the tag the starting text can be written
    e. default height is 3 rows
    f. wraps the content

Time:
    a. the browser shows a divided input field for time
    b. shown format follows local settings

Week:
    a. week can be asked in
    b. Firefox and Safari do not support it

All numerical inputs (number, range, date, datetime-local, month, time, week):
    a. min="minvalue" and max="maxvalue" can be defined as parameter as well
    b. the step="step_value" parameter defines by how many numbers should the value jump when the spin buttons are used (only for number and range)

All text-like inputs (email, password, search, tel, text, url):
    a. the maxlength="max_character_length" parameter can be used, when reaching the limit no new characters can be entered, no message or hint will be shown to the user, if that is not acceptable, writing Javascript code is needed
    b. the pattern="pattern_text" parameter sets how the data will appear in the input, and exactly what characters are accepted in its positions, contains [minValue-maxValue]{validForThisLength} blocks, between blocks any characters can be, e.g. [A-Za-z]{3} or [0-9]{6}-[A-Z]{2}
    c. the placeholder="hint" parameter defines input hint which appears in the empty input with different appearance than the entered data have, appears only when the input is empty
    d. the list="datalist_id" parameter lets the user optionally choose from pre-defined texts (defined in <datalist> tag) when typing letters into the input, matching is based upon containing, the input accepts any value but in case a pre-set choice is exists, will show it in a popup list under the input

All text-like inputs plus color, date pickers, time:
    the autocomplete="on_or_off" parameter forces the browser to suggest complete values based upon a few typed characters, overwrites form settings

All input-types:
    a. the readonly parameter makes the input unchangeable
    b. the disabled parameter sets the input read-only and un-clickable, its value will not be sent when submitting
    c. the required parameter means the input must be filled
    d. the size="size_in_characters" parameter sets the maximum value length of the applicable input type (default is 20)
    e. the autofocus parameter forces the focus on the input when the page loads, use it for one input per page
    f. the form= parameter marks which form the input is part of, it has effect only when in the header of the form the id= parameter is used, such marked inputs can be placed outside the correspondent <form> tag but they still will be part of the correspondent form
    g. the tabindex= parameter defines order of focusing when pressing TAB (e.g. tabindex="2", default is the order in the code)

Restrictions are useful on form-side but via Javascript it is possible to overwrite or get around them. Always check data on server-side.
Without setting width and height for an image, the layout will change as the image loads. For proper design, this should be avoided.
Tags can be grouped by using the <fieldset> tag, see below.
In case an input is not filled by the user, the form will send a null rendered to that HTML attribute as value. Same goes for attributes not distributed for user input on the form.

=================================================================================
5. EXAMPLES
=================================================================================
Visit the SPRING THYMELEAF EXAMPLES page for examples.

MORE HERE: https://www.javatpoint.com/spring-boot-thymeleaf-view
MORE HERE: https://stackoverflow.com/questions/28325708/thymeleaf-how-to-pass-html-to-the-div
MORE HERE: https://www.baeldung.com/spring-boot-crud-thymeleaf
MORE HERE: https://www.baeldung.com/spring-thymeleaf-error-messages

=>WEB APPLICATION
=>SPRING BOOT
=>SPRING BOOT CONTROLLER
=>SERIALIZATION
=>SPRING MODELANDVIEW
=>SPRING THYMELEAF EXAMPLES
=>CSS
