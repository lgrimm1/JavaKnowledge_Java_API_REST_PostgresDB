=================================================================================
SPRING BOOT THYMELEAF FILE STORAGE EXAMPLE
=================================================================================
In order to provide file upload functionality, Spring Boot offers solution for the backend. The frontend is made of ThymeLeaf templates.
For the frontend part, visit the SPRING BOOT THYMELEAF and SPRING BOOT THYMELEAF EXAMPLES pages first.
The uploaded files either can be stored in an /upload folder (on the same level with /scr and /target directories of the project) or in the database (Data JPA is needed). In the latter case, entity class is needed as well.
The example below represents a solution in object/model&view mode.
For dependencies, Spring Boot and Spring Boot ThymeLeaf is required, furthermore, in case the repository points to database, Data JPA and a database dependencies. Visit the SPRING BOOT and SPRING BOOT THYMELEAF pages for the know-how of setting up.

1. DATA MODELS
2. REPOSITORY
3. SERVICE
4. CONTROLLER
5. APPLICATION.PROPERTIES
6. EXCEPTION HANDLING
7. APPLICATION
8. THYMELEAF TEMPLATES

=================================================================================
1. DATA MODELS
=================================================================================
EXAMPLE FOR FILE INFO CLASS:
import java.util.*;

public class FileInfo {
    private String name;
    private String url;

    public FileInfo(String name, String url) {
        this.name = name;
        this.url = url;
    }

    //getters, setters, equals(), hashCode(), toString()
}
END OF EXAMPLE

EXAMPLE FOR PAYLOAD CLASS:
import java.util.*;

public class Payload {
	private String message;
	private List<String> messages;
	private List<FileInfo> fileInfos;

	public Payload() {
	}

	public Payload(String message, List<String> messages, List<FileInfo> fileInfos) {
		this.message = message;
		this.messages = messages;
		this.fileInfos = fileInfos;
	}

    //getters, setters, equals(), hashCode(), toString()
}
END OF EXAMPLE

=================================================================================
2. REPOSITORY
=================================================================================
EXAMPLE FOR FILE STORAGE REPOSITORY (FILE-LEVEL):
import org.springframework.core.io.*;
import org.springframework.stereotype.*;
import org.springframework.util.*;
import org.springframework.web.multipart.*;

import java.io.*;
import java.net.*;
import java.nio.file.*;
import java.util.stream.*;

@Repository
public class FileInFolderRepository {

	private final Path root = Paths.get("./uploads");

	public void init(boolean deleteAllFromStorage) {
		if (deleteAllFromStorage) {
			FileSystemUtils.deleteRecursively(root.toFile());
		}
		try {
			Files.createDirectories(root);
		}
		catch (IOException e) {
			throw new RuntimeException("Could not initialize folder for upload!");
		}
	}

	public Resource load(String filename) {
		try {
			Path file = root.resolve(filename);
			Resource resource = new UrlResource(file.toUri());
			if (resource.exists() || resource.isReadable()) {
				return resource;
			}
			else {
				throw new RuntimeException("Could not read the file!");
			}
		}
		catch (MalformedURLException e) {
			throw new RuntimeException("Error: " + e.getMessage());
		}
	}

	public Stream<Path> loadAll() {
		try {
			return Files
					.walk(this.root, 1)
					.filter(path -> !path.equals(this.root))
					.map(this.root::relativize);
		}
		catch (IOException e) {
			throw new RuntimeException("Could not load the files!");
		}
	}

	public void save(MultipartFile file) {
		try {
			Files.copy(file.getInputStream(), this.root.resolve(file.getOriginalFilename()));
		}
		catch (Exception e) {
			if (e instanceof FileAlreadyExistsException) {
				throw new RuntimeException("A file of that name already exists.");
			}
			throw new RuntimeException(e.getMessage());
		}
	}

	public boolean delete(String filename) {
		try {
			Path file = root.resolve(filename);
			return Files.deleteIfExists(file);
		}
		catch (IOException e) {
			throw new RuntimeException("Error: " + e.getMessage());
		}
	}

	public long deleteAll() {
		try {
			return Files
					.walk(this.root, 1)
					.filter(path -> !path.equals(this.root))
					.map(Path::toFile)
					.map(File::delete)
					.filter(success -> success)
					.count();
		}
		catch (IOException e) {
			return 0;
		}
	}

	public long count() {
		try {
			return Files
					.walk(this.root, 1)
					.filter(path -> !path.equals(this.root))
					.count();
		}
		catch (IOException e) {
			return -1;
		}
	}
}
END OF EXAMPLE

=================================================================================
3. SERVICE
=================================================================================
EXAMPLE FOR FILE STORAGE SERVICE:
import org.springframework.beans.factory.annotation.*;
import org.springframework.core.io.*;
import org.springframework.http.*;
import org.springframework.stereotype.*;
import org.springframework.web.multipart.*;
import org.springframework.web.servlet.*;
import org.springframework.web.servlet.mvc.method.annotation.*;

import java.nio.file.*;
import java.util.*;
import java.util.stream.*;

@Service
public class FileService {

	private final FileInFolderRepository fileInFolderRepository;

	@Autowired
	public FileService(FileInFolderRepository fileInFolderRepository) {
		this.fileInFolderRepository = fileInFolderRepository;
	}

	public void init(boolean deleteAllFromStorage) {
		fileInFolderRepository.init(deleteAllFromStorage);
	}

	public ModelAndView newFile() {
		Payload payload = new Payload(
				null,
				null,
				null);
		return new ModelAndView("upload", "payload", payload);
	}

	public ModelAndView uploadFile(MultipartFile file) {
		String message;
		try {
			fileInFolderRepository.save(file);
			message = file.getOriginalFilename() + " file has been successfully uploaded.";
		}
		catch (Exception e) {
			message = "Could not upload the file: " + file.getOriginalFilename() + ". Error: " + e.getMessage();
		}
		Payload payload = new Payload(
				message,
				null,
				convertPathStreamToFileInfoList(fileInFolderRepository.loadAll())
		);
		return new ModelAndView("file_list", "payload", payload);
	}

	public ModelAndView uploadFiles(MultipartFile[] files) {
		List<String> messages = new ArrayList<>();
		messages.add("Results of file upload:");
		Arrays.stream(files)
				.forEach(file -> {
					try {
						fileInFolderRepository.save(file);
						messages.add(file.getOriginalFilename() + ": [Successful]");
					}
					catch (Exception e) {
						messages.add(file.getOriginalFilename() + ": <Failed>. Error: " + e.getMessage());
					}
				});
		Payload payload = new Payload(
				null,
				messages,
				convertPathStreamToFileInfoList(fileInFolderRepository.loadAll())
		);
		return new ModelAndView("file_list", "payload", payload);
	}

	public ModelAndView getListFiles() {
		Payload payload = new Payload(
				null,
				null,
				convertPathStreamToFileInfoList(fileInFolderRepository.loadAll())
		);
		return new ModelAndView("file_list", "payload", payload);
	}

	public ResponseEntity<Resource> getFile(String filename) {
		Resource file = fileInFolderRepository.load(filename);
		return ResponseEntity
				.ok()
				.header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"" + file.getFilename() + "\"")
				.body(file);
	}

	public ModelAndView deleteFile(String filename) {
		String message;
		try {
			boolean existed = fileInFolderRepository.delete(filename);
			if (existed) {
				message = filename + " file has been deleted.";
			}
			else {
				message = filename + " file does not exist!";
			}
		}
		catch (Exception e) {
			message = "Could not delete the file: " + filename + ". Error: " + e.getMessage();
		}
		Payload payload = new Payload(
				message,
				null,
				convertPathStreamToFileInfoList(fileInFolderRepository.loadAll())
		);
		return new ModelAndView("file_list", "payload", payload);
	}

	public ModelAndView deleteAllFiles() {
		long count = fileInFolderRepository.count();
		long deleted = fileInFolderRepository.deleteAll();
		Payload payload = new Payload(
				deleted + " of " + count + " file(s) has been deleted.",
				null,
				convertPathStreamToFileInfoList(fileInFolderRepository.loadAll())
		);
		return new ModelAndView("file_list", "payload", payload);
	}

	public ModelAndView handleMaxSizeException() {
		Payload payload = new Payload(
				"One of selected files is too large!",
				null,
				convertPathStreamToFileInfoList(fileInFolderRepository.loadAll())
		);
		return new ModelAndView("file_list", "payload", payload);
	}

	private List<FileInfo> convertPathStreamToFileInfoList(Stream<Path> pathStream) {
		return pathStream.map(path -> {
					String filename = path.getFileName().toString();
					String url = MvcUriComponentsBuilder
							.fromMethodName(FileController.class, "getFile", path.getFileName().toString())
							.build()
							.toString();
					return new FileInfo(filename, url);
				})
				.collect(Collectors.toList());
	}
}
END OF EXAMPLE

=================================================================================
4. CONTROLLER
=================================================================================
EXAMPLE FOR FILE STORAGE CONTROLLER:
import org.springframework.beans.factory.annotation.*;
import org.springframework.core.io.*;
import org.springframework.http.*;
import org.springframework.ui.*;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.*;
import org.springframework.web.servlet.*;

@RestController
public class FileController {

	private final FileService fileService;

	@Autowired
	public FileController(FileService fileService) {
		this.fileService = fileService;
	}

	@GetMapping("/")
	public ModelAndView homepage(Model model) {
		model.asMap().clear();
		return fileService.getListFiles();
	}

	@GetMapping("/files/new")
	public ModelAndView newFile(Model model) {
		model.asMap().clear();
		return fileService.newFile();
	}

	@PostMapping("/files/upload/single")
	public ModelAndView uploadFile(@RequestParam("file") MultipartFile file, Model model) {
		model.asMap().clear();
		return fileService.uploadFile(file);
	}

	@PostMapping("/files/upload/multiple")
	public ModelAndView uploadFiles(@RequestParam("files") MultipartFile[] files, Model model) {
		model.asMap().clear();
		return fileService.uploadFiles(files);
	}

	@GetMapping("/files")
	public ModelAndView getListFiles(Model model) {
		model.asMap().clear();
		return fileService.getListFiles();
	}

	@GetMapping("/files/{filename:.+}")
	public ResponseEntity<Resource> getFile(@PathVariable String filename) {
		return fileService.getFile(filename);
	}

	@PostMapping("/files/delete/{filename:.+}")
	public ModelAndView deleteFile(@PathVariable String filename, Model model) {
		model.asMap().clear();
		return fileService.deleteFile(filename);
	}

	@PostMapping("/files/empty")
	public ModelAndView deleteAllFiles(Model model) {
		model.asMap().clear();
		return fileService.deleteAllFiles();
	}
}
END OF EXAMPLE

=================================================================================
5. APPLICATION.PROPERTIES
=================================================================================
EXAMPLE FOR FILE STORAGE UPLOAD LIMITS:
spring.servlet.multipart.max-file-size=1MB
spring.servlet.multipart.max-request-size=1MB
END OF EXAMPLE

=================================================================================
6. EXCEPTION HANDLING
=================================================================================
EXAMPLE FOR FILE STORAGE EXCEPTION HANDLING OF EXCEEDING MAX UPLOAD SIZE:
import org.springframework.web.multipart.MaxUploadSizeExceededException;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.servlet.*;

import javax.annotation.*;

@ControllerAdvice
public class FileExceptionAdvice {

	@Resource
	FileService fileService;

	@ExceptionHandler(MaxUploadSizeExceededException.class)
	public ModelAndView handleMaxSizeException(MaxUploadSizeExceededException e, Model model) {
		model.asMap().clear();
		return fileService.handleMaxSizeException();
	}
}
END OF EXAMPLE

=================================================================================
7. APPLICATION
=================================================================================
EXAMPLE FOR FILE STORAGE APPLICATION (INITIALIZATION AT STARTUP):
import javax.annotation.Resource;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class Main implements CommandLineRunner {

	@Resource
	FileService fileService;

	public static void main(String[] args) {
		SpringApplication.run(Main.class, args);
	}

	@Override
	public void run(String... arg) throws Exception {
		fileService.init(false);
	}
}
END OF EXAMPLE

=================================================================================
8. THYMELEAF TEMPLATES
=================================================================================
EXAMPLE FOR FILE STORAGE TEMPLATES:
<!-- head fragment: -->
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
  <title>File Storage Example</title>
</head>

<!-- header fragment: -->
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<header>
    <a th:href="@{/files/new}">Upload File(s)</a>
    &nbsp;
    <a th:href="@{/files}">List of Files</a>
</header>

<!-- upload.html: -->
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head th:replace="~{/fragments/head.html::head}" />
<body>
<header th:replace="~{/fragments/header.html::header}" />
<form th:object="${payload}" method="post" enctype="multipart/form-data">
    <h2>File Upload</h2>
    <table>
        <tr>
            <th>Upload Type</th>
            <th>File Selection</th>
            <th>Action</th>
        </tr>
        <tr>
            <td>Single</td>
            <td>
                <input type="file" name="file" />
            </td>
            <td>
                <input type="submit" value="Upload" formaction="/files/upload/single" />
            </td>
        </tr>
        <tr>
            <td>Multiple</td>
            <td>
                <input type="file" name="files" multiple />
            </td>
            <td>
                <input type="submit" value="Upload" formaction="/files/upload/multiple" />
            </td>
        </tr>
    </table>
</form>
</body>
</html>

<!-- file_list.html: -->
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head th:replace="~{/fragments/head.html::head}" />
<body>
<header th:replace="~{/fragments/header.html::header}" />
<form th:object="${payload}">
    <h2>List of Files</h2>
    <div th:unless="*{message} == null" th:text="*{message}" />
    <div th:unless="*{messages} == null" th:each="message : *{messages}">
        <span th:text="${message}"></span><br>
    </div>
    <br>
    <div th:if="*{fileInfos.size() > 0}" th:text="*{fileInfos.size()} + ' file(s).'" />
    <div th:unless="*{fileInfos.size() > 0}">No Files.</div>
    <br>
    <div>
        <table>
            <tr>
                <th>File Name</th>
                <th>Link</th>
                <th>Actions</th>
            </tr>
            <tr th:if="*{fileInfos.size() == 0}">
                <td>-</td>
                <td>-</td>
                <td>-</td>
            </tr>
            <tr th:each="file : *{fileInfos}">
                <td th:text="${file.name}" />
                <td><a th:href="@{${file.url}}">Download</a></td>
                <td>
                    <input type="submit" value="Delete" th:formaction="'/files/delete/' + ${file.name}" formmethod="post" />
                </td>
            </tr>
        </table>
        <br>
        <input type="submit" value="Delete All" formaction="/files/empty" formmethod="post" />
    </div>
</form>
</body>
</html>
END OF EXAMPLE

=>SPRING BOOT
=>SPRING BOOT THYMELEAF
=>SPRING BOOT THYMELEAF EXAMPLES
=>SPRING BOOT THYMELEAF TEMPLATE FRAGMENTATION
=>SPRING APPLICATION PROPERTIES
=>SPRING BOOT CONTROLLER
