=================================================================================
SPRING DATA JPA
=================================================================================
This framework is designed to make a bridge between backend repositories and databases.
Operations are a bit different when used together with Spring Boot since Spring Boot is designed to be the top bridge above different Spring frameworks.
The JPA stands for Jakarta Persistence API (formerly Java Persistence API).

1. QUERY IN ARRAY COLUMN

=>SPRING BOOT REPOSITORY

1. QUERY IN ARRAY COLUMN
=================================================================================
Some of the databases offer array-based versions of their column types such as integer[] or text[].
Their counterparts in Java can be (following the example above) int[] or String[], or Collection type (List of Integer, List of String).
Spring Boot pairs these types automatically.
In case Data JPA is used but without Spring Boot, queries accessing these arrays are not obvious, converting the column values to a String is necessary before a query method with that column would be invoked.
In other ways, upon comparing data in query method, the array-type column must be converted into String first, then the comparing will be invoked on the String.

A query in SQL would be like this:
    select * from employee where ARRAY_TO_STRING(keywords, ‘,’) LIKE ‘%lunch%’;

Defining the ARRAY_TO_STRING SQL method above needs the steps below:
    a. define a custom dialect to register the sql function in JPA

EXAMPLE FOR DEFINITION OF CUSTOM DIALECT:
public class CustomDialect extends PostgreSQL94Dialect {
    public CustomDialect() {
        super();
        registerFunction("array_to_string", new StandardSQLFunction("array_to_string"));
    }
}
END OF EXAMPLE

//TODO https://blog.knoldus.com/querying-array-of-string-using-jpa-specification/
//TODO https://www.baeldung.com/java-hibernate-map-postgresql-array
