=================================================================================
SORTEDSET
=================================================================================
Interface which extends the Set interface.
Stores elements in an order.
Extending interface is NavigableSet.
Implementing class is TreeSet.
It is an interface, usage is through constructor of its implementing class.

EXAMPLE FOR CREATING AN INSTANCE:
import java.util.SortedSet;
import java.util.TreeSet;
...
class CustomComparator implements Comparator {...}
...
SortedSet<elementType> ss = new TreeSet<>(); //natural order
SortedSet<elementType> ss2 = new TreeSet<>(new CustomComparator()); //custom order
END OF EXAMPLE

All methods of Set are available. Other methods are below.
Because the element adding order is stored, e.g. the toArray(), toString(), iterator() methods will follow that order.

||Method|Description||
||comparator()|returns the Comparator of ordering the elements||
||first()|returns the 1st element of the set||
||last()|returns the last element of the set||
||headSet(element)|returns all elements before the given element||
||tailSet(element)|returns all elements after the given element, including the given element||
||subSet(element1, element2)|returns all elements between the two given elements, element1 is included||

=>NavigableSet
=>TreeSet
=>Set
=>Collection
=>Comparator
