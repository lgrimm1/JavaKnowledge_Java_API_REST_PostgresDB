=================================================================================
SPRING.BOOT
=================================================================================
The Spring is a framework family for web applications.
The Spring.Boot is part of the Spring frameworks family in which the Boot provides a universal framework for Spring frameworks.
That said, it is a bridge and common interface of and to Spring.Core, Spring.Web, Spring.Data and Spring.MVC frameworks, extended with Spring test environment.
By using it, setting up the backend part becomes a much simplified process.
The Spring.Boot framework hides the complexity of the web part of an application so the developer can concentrate on the tasks themselves.
This framework adds another layer between the Communication and the frontend, managed by the frontend and the backend together as the backend fills it with data, the frontend reads data and fills it with other data, then the backend reads those data.

Following best practices, a thin Communication layer manifested as pure Controller class(es) (see later) provides a web API to the backend.
Spring.Boot supports web API and REST API.

In case the Spring.Boot is used alongside with the Spring.ThymeLeaf the templates can be automated further on the template side. That said, the application can not be RESTful since views will be sent to the frontend (templates).

1. SETTING UP
2. CREATING CLASSES AND DIRECTORIES
3. CLASS DEPENDENCIES IN SPRING
4. MAIN (APPLICATION) CLASS
5. ENTITY
6. REPOSITORY
7. SERVICE CLASS
8. CONTROLLER CLASS
9. JSON AND XML CONVERSION
10. START AND STOP WEB APPLICATION

=>Web_application
=>Spring_ThymeLeaf
=>Spring_class_dependencies
=>Classes;13. CLASS DEPENDENCY INJECTION
=>Spring_Boot_Main_class
=>Spring_Boot_entity
=>Spring_Boot_repository
=>Spring_Boot_service
=>Spring_Boot_controller
=>Spring_Boot_requests
=>Serialization
=>Spring_Boot_tests
=>PostgreSQL
=>Spring_Boot_Validation
=>Spring_exception_handling

=================================================================================
1. SETTING UP
=================================================================================
1.1. MANUALLY
1.2. WITH SPRING INITIALIZR
1.3. PRE-SETTINGS

1.1. MANUALLY
---------------------------------------------------------------------------------
In order to address the framework, the following tags should be inserted into pom.xml.
After modifying the pom.xml, in IntelliJ IDEA, right-click on the pom.xml and select the Maven/Reload Project menu item.
Alternative way is to type "mvn compile" to make Maven to find and install all what is needed.
The parent tag marks the version root of dependencies.
The dependencies are modular: add anything you need and leave anything you do not.
The Spring Web provides web support for REST API and Spring MVC, and uses Apache Tomcat as default container.
The Spring Data JPA provides interface towards databases.
On database side, the H2 Database provides a fast in-memory SQL, the postgreSQL provides the named SQL solution; can be replaced with Oracle (SQL), MongoDB (noSQL) etc.
In case the Storage layer is a file-level or a List-based in-memory solution, no dependency should be used for storaging (here: H2 Database and postgreSQL).
In case of not in-memory nor file-level database solution, installing and-or creating access to the specific database is necessary.
Spring.Boot (Spring Data JPA) can handle more data connections parallel. That said, more dependencies can be inserted if more solutions are needed.
The Spring Test dependency is part of the Spring.Boot.

Under the modelVersion tag, above dependencies:
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.7.6</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>

If there is not, create a block under the properties block:
    <dependencies>
    </dependencies>

Then inside, add the next (it is possible to define version tag with all dependencies, in case no version tag, the best compatible version read from the parent tag, will be used by Maven):
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
Under dependencies (during tests, this element was not found by Intellij/Maven, remains red in pom.xml but causes no error):
	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

1.2. WITH SPRING INITIALIZR
---------------------------------------------------------------------------------
The Spring Initializr is available on the start.spring.io website.
Here, after giving the details of the new project, it will create a brand-new structure of directories and starting files, downloadable.
Any frameworks, dependencies, Java version, IDE name can be chosen, and the website will personalize the initial structure along with pom.xml of Maven etc.
It is very convenient way in case of a new project and can be used for extending an existing one by checking files and directories against.
The Spring Test dependency is automatically added.

1.3. PRE-SETTINGS
---------------------------------------------------------------------------------
While the database is not connected, the application will fail to start.
Therefore, during development it is advised to rem-out the JPA dependency.
Please remember to make it alive when development of the Storage layer starts.
After modifying the pom.xml, in IntelliJ IDEA, right-click on the pom.xml and select the Maven/Reload Project menu item.
Alternative way is to type "mvn compile" to make Maven to find and install all what is needed.

=================================================================================
2. CREATING CLASSES AND DIRECTORIES
=================================================================================
The framework needs several classes in order to work at top efficiency and to follow best practices:
    a. Main (application)
    b. Controller
    c. Service
    d. Repository
    e. Entity

The Main class will launch the web application.
The Controller class handles the communication.
The Service class is the core of the web app.
The Repository class represents and manages the storage side.
The Entity class forms the data element itself.

Although the Main class is very short in code, and some schools use it for inserting the Controller endpoints into it, furthermore the controller methods could contain processing code as well, the best practice is to keep the layers separated on class level, which structure creates and keeps modularity and independent unit tests become possible.
There can be several controllers, their service classes and several repository classes. In case of complex class structure of data elements, storage, service and controller can be separated by the structure, best practice is to do so which further increases modularity. In such case the three layers will be formed by theoretically summarizing the right independent classes.

A possible structure of classes of independent application layers:
1. package
    L entity class
        L subclasses
    L repository class
    L service class
    L controller class
2. package
    L entity class
        L subclasses
    L repository class
    L service class
    L controller class
web application class

A possible structure of classes of application layers with common controller and service:
1. package
    L entity class
        L subclasses
    L repository class
2. package
    L entity class
        L subclasses
    L repository class
common package
    L service class
    L controller class
web application class

Under the src/main/resources folder, the next folders should be created:
    a. static (contains the frontend)
    b. templates (contains pre-set of pages handled with backend web development)

Under the same (src/main/resources) folder, the next file should be created:
    application.properties
This file contains configuration and environment-specific properties of the application.

Spring.Boot uses automatism when the web application starts (invoking Main class):
    a. Spring.Boot finds all controller classes marked with annotation (see later) and invokes their constructors
    b. in case these classes contain injected class dependencies, for those classes their constructors will be invoked
    c. then Spring.Boot finds service and storage objects by annotations of their classes (see later)

=================================================================================
3. CLASS DEPENDENCIES IN SPRING
=================================================================================
Visit the Spring_class_dependencies page for description.

=================================================================================
4. MAIN (APPLICATION) CLASS
=================================================================================
Visit the Spring_Boot_Main_class page for description.

=================================================================================
5. ENTITY
=================================================================================
Visit the Spring_Boot_entity page for description.

=================================================================================
6. REPOSITORY
=================================================================================
Visit the Spring_Boot_repository page for description.

=================================================================================
7. SERVICE CLASS
=================================================================================
Visit the Spring_Boot_service page for description.

=================================================================================
8. CONTROLLER CLASS
=================================================================================
Visit the Spring_Boot_controller page for description.

=================================================================================
9. JSON AND XML CONVERSION
=================================================================================
XML or JSON conversion happens when the application is RESTful.
Both data types are series of characters therefore given values in it are practically texts.
Data written in JSON need the less amount of space.
The XML file contains data in tagged format. Using it means nice hierarchic form for the cost of space.

The transfer data is converted from an instance of a class or converted back, will contain fields and their values, in their characterized form. For this, the class must be serializable. Serialization will be handled by Spring.
Data can be sent and received as original object or in a Map. In case Map is used, keys will be the names of the variables. In this variant all values will be converted to String format since in the Map values will be Strings as well.
In case of received JSON or XML data, if the deserialization was unsuccessful, the server response will contain error code.

The JSON or XML fields must match exactly with the object fields by name and type, and the class must have exactly the same number of fields the JSON or XML contains.
The class name or the object variable name can be different at backend and frontend.

=================================================================================
10. START AND STOP WEB APPLICATION
=================================================================================
To start the web application, use Maven in console:
mvn spring-boot:run
or
mvnw spring-boot:run
The Maven will compile the project, then attempt to start it.

To stop the application, press ^C in the console.

In case no profile is defined, the Maven will start the application on localhost:8080 by default.
That said, in browser the base path will be localhost:8080.

At start, Spring.Boot will create an instance from the controller, through class injection (best practice) an instance will be created from the service class and then from the repository class.

//TODO Spring.Boot tutorial, 1:17:00, https://www.youtube.com/watch?v=9SGDpanrc8U
//TODO Spring.Data JPA tutorial, https://www.youtube.com/watch?v=8SGI_XS5OPw
//TODO https://spring.io/guides/tutorials/rest/
//TODO https://www.digitalocean.com/community/tutorials/spring-configuration-annotation
//TODO https://www.digitalocean.com/community/tutorials/spring-configuration-annotation
