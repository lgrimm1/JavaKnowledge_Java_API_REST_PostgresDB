=================================================================================
ARRAY
=================================================================================
1. ARRAY DIMENSIONS, TYPES, ITERATING
2. ARRAY COPYING
3. ARRAY CONCATENATION
4. ARRAY TO STRUCTURED STRING
5. ARRAY SORTING
6. SEARCH IN ARRAY
7. CONVERT TO ARRAYLIST AND BACK
8. CONVERT TO HASHSET AND BACK
9. COMPLEX ELEMENT TYPE

=>Variables
=>Primitive_data_types
=>Objects
=>Iteration
=>ArrayList
=>Comparator
=>Collection
=>StringBuilder
=>HashSet
=>Stream
=>Matrix

=================================================================================
1. ARRAY DIMENSIONS, TYPES, ITERATING
=================================================================================
1.1. 1-DIMENSIONAL
1.2. 2-DIMENSIONAL
1.3. 3-DIMENSIONAL
1.4. MULTI-DIMENSIONAL

dataType[] arrayName -> 1D
dataType[][] arrayName -> 2D
datatype[][]...[] arrayName -> >2D
The dataType can be primitive or class types.
Every member of an array will have the same type.
The 1st element has the 0th index.

1.1. 1-DIMENSIONAL
---------------------------------------------------------------------------------
double[] da; //declaration
da = new double[100]; //memory allocation for 100 element
The array itself is immutable but mutability of elements depends on the element type (mostly immutable).
The size(s) of an array is defined then fix.
The arrayName is a reference, can assign other arrays to as well:
da = new double[100];
...
da = new double[50];
Giving values as constant to array variable:
da = {2, 5, 3, 9};
Declaration, memory allocation and giving values (initializing) in one step:
double[] da = new double[]{4, 6, 5, 7}; //through array constructor
double[] da = {4, 6, 5, 7}; //through constant

Using for iterations:
for (int i = 0, l = da.length; i < l; i++) {
	//process using da[i]
}
for (double d : da) {
	//process using actual d which is element of da
	//the iteration will step over elements from 0 to da.length by 1
}

Accessing an element with wrong index (<0 or >.length or the array has 0 length) throws exception.
For arrays, .length is a property, not a method (length is fixed after memory allocation).
Using class element type (like String or Method) means the element will contain a reference to such object.

1.2. 2-DIMENSIONAL
---------------------------------------------------------------------------------
arrayType[][] da = new arrayType[3][2]; //3 rows, 2 columns

A 2D array is a 1D array by rows where in every row there is an independent 1D array of arrayType.
Said, 1D array length in every row can be different but not the element (cell) type.

Using for iterations:
for (int row = 0, lr = da.length; row < lr; row++) {
	for (int col = 0, lc = da[row].length; col < lc; col++) {
		//process da[row][col]
	}
}
for (double[] daa : da) {
	for (double d : daa) {
		//process d variable
	}
}

Memory allocation by using constant 1D arrays:
double[][] da = {
	{3, 5, 6},
	{4},
	{6, 4, 2, 9, 0}
}; //results new double[3][5] where the unused cells (e.g. da[1][1] which would be the next element after 4) will be unreachable and da[1].length == 1

1.3. 3-DIMENSIONAL
---------------------------------------------------------------------------------
3D array initialization (memory allocation):
int[][][] ia = {
	{
		{1, 2, 3},
		{4, 5, 6, 7}
	},
	{
		{8, 9},
		{10, 11, 12}
	},
	{
		{13, 14, 15}
	}
};

1.4. MULTI-DIMENSIONAL
---------------------------------------------------------------------------------
In case of multi-dimensional arrays the rules are the same.
Usage is rare since hardship to follow indexing.
In science can have advantages.

=================================================================================
2. ARRAY COPYING
=================================================================================
2.1. SHALLOW COPY
2.2. DEEP COPY WITH ITERATION
2.3. DEEP COPY WITH ARRAYCOPY
2.4. DEEP COPY WITH COPY AND COPYOFRANGE

2.1. SHALLOW COPY
---------------------------------------------------------------------------------
Shallow copy means only the reference to the original array will be copied.
In case there is a change in the copy, the original array will change as well.

int[] ia1 = new int[]{...};
int[] ia2 = ia1;

2.2. DEEP COPY WITH ITERATION
---------------------------------------------------------------------------------
Deep copy means a new reference will be created for the new array.
Any changes in the new one will not change the original array.

int[] ia1 = new int[]{...};
int[] ia2 = new int[ia1.length];
for (int i = 0, l = ia1.length; i < l; i++) {
	ia2[i] = ia1[i];
}

In case the element type is a class, the element will be a reference to an object. That means from different arrays elements can show to the same memory allocation.
In case the object is immutable, any changes to the element will not change the object in memory but create a new object instead, and the array element will show to that so the change will not be copied to the original array.
In case the object is mutable and changed, the reference will not change and the change itself can be reached from the original array.
Some immutable object types: String, array.
Some mutable object types: ArrayList, StringBuilder (rarely used as element type of arrays).

2.3. DEEP COPY WITH ARRAYCOPY
---------------------------------------------------------------------------------
int[] ia1 = new int[10];
for (int i = 0; i < 10; i++) {
	ia1[i] = i + 1;
} //{1, 2, 3, ..., 9, 10}
int[] ia2 = new int[5];
for (int i = 0; i < 5; i++) {
	ia1[i] = (i + 1) * 2;
} //{2, 4, 6, 8, 10}
//System.arrayCopy(sourceArray, startPositionInSource, destinationArray, startPositionInDestination, length)
System.arrayCopy(ia1, 2, ia2, 1, 3); //ia2[]: {2, 3, 4, 5, 10};
System.arrayCopy(ia1, 0, ia2, 0, ia2.length); //ia2[]: {1, 2, 3, 4, 5};
ia2 = new int[ia1.length];
System.arrayCopy(ia1, 0, ia2, 0, ia1.length); //ia2[]: {1, 2, 3, ..., 9, 10};

Best solution for 1D arrays.
For >1D cases, must use (nested) loops until the last dimension is reached - for that the arrayCopy is applicable.

2.4. DEEP COPY WITH COPY AND COPYOFRANGE
---------------------------------------------------------------------------------
import java.util.Arrays;
...
int[] ia1 = new int[10];
for (int i = 0; i < 10; i++) {
	ia1[i] = i + 1;
} //{1, 2, 3, ..., 9, 10}
//destinationArray = Arrays.copyOf(sourceArray, length);
//destinationArray = Arrays.copyOfRange(sourceArray, startPosition, length);
int[] ia2 = Arrays.copyOf(ia1, 3); //ia2: {1, 2, 3}
ia2 = Arrays.copyOf(ia1, 5); //ia2: {1, 2, 3, 4, 5}
ia2 = Arrays.copyOf(ia1, 13); //ia2: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 0, 0}; increases array capacity
ia2 = Arrays.copyOfRange(ia1, 2, 3); //ia2: {3, 4, 5}
ia2 = Arrays.copyOfRange(ia1, 0, ia1.length); //ia2: {1, 2, 3, ..., 9, 10}

For >1D cases, must use (nested) loops until the last dimension is reached - for that the copyOf() and copyOfRange() is applicable.

=================================================================================
3. ARRAY CONCATENATION
=================================================================================
3.1. WITH ITERATION
3.2. WITH ARRAYCOPY

3.1. WITH ITERATION
---------------------------------------------------------------------------------
int[] ia1 = new int[]{...};
int[] ia2 = new int[]{...};
ia1Length = ia1.length;
ia2Length = ia2.length;
int[] ia3 = new int[ia1Length + ia2Length];
int ia3Index =0;
for (int n : ia1) {
    ia3[ia3Index] = n;
    ia3Index++;
}
for (int n : ia2) {
    ia3[ia3Index] = n;
    ia3Index++;
}

3.2. WITH ARRAYCOPY
---------------------------------------------------------------------------------
import java.util.Arrays;
...
int[] ia1 = new int[]{...};
int[] ia2 = new int[]{...};
ia1Length = ia1.length;
ia2Length = ia2.length;
int[] ia3 = new int[ia1Length + ia2Length];
System.arrayCopy(ia1, 0, ia3, 0, ia1Length);
System.arrayCopy(ia1, 0, ia3, ia1Length, ia2Length);

=================================================================================
4. ARRAY TO STRUCTURED STRING
=================================================================================
4.1. ARRAYS.TOSTRING
4.2. ARRAYS.DEEPTOSTRING

4.1. ARRAYS.TOSTRING
---------------------------------------------------------------------------------
1D solution.

EXAMPLE FOR TOSTRING:
import java.util.Arrays;
...
int[] ia = new int[10];
for (int i = 0; i < 10; i++) {
	ia[i] = i + 1;
} //{1, 2, 3, ..., 9, 10}
String s = Arrays.toString(ia); //s: "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
String[] sa = new String[]{"window", "door", "wall"};
s = Arrays.toString(ia); //s: "[window, door, wall]"

4.2. ARRAYS.DEEPTOSTRING
---------------------------------------------------------------------------------
>1D solution.

EXAMPLE FOR DEEPTOSTRING:
import java.util.Arrays;
...
double[][] da = new double[][]{
	{1, 2, 3},
	{4},
	{5, 6},
};
String s = Arrays.deepToString(da); //s: "[[1, 2, 3], [4], [5, 6]]"

=================================================================================
5. ARRAY SORTING
=================================================================================
5.1. SORT IN ASCENDING ORDER, PRIMITIVE TYPES
5.2. SORT IN ASCENDING ORDER, OBJECT TYPES
5.3. SORT IN DESCENDING ORDER, PRIMITIVE TYPES
5.4. SORT IN DESCENDING ORDER, OBJECT TYPES

5.1. SORT IN ASCENDING ORDER, PRIMITIVE TYPES
---------------------------------------------------------------------------------
import java.util.Arrays;
...
int[] ia = new int[]{...};
Arrays.sort(ia);
Arrays.sort(ia, 1, 3); //sort indexes between 1 and 3

5.2. SORT IN ASCENDING ORDER, OBJECT TYPES
---------------------------------------------------------------------------------
import java.util.Collections;
...
Integer[] ia = new Integer[]{...};
Collections.sort(ial);

5.3. SORT IN DESCENDING ORDER, PRIMITIVE TYPES
---------------------------------------------------------------------------------
import java.util.Arrays;
import java.util.Collections;
...
int[] ia = new int[]{...};
Arrays.sort(ia, Collections.reverseOrder());

5.4. SORT IN DESCENDING ORDER, OBJECT TYPES
---------------------------------------------------------------------------------
import java.util.Arrays;
import java.util.Collections;
...
Integer[] ia = new Integer[]{...};
Collections.sort(ial, Collections.reverseOrder());

=================================================================================
6. SEARCH IN ARRAY
=================================================================================
6.1. SEARCH IN RANDOM-ORDERED ARRAY
6.2. SEARCH IN SORTED ARRAY

6.1. SEARCH IN RANDOM-ORDERED ARRAY
---------------------------------------------------------------------------------
There is no ready-to-use method in the array class nor in the Arrays class. However, a sequential search can be made.
The 2nd part of the condition can be modified to fit to the search key type.

int index;
String[] array = new String[]{...};
String key = ...;
while ((index < array.length) && !array[index].equals(key)) {
    index++;
}
if (index < array.length) {
    \\index points to the found element
}
else {
    \\no such element in the array
}

6.2. SEARCH IN SORTED ARRAY
---------------------------------------------------------------------------------
In case the array is sorted, this method will provide an index, or if found none, a negative number.
In case there is more than one of element matching with the search key, undefined which will have the index pointed on.
Can be used for primitive types or object types which has .equals() method.

import java.util.Arrays;
...
int[] ia = new int[]{...};
int key = ...;
int index = Arrays.binarySearch(ia, key);

=================================================================================
7. CONVERT TO ARRAYLIST AND BACK
=================================================================================
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
...
String[] sa = new String[]{...};
...
List sal = new ArrayList<>(Arrays.asList(sa));
//or:
ArrayList<String> sal = new ArrayList<>();
for (String s : sa) {
	sal.add(s);
}
...
int length = sal.size();
String[] sa2 = new String[length];
//in case element type is not primitive
sal.toArray(sa2);
//or:
for (int index = 0; index < length; index++) {
    sa2[index] = sal.get(index);
}

=================================================================================
8. CONVERT TO HASHSET AND BACK
=================================================================================
import java.util.HashSet;
import java.util.List;
import java.util.stream;
import java.util.stream.Collectors;
...
String[] array = new String[]{...};
...
Set<String> set = new HashSet<>(Arrays.asList(array));
//or:
Set<String> set = new HashSet<>(Arrays.stream(array).collect(Collectors.toSet()));
...
String[] array2 = new String[set.size()];
set.toArray(array);

=================================================================================
9. COMPLEX ELEMENT TYPE
=================================================================================
Normally, arrays and collections like ArrayLists use the same element type for all of their elements.
In case different element types should be stored within the same type, creating a new class as element type is necessary.
We create a field for every element type with assigning null to them.
Then, we create a constructor for every field which will be the setter method for that field only.
We can reach the element by invoking a common getter method, and can check the stored type via getting the type name. At the caller side, we need type-casting.

EXAMPLE FOR COMPLEX ELEMENT TYPE:
//element type declaration
class Element {
    private String elementTypeName;
    private elementType1 elementName1 = null;
    private elementType2 elementName2 = null;

    public Element(elementType1 elementName1) { //constructor and setter for elementName1
        this.elementName1 = elementName1;
        this.elementTypeName = elementType1 as String;
    }

    public Element(elementType2 elementName2) { //constructor and setter for elementName2
        this.elementName2 = elementName2;
        this.elementTypeName = elementType2 as String;
    }

    public Object getElement() { //common getter
        if (elementName1 != null) {
            return elementName1;
        }
        else if (elementName2 != null) {
            return elementName2;
        }
        else {
            return null;
        }
    }

    public String getTypeName() { //type name getter
        return elementTypeName;
    }
}

class Main {
    int arrayIndex;
    Element[] ea = new Element[]{new Element(...), new Element(...), ...}; //declaration with values
    ea[arrayIndex] = new Element(...); //setting value at index
    ...
    for (Element e : ea) { //processing array
        if (e.getTypeName().equals(elementType1 as String)) {
            //processing: (elementType1) e.getElement()
        }
        if (e.getTypeName().equals(elementType2 as String)) {
            //processing: (elementType2) e.getElement()
        }
    }
}
