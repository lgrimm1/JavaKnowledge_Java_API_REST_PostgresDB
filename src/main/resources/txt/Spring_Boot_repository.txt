=================================================================================
SPRING BOOT REPOSITORY
=================================================================================
The Spring framework can identify a class as a repository.
That said, that class will be responsible for storage management.

1. REPOSITORY CLASS, NO-JPA
2. REPOSITORY INTERFACE, JPA

=>SPRING BOOT
=>POSTGRESQL
=>SPRING BOOT REPOSITORY QUERY EXAMPLES
=>SPRING BOOT REPOSITORY SPECIALS
=>SPRING BOOT TESTS;3. REPOSITORY TESTS
=>SPRING DATA JPA TESTS

=================================================================================
1. REPOSITORY CLASS, NO-JPA
=================================================================================
In case of no-JPA solution, this class will keep the data itself as well in some container of entities.
As a class it gives the structure and its methods but not the instance which will be hold by the service class.
In order to define a class as repository, the @Repository or @Component or @Bean annotation is needed, the first expresses its function better.
This class must be a singleton in memory per repository.
The class must be public in order to let Spring accessing it.

The simplest solution is to define a List<elementType> as a private field and its manipulation methods.
For smaller data amount it provides fast data access. The data will be hold in-memory and all methods must be declared in order to hold data in it.
In case of higher element number, the time needed for storage operations can be very high.
For keeping data in file system, the repository class can have load, save, find etc. methods which virtually mirror the in-memory data down to file system.

EXAMPLE FOR A REPOSITORY CLASS (NO-JPA):
package PackageName;

import org.springframework.stereotype.*;

@Repository
public class RepositoryClassName {
    private final ...; //data container of entities e.g. a List or a Set
    //fields
    //constructor
    //getters
    //manipulation methods and helper methods
}
END OF EXAMPLE

=================================================================================
2. REPOSITORY INTERFACE, JPA
=================================================================================
2.1. ABOUT SPRING DATA JPA
2.2. DEFAULT INTERFACE
2.3. DERIVED QUERY METHODS
2.4. CUSTOM QUERY METHODS
2.5. QUERIES WITH DYNAMIC SORTING
2.6. QUERIES WITH DYNAMIC PAGINATION
2.7. QUERY EXAMPLES
2.8. SPECIALS

2.1. ABOUT SPRING DATA JPA
---------------------------------------------------------------------------------
The Spring Data JPA framework is designed to make a bridge between backend repositories and databases.
Utilizing this framework is different when using without and with Spring Boot (annotations, interfaces etc). Generally, through Spring Boot it became easier, simpler and faster for coding.
The reason is that Spring Boot is designed to be the top bridge above different Spring frameworks.

The JPA stands for Jakarta Persistence API (before Spring 3, Java Persistence API).

2.2. DEFAULT INTERFACE
---------------------------------------------------------------------------------
In Spring, instead of class the repository will be an interface which extends an abstract interface provided by Spring.
For covering CRUD operations (create, retrieve, update, delete) Spring offers the CrudRepository interface.
In case of JPA solution, Spring offers the JpaRepository which extends the functionality of the CrudRepository with Collection, Stream, paging, sorting and exampling support.
Via extending such interface, there is no need to define any fields or methods, by default it will provide the functionality of the JPA repository for Spring Boot.

In order to define an interface as repository, the @Repository annotation is needed.
The interface must be public in order to let Spring accessing it.
The best solution is to engage with an in-memory or in-server database. Such database can be H2 (in-memory) or PostgreSQL (or postgres) or mySQL or Oracle etc. In this version the Spring Boot must connect to the storage by using application.properties file under the src/main/resources directory.

The JpaRepository is a generics for handling basic repository functions like CRUD (Create, Retrieve, Update, Delete). Two types it needs in declaration:
    a. EntityClassName: the class of the entity it manages
    b. TypeOfID: the type of the entity ID field e.g. String or Long

It is important that all functionality provided by the interface, will be translated into SQL commands by Hibernate and sent to the database as queries.
That said, the database will interpret and process, then send data back to the backend.

EXAMPLE FOR A REPOSITORY INTERFACE (JPA):
package PackageName;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.*;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Order;

@Repository
public interface RepositoryClassName extends JpaRepository<EntityClassName, TypeOfID> {
    //optional fields
    //optional overridden default methods
    //optional derived query methods
    //optional custom query methods
    //optional helper methods
}
END OF EXAMPLE

In case of using a database, database access and other parameters must be defined in the application.properties file under the project directory, visit the SPRING DATA JPA DATABASE CONNECTION page for details.

By extending the JPA repository, the next inherited methods will be accessible. The access can happen from within the repository class or from the service class into which the repository was injected.
The entity is the element of the table of the database defined with @Entity under Spring, accessible via the repository.
Coming from design, it is possible to manage entity management via the repository or via the service.
These methods are satisfying basic needs of handling database data, mainly satisfying CRUD functions.

||Method|Description||
||existsById(id)|returns existence of the entity by the ID||
||getReferenceById(id)|returns a specific entity by ID||
||findById(id)|returns an Optional of entity by ID||
||findAllById(iterableOfIds)|returns a List of entities found by IDs||
||findAll()|returns a List of all entities||
||save(entity)|adds the passed entity to the repository||
||flush()|writes all entities to the storage, which were kept in repository for buffering||
||count|returns the number of entities stored in the repository||
||delete(entity)|finds and deletes the passed entity from the repository||
||deleteAll(iterableOfEntities)|finds and deletes entities of the passed Iterable||
||deleteById(id)|finds and deletes the entity by ID||
||deleteAllById(iterableOfIds)|finds and deletes entities by their IDs of the passed Iterable||
||deleteAll|empties the repository||

2.3. DERIVED QUERY METHODS
---------------------------------------------------------------------------------
The default interface is for saving data and finding-managing data by the ID (CRUD functions).
In case of other or overridden methods are needed, can be coded on repository level.

It is important that all functionality provided by the interface, will be translated into SQL commands by Hibernate and sent to the database as queries.
That said, the database will interpret and process, then send data back to the backend.

The JPA repository offers conventions for new query methods, by utilizing them derived methods can be defined.
All derived query methods should be defined as abstract only.
Names of derived query methods are built from given keywords (see later), JPA will automatically fill the method with the right code.
A derived query method usually has argument list, its variable names must be used in the method name in respective order.

The main keywords are for identifying the main purpose of the query.
The find keyword can be replaced with read, get, query, search or stream keywords. In case of stream, a Stream result type would be advised.

A derived query method does not need explicit SQL expression to work since the theory behind is to have a verbal method name made of keywords. However, for better visual interpretation only, the @Query annotation can be used optionally in the way described with custom query methods, see later.

||Main keyword|Description|SQL sample||
||find[...]By...|general query for finding data|SELECT ... FROM ... WHERE ...||
||read[...]By...|general query for finding data|SELECT ... FROM ... WHERE ...||
||get[...]By...|general query for finding data|SELECT ... FROM ... WHERE ...||
||query[...]By...|general query for finding data|SELECT ... FROM ... WHERE ...||
||search[...]By...|general query for finding data|SELECT ... FROM ... WHERE ...||
||stream[...]By...|general query for finding data|SELECT ... FROM ... WHERE ...||
||exists[...]By...|returns typically a boolean value|SELECT EXISTS ... FROM ... WHERE ...||
||count[...]By...|returns a numeric value|SELECT COUNT ... FROM ... WHERE ...||
||delete[...]By..., remove[...]By...|deletion query, returns void or number of deleted rows|DELETE FROM ... WHERE ...||
||...First[number]...By..., ...Top[number]...By...|used somewhere between find and By keywords; restricts the found elements for their first appearance (possible found maximum number of rows are defined with the number value, if left, means first only)|SELECT TOP ... ... FROM ... WHERE ...||
||...distinct...By...|results unique values for the marked column etc.|SELECT DISTINCT ... FROM ... WHERE ...||

The additional keywords are used together with main keywords (usually with find).
Except for AllIgnoreCase and AllIgnoringCase, every additional keywords can be used for a column only which means for multiple fields different keywords can be used.

||Additional keyword|Example|SQL sample||
||Distinct|findDistinctByLastnameAndFirstname|SELECT DISTINCT ... WHERE ... (returns only unique results)||
||And|findByLastnameAndFirstname|... WHERE x.lastname = ?1 AND x.firstname = ?2||
||Or|findByLastnameOrFirstname|... WHERE x.firstname = ?1 OR x.lastname = ?2||
||Is, Equals|findByFirstname, findByFirstnameIs, findByFirstnameEquals|... WHERE x.firstname = ?1||
||IsEmpty, Empty|findByFirstnameIsEmpty, findByFirstnameEmpty|... WHERE x.firstname IS EMPTY||
||IsNotEmpty, NotEmpty|findByFirstnameIsNotEmpty, findByFirstnameNotEmpty|... WHERE x.firstname NOT EMPTY||
||Between|findByStartDateBetween|... WHERE x.startdate BETWEEN ?1 AND ?2||
||LessThan|findByAgeLessThan|... WHERE x.age < ?1||
||LessThanEqual|findByAgeLessThanEqual|... WHERE x.age <= ?1||
||GreaterThan|findByAgeGreaterThan|... WHERE x.age > ?1||
||GreaterThanEqual|findByAgeGreaterThanEqual|... WHERE x.age >= ?1||
||Near, IsNear|findByAgeNear, findByAgeIsNear|... WHERE ABS(x.age - ?1) < ?2||
||Within, IsWithin|findByAgeWithin, findByAgeIsWithin|... WHERE x.age >= ?1 OR x.age <= ?2||
||After|findByStartDateAfter|... WHERE x.startdate > ?1||
||Before|findByStartDateBefore|... WHERE x.startdate < ?1||
||IsNull, Null|findByAgeIsNull, findByAgeNull||... WHERE x.age IS NULL||
||IsNotNull, NotNull|findByAgeIsNotNull, findByAgeNotNull||... WHERE x.age NOT NULL||
||Like|findByFirstnameLike|... WHERE x.firstname LIKE ?1||
||NotLike|findByFirstnameNotLike|... WHERE x.firstname NOT LIKE ?1||
||StartingWith|findByFirstnameStartingWith|... WHERE x.firstname LIKE ?1 (?1 is e.g. "abc%")||
||EndingWith|findByFirstnameEndingWith|... WHERE x.firstname LIKE ?1 (?1 is e.g. "%abc")||
||Containing|findByFirstnameContaining|... WHERE x.firstname LIKE ?1 (?1 is e.g. "%abc%")||
||OrderBy|findByAgeOrderByLastnameDesc|... WHERE x.age = ?1 ORDER BY x.lastname DESC (or Asc for ASC)||
||Not|findByLastnameNot|... WHERE x.lastname <> ?1||
||In|findByAgeIn(Collection<Age> ages)|... WHERE x.age IN ?1 (accepts any Collection type or varargs)||
||NotIn|findByAgeNotIn(Collection<Age> ages)|... WHERE x.age NOT IN ?1 (accepts any Collection type or varargs)||
||True|findByActiveTrue|... WHERE x.active = TRUE||
||False|findByActiveFalse|... WHERE x.active = FALSE||
||IgnoreCase, IgnoringCase|findByFirstnameIgnoreCase, findByFirstnameIgnoringCase|... WHERE UPPER(x.firstname) = UPPER(?1) (same with LOWER() method)||
||AllIgnoreCase, AllIgnoringCase|findByFirstnameAndLastnameAllIgnoreCase, findByFirstnameAndLastnameAllIgnoringCase|... WHERE UPPER(x.firstname) = UPPER(?1) (same with LOWER() method)||
||Regex, MatchesRegex, Matches|findByFirstnameRegex, findByFirstnameMatchesRegex, findByFirstnameMatches|-||

Using the Distinct keyword needs careful consideration:
    a. SELECT DISTINCT u FROM User u (because it includes User.id, nothing will be duplicated, result will be the whole table e.g. in a List<User>)
    b. SELECT DISTINCT u.lastname FROM User u (narrows the query for User.lastname and finds unique values for that, result can be either List<User> and List<String>)
    c. countDistinctByLastname(String lastname) (equals with SELECT COUNT(DISTINCT u.id) FROM User u WHERE u.lastname = ?1, because u.id contains unique values, result equals with countByLastname(String lastname))
In case of better verbal and cleaner query, it can be advised to use the @Query annotation with custom method name.

The return value of the query method depends on the query.
Basically, the return value can be single (e.g. the entity class or a primitive) or multiple (e.g. a Collection subtype like List).
In case of single, the query can produce result or null. The syntax will be correct when the return value is a class, however, packaging the result type into an Optional is preferred for preventing runtime exception when invoking the query does not find matching data. Also, instead of Optional, List can be used of which size will be zero in case of no found element.
In case a query could result multiple values it is advised to define multiple return value for the method. By defining single and the query returns single in a specific case, no error will appear but because the method is capable to produce multiple elements, in such situation, IncorrectResultSizeDataAccessException will be raised.
For geospatial returned data, GeoResult (single) or result wrapper like GeoPage or GeoResults as multiple data can be used.
In case the method return type is different from what the query would produce but convertible, JPA will convert it automatically, if not possible, exception will be raised.

Return types can be:
    a. void
    b. primitive type (int, boolean etc.)
    c. wrapper types (Long, String etc.)
    d. T (unique entity, the query must produce a single result at most, if none, null will be returned)
    e. Iterator<T>
    f. Collection<T> (superclass of List, Map and Set)
    g. List<T>
    h. Optional<T> (the query must produce a single result at most, if none, Optional will be empty)
    i. Option<T> (Scala or Vavr class, similar to Optional)
    j. Stream<T>
    k. Streamable<T> (extension of Collection<T> for convenience)
    l. Seq, List, Map, Set (Vavr classes)
    m. Future<T> (expects a method to be annotated with @Async and requires Spring’s asynchronous method execution capability to be enabled)
    n. CompletableFuture<T> (expects a method to be annotated with @Async and requires Spring’s asynchronous method execution capability to be enabled)
    o. Slice<T> (a sized chunk of data with an indication of whether there is more data available. Requires a Pageable method parameter)
    p. Page<T> (Slice with additional information such as the total number of results, requires a Pageable method parameter)
    q. GeoResult<T> (result entry with additional information, such as the distance to a reference location)
    r. GeoResults<T> (a list of GeoResult<T> with additional information, such as the average distance to a reference location)
    s. GeoPage<T> (a Page with GeoResult<T>, such as the average distance to a reference location)
    t. Mono<T> (a Project Reactor Mono emitting zero or one element using reactive repositories; expects the query method to return one result at most; if no result is found, Mono.empty() is returned; more than one result triggers an IncorrectResultSizeDataAccessException)
    u. Flux<T> (a Project Reactor Flux emitting zero, one, or many elements using reactive repositories; queries returning Flux can emit also an infinite number of elements)
    v. Single<T> (a RxJava Single emitting a single element using reactive repositories; expects the query method to return one result at most; if no result is found, Mono.empty() is returned; more than one result triggers an IncorrectResultSizeDataAccessException)
    w. Maybe<T> (a RxJava Maybe emitting zero or one element using reactive repositories; expects the query method to return one result at most; if no result is found, Mono.empty() is returned; more than one result triggers an IncorrectResultSizeDataAccessException)
    x. Flowable<T> (a RxJava Flowable emitting zero, one, or many elements using reactive repositories; queries returning Flowable can emit also an infinite number of elements)

MORE HERE: https://www.baeldung.com/spring-data-jpa-query

2.4. CUSTOM QUERY METHODS
---------------------------------------------------------------------------------
The @Query method-level annotation is used for a query method:
    a. for increasing readability of name of a derived query method (usage is optional, see earlier)
    b. for defining JPQL or native SQL expression of the query (custom query methods; usage is a must)

It is important that all functionality provided by the interface, will be translated into SQL commands by Hibernate and sent to the database as queries.
That said, the database will interpret and process, then send data back to the backend.

The JPQL stands for Jakarta Persistence Query Language (former Java Persistence Query Language), it is a platform-independent object-oriented query language defined as part of the Jakarta Persistence API (JPA; formerly Java Persistence API) specification. JPQL is inspired by SQL, and its queries resemble SQL queries in syntax, but operate against JPA entity objects stored in a relational database rather than directly with database tables.
The JPQL only supports a subset of SQL standard. If you want to make complex queries, use native SQL query.
Spring Data JPA does not adjust the query to specific SQL dialect of the database, so ensure that the provided statement is supported by RDBMS.

The query method arguments are accessed in the query with:
    a. positional parameters (?1, ?2, ... respectively)
    b. named parameters (:argumentName1, :argumentName2)
In case of named parameters, when the referenced :argumentNameX needs emphasis, the @Param annotation is needed in method signature.

EXAMPLE FOR POSITIONAL PARAMETERS:
@Query("SELECT e FROM entity_table e WHERE e.title = ?1 AND e.year = ?2")
List<Entity> entities = findEntities(String s, int n);
END OF EXAMPLE

EXAMPLE FOR NAMED PARAMETERS:
@Query("SELECT e FROM entity_table e WHERE e.title = :title AND e.year = :year") //JPQL
@Query(value = "SELECT * FROM entity_table e WHERE e.title = :title AND e.year = :year", nativeQuery = true) //native SQL
List<Entity> entities = findEntities(String title, int year); //no emphasis
List<Entity> entities = findEntities(@Param("title") String s, @Param("year") int n); //emphasis
END OF EXAMPLE

The arguments of @Query annotations can be:
    a. "JPQL expression"
    b. value = "JPQL expression"
    c. value = "native SQL expression", nativeQuery = true

Custom query methods must not use keywords as they are used with derived query methods since Spring uses names of derived methods over @Query expressions in priority.
The table from the data should be queried is marked with FROM keyword in SQL. The table name is not equal with the entity class name, instead use the name given with the @Table annotation in the entity class.
The native SQL contains the CONCAT() function which concatenates its arguments into one text (e.g. "CONCAT('%', ?1,'%')").
In order to match value case-insensitively, the column value and the method parameter should be modified with UPPER() or LOWER() function (e.g. "UPPER(e.title) LIKE UPPER(?1%)").

2.5. QUERIES WITH DYNAMIC SORTING
---------------------------------------------------------------------------------
Method arguments can overwrite the query expression, this is called dynamic sorting, paging etc. Meaning, the expression is invoked but after that, the query method will invoke the dynamic operation on the results before passing the results to its caller side.
When using dynamic modification, avoid using similar expression part in the query (would take more operation time, result can be unpredicted).

Dynamic sorting means that to the method signature a Sort object is added. That said, the query expression should not contain ORDER BY part but the method signature will modify the expression by adding sorting afterwards.
Spring Data JPA does not currently support dynamic sorting for native SQL queries (will raise InvalidJpaQueryMethodException), because it would have to manipulate the actual query declared, which it cannot do reliably for native SQL. For native SQL, add Pageable object instead, see examples.

In the repository interface, a Sort object can be given as the last argument of the query method:
    List<EntityClass> queryMethodName([other parameters, ]Sort sort);
This argument will receive dynamic sorting properties upon invoking in the Business layer.

The passed sorting properties can be defined:
    a. by declaring a variable (re-usable)
    b. directly passed to the query method upon invoking (no variable, use-once)

A Sort object can be created by calling the by() static method of Sort:
    a. Sort sort = Sort.by("fieldName"); //natural sorting
    b. Sort sort = Sort.by("fieldName").descending(); //reversed sorting

In case of hierarchic sorting, sorting levels can be added by chaining the and() method of Sort to the previous Sort object:
    Sort sort = Sort.by("fieldName1")[.descending()]
            .and(Sort.by("fieldName2")[.descending()])
            .and(...);

The hierarchic sorting is possible via creating Order objects for every sorting levels, render them into a List, and passing this List (or an element or a sublist of it) to the by() method:
    Sort sort = Sort.by(orders);

An Order object can be created:
    a. Order order = new Order(Sort.Direction.ASC, "fieldName");
    b. Order order = new Order(Sort.Direction.DESC, "fieldName");

The List of entities can be queried by invoking:
    a. List<EntityClass> = repositoryName.queryMethodName([other parameters, ]sort);
    b. List<EntityClass> = repositoryName.queryMethodName([other parameters, ]Sort.by(...));

2.6. QUERIES WITH DYNAMIC PAGINATION
---------------------------------------------------------------------------------
Dynamic pagination means that the query presents only one part of the whole set of results, and with paging command will present the next package in order. By using it the data traffic between the database and the backend becomes reduced, the operation becomes faster.
With pagination, sorting and filtering is possible as well.

In the repository interface, a Pageable object can be given as the last argument of the query method:
    Page<EntityClass> queryMethodName([other parameters, ]Pageable pageable);
This argument will receive dynamic paging properties upon invoking in the Business layer.

The passed paging properties can be defined:
    a. by declaring a variable (re-usable)
    b. directly passed to the query method upon invoking (no variable, use-once)

A Pageable object can be created by calling the of() static method of PageRequest:
    a. Pageable pageable = PageRequest.of(pageNumber, pageSize); //no sorting
    b. Pageable pageable = PageRequest.of(pageNumber, pageSize, sort); //with sorting, sort is instance of Sort
The pageNumber must be non-negative, first page is the zeroth.
The pageSize means the number of entities the returned package contains, must be positive.

A page request queried by invoking:
    a. Page<EntityClass> page = repositoryName.queryMethodName([other parameters, ]pageable);
    b. Page<EntityClass> page = repositoryName.queryMethodName([other parameters, ]PageRequest.of(...));

The List of entities of a page can be extracted by invoking:
    a. List<EntityClass> = page.getContent();
    b. List<EntityClass> = repositoryName.queryMethodName([other parameters, ]pageable).getContent();
    c. List<EntityClass> = repositoryName.queryMethodName([other parameters, ]PageRequest.of(...)).getContent();

||Pageable method|Description||
||first()|queries the first page||
||previousOrFirst()|queries the previous page or the first if the actual is the first||
||next()|queries the next page||
||hasPrevious()|is there a page before the actual||
||toOptional()|packages the Pageable into an Optional||
||getOffset()|gets the offset based on the actual number of page and the page size||
||getPageNumber()|returns the actual page number||
||getPageSize()|returns the size of page (number of contained entities)||
||getSort()|returns the sorting parameters as a Sort||
||getSortOr(Sort sort)|returns the sorting parameters or the given argument if Pageable is unsorted||
||isPaged()|returns whether the Pageable contains pagination information||
||isUnpaged()|returns whether the Pageable does not contain pagination information||
||ofSize(int pageSize)|creates a new Pageable for the first page (page number 0) given pageSize||
||unpaged()|creates a new Pageable without pagination parameters||
||withPage(int pageNumber)|creates a new Pageable with pageNumber applied||

||Page method|Description||
||empty()|creates a new, empty page||
||empty(Pageable pageable)|creates a new, empty page for the given Pageable||
||getTotalElements()|returns the total number of elements||
||getTotalPages()|returns the total number of pages||
||map(Function<? super T,? extends U> converter)|returns a new Page with the content of the current one mapped by the given Function||
||forEach(...)|invokes a lambda on every elements||
||iterator|returns an Iterator of elements||
||getContent|retrieves the List of items in the page||
||getNumber()|returns the number of the actual page||
||getNumberOfElements()|returns the number of elements in the Page||
||getPageable()|returns the Pageable||
||getSize()|returns the size of the Page (number of elements)||
||getSort()|returns the sorting parameters as Sort||
||hasContent()|returns whether the Page has content||
||hasNext()|checks whether there is a next Page||
||hasPrevious()|checks whether there is a previous Page||
||isFirst()|checks whether the actual Page is the first||
||isLast()|checks whether the actual Page is the last||
||nextOrLastPageable()|returns the next Pageable or the last if the actual is the last||
||nextPageable()|returns the next Pageable||
||previousOrFirstPageable()|returns the previous Pageable or the first if the actual is the first||
||previousPageable()|returns the previous Pageable||

2.7. QUERY EXAMPLES
---------------------------------------------------------------------------------
Visit the SPRING BOOT REPOSITORY QUERY EXAMPLES page for derived, custom and dynamic query examples.

2.8. SPECIALS
---------------------------------------------------------------------------------
For EntityManager, SQL LIKE on PostgreSQL text array column, named queries and query rewriter, visit the SPRING BOOT REPOSITORY SPECIALS page.

MORE HERE: Using Advanced LIKE Expressions, https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.query-methods
