=================================================================================
SPRING BOOT CONTROLLER TESTS
=================================================================================
For controller classes, based upon the best practices, the Communication layer of the backend should be as thin as it is possible. Therefore, following best practices, for all other processes tests should be developed but for the controllers, it can be skipped.
That said, testing the Communication layer which equals with testing the controller classes, is simplified for sending requests to the layer.
Exception is in view mode when, based upon testing needs, setting up the Model object for response should be done in the correspondent controller method, therefore testing this is necessary.

1. CONTROLLER CLASS TESTS WITH CURL
2. CONTROLLER CLASS TESTS WITH STARTED WEB APPLICATION
3. CONTROLLER CLASS TESTS IN MOCKED ENVIRONMENT

=================================================================================
1. CONTROLLER CLASS TESTS WITH CURL
=================================================================================
Before the test runs, the web application must be started up.
The cURL tests are used to test the application from the outside which means integrity test. That said, the whole application must be started beforehand.
This kind of testing is possible for controller methods in object mode.

1.1. EXTERNAL CURL TESTS
1.2. INTERNAL CURL TESTS

1.1. EXTERNAL CURL TESTS
---------------------------------------------------------------------------------
Sending requests can be done by fully starting up the server application, then using cURL commands from Powershell console.
This kind of testing is not automated since external cURL commands must be executed.
Tests will reach all the layers of the backend, database is included.
The cURL commands should be placed under the src/main/resources/cURL folder under Maven.
The cUrl tests can be used for testing out a single function or a scenario.

For a single function, when the aim is to reach existing data from the storage, that data must be recorded beforehand, practically when the application starts up (see SPRING BOOT CONFIGURATION page).
The single function tests should follow the test cases defined in the service unit test class.

For a test scenario, more cURL commands are used from a batch file. In this case when some commands are aiming for creating data in the database, no need to prepare data through configuration.
The good scenario travels through more endpoints and launches a line of actions which follow a certain path a user would travel on. Of course, the scenarios must cover all possibilities.

In case of clean CRUD API, creation of some records, querying one and all, updating, deleting, along with willingly using request errors, covers the whole functionality which means only one scenario would be enough.
In case the answer sent by the cURL is not satisfying, add -i, -v or -vi to the command line.

EXAMPLE FOR A SINGLE FUNCTION TEST WITH CURL (ONE COMMAND):
curl -X PUT -H "Accept: application/json" -H "Content-Type:application/json" --data "{\"purchaseId\": 5, \"purchaseDate\": \"2010-06-03\", \"purchaseType\": \"CARD\", \"purchaseValue\": 12, \"purchaseDescription\": \"abc\"}" "localhost:8080/api/v1/newPurchase"
END OF EXAMPLE

EXAMPLE FOR A SINGLE FUNCTION TEST WITH CURL (BATCH FILE):
curl -X PUT -H "Accept: application/json" -H "Content-Type:application/json" --data "{\"purchaseId\": 5, \"purchaseDate\": \"2010-06-03\", \"purchaseType\": \"CARD\", \"purchaseValue\": 12, \"purchaseDescription\": \"abc\"}" "localhost:8080/api/v1/newPurchase"
echo.
echo ===== Expected: 13 =====
echo.
END OF EXAMPLE

EXAMPLE FOR A SCENARIO TEST WITH CURL (BATCH FILE):
@echo off
title PurchaseRegister cURL tests

echo ===== Add New Purchases - Success =====
curl -X PUT -H "Accept: application/json" -H "Content-Type:application/json" --data "{\"purchaseId\": 5, \"purchaseDate\": \"2010-06-03\", \"purchaseType\": \"CARD\", \"purchaseValue\": 12, \"purchaseDescription\": \"abc\"}" "localhost:8080/api/v1/newPurchase"
echo.
echo ===== Expected: -9223372036854775807 =====
echo.
curl -X PUT -H "Accept: application/json" -H "Content-Type:application/json" --data "{\"purchaseId\": 5, \"purchaseDate\": \"1980-12-31\", \"purchaseType\": \"INTERNET\", \"purchaseValue\": 123.45, \"purchaseDescription\": \"pqr\"}" "localhost:8080/api/v1/newPurchase"
echo.
echo ===== Expected: -9223372036854775806 =====
echo.
curl -X PUT -H "Accept: application/json" -H "Content-Type:application/json" --data "{\"purchaseId\": 5, \"purchaseDate\": \"2020-06-03\", \"purchaseType\": \"INTERNET\", \"purchaseValue\": 48, \"purchaseDescription\": \"ooo\"}" "localhost:8080/api/v1/newPurchase"
echo.
echo ===== Expected: -9223372036854775805 =====
echo.

echo ===== Add New Purchase - Failure =====
curl -X PUT -H "Accept: application/json" -H "Content-Type:application/json" --data "{\"purchaseId\": 5, \"purchaseDate\": null, \"purchaseType\": \"CASH\", \"purchaseValue\": 12.24, \"purchaseDescription\": \"abc\"}" "localhost:8080/api/v1/newPurchase"
echo.
echo ===== Expected: -9223372036854775808 =====
echo.

echo ===== Get All Purchases =====
curl -X GET -H "Accept: application/json" -H "Content-Type:application/json" "localhost:8080/api/v1/purchases"
echo.
echo ===== Expected: [{"purchaseId":-9223372036854775807,"purchaseDate":"2010-06-03","purchaseType":"CARD","purchaseValue":12.0,"purchaseDescription":"abc"},{"purchaseId":-9223372036854775806,"purchaseDate":"1980-12-31","purchaseType":"INTERNET","purchaseValue":123.45,"purchaseDescription":"pqr"},{"purchaseId":-9223372036854775805,"purchaseDate":"2020-06-03","purchaseType":"INTERNET","purchaseValue":48.0,"purchaseDescription":"ooo"}] =====
echo.

pause
END OF EXAMPLE

1.2. INTERNAL CURL TESTS
---------------------------------------------------------------------------------
In order to keep all tests inside the project, there is possibility to use internal cURL tests as well.
In order to have this solution, need to pre-install the cURL normally, then the access happens via using the Process and the ProcessBuilder classes.
Alternatively, instead of ProcessBuilder, the Runtime.getRuntime() method can be used as well. Here, the cURL must be added to the Path environmental variable.
The output of the Process is an InputStream which must be consumed during the command run. At the same time, it should be converted to String which will be comparable.
Note that the answer generated by cURL can be different in different cURL versions.
Because this type of cURL testing reaches the Communication layer from the inside, it is possible to mock the Business layer. However, cURL tests are mostly used in integrity tests.

EXAMPLE FOR INTERNAL CURL TEST (PROCESSBUILDER):
String command = "curl -X GET https://postman-echo.com/get?foo1=bar1&foo2=bar2";
ProcessBuilder processBuilder = new ProcessBuilder(command.split(" "));
processBuilder.command(new String[]{"curl", "-X", "GET", "https://postman-echo.com?foo=bar"}); //add optional additional command by its words
processBuilder.directory(new File("/home/")); //in case cURL is not on the path environmental variable, the work directory must be shown
Process process = processBuilder.start();
InputStream inputStream = process.getInputStream();
int exitCode = process.exitValue();
process.destroy();
END OF EXAMPLE

EXAMPLE FOR INTERNAL CURL TEST (GETRUNTIME):
String command = "curl -X POST https://postman-echo.com/post --data foo1=bar1&foo2=bar2";
Process process = Runtime.getRuntime().exec(command);
InputStream inputStream = process.getInputStream();
int exitCode = process.exitValue();
process.destroy();
END OF EXAMPLE

EXAMPLE FOR A CLASS CONSUMING INPUTSTREAM:
package packageName;

import java.io.BufferedInputStream;
import java.io.IOException;
import java.io.InputStream;

public class ProcessCurlOutput {

    public static String inputStreamToString(InputStream inputStream) {
        final int bufferSize = 8 * 1024;
        byte[] buffer = new byte[bufferSize];
        final StringBuilder builder = new StringBuilder();
        try (BufferedInputStream bufferedInputStream = new BufferedInputStream(inputStream, bufferSize)) {
            while (bufferedInputStream.read(buffer) != -1) {
                builder.append(new String(buffer));
            }
        }
        catch (IOException ex) {
            //process exception
        }
        return builder.toString();
    }

    public static void consumeInputStream(InputStream inputStream) {
        inputStreamToString(inputStream);
    }
}
END OF EXAMPLE

EXAMPLE FOR CONTROLLER TEST CLASS FOR CURL COMMANDS:
package packageName;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;

import org.junit.Assert;
import org.junit.Test;

public class ControllerCurlTest {

    @Test
    public void givenCommand_whenCalled_thenProduceZeroExitCode() throws IOException {
        String command = "curl -X GET https://postman-echo.com/get?foo1=bar1&foo2=bar2";
        ProcessBuilder processBuilder = new ProcessBuilder(command.split(" "));
        processBuilder.directory(new File("/home/"));
        Process process = processBuilder.start();
        InputStream inputStream = process.getInputStream();
        // Consume the inputStream so the process can exit
        ProcessCurlOutput.consumeInputStream(inputStream);
        int exitCode = process.exitValue();

        Assert.assertEquals(0, exitCode);
    }

    @Test
    public void givenNewCommands_whenCalled_thenCheckIfIsAlive() throws IOException {
        String command = "curl -X GET https://postman-echo.com/get?foo1=bar1&foo2=bar2";
        ProcessBuilder processBuilder = new ProcessBuilder(command.split(" "));
        processBuilder.directory(new File("/home/"));
        Process process = processBuilder.start();

        // Re-use processBuilder
        processBuilder.command(new String[]{"newCommand", "arguments"});

        Assert.assertEquals(true, process.isAlive());
    }

    @Test
    public void whenRequestPost_thenCheckIfReturnContent() throws IOException {
        String command = "curl -X POST https://postman-echo.com/post --data foo1=bar1&foo2=bar2";
        Process process = Runtime.getRuntime().exec(command);

        // Get the POST result
        String content = ProcessCurlOutput.inputStreamToString(process.getInputStream());

        Assert.assertTrue(null != content && !content.isEmpty());
    }
}
END OF EXAMPLE

=================================================================================
2. CONTROLLER CLASS TESTS WITH STARTED WEB APPLICATION
=================================================================================
The @SpringBootTest in a class marks that the class is for testing a controller class.
For all tests, the Spring Boot will start the web service (servlet) layer, practically the whole web application but in demo mode.
The @Autowired annotation expresses injection the marked class (e.g. the controller) into the test class before starting up the app. In case of using the TestRestTemplate class with this annotation, the given class will handle the storage and the service layers together automatically.
This kind of testing is possible for controller methods in any mode.

In case if using JUnit4, the class-level @RunWith(SpringRunner.class) annotation is needed additionally.

The application layers will be cached by default so Spring will not start-stop the application per test method.
In case the test modifies the context (e.g. the state of a singleton bean or the state of an embedded database) and that modification could have an effect on other test results, usage of @DirtiesContext annotation is needed. When the flow reaches this annotation, the context will be emptied and reloaded.
Effect of the @DirtiesContext annotation depends on its placement:
    a. before class
    b. before each test method
    c. before a specific test method
    d. after a specific test method
    e. after each test method
    f. after class

In case there are more controllers, because running tests for them is executes parallel, there can be communication conflicts (they should use the same (8080 by default) port).
That said, the @SpringBootTest annotation can have the next formulas:
    a. @SpringBootTest
    b. @SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)
In case of the latter version, an additional @Value (under older Spring versions, @LocalServerPort) annotation and its field must be declared (will be used by Spring automatically). In case the port can be given specifically, use other constant of WebEnvironment.
The @LocalServerPort is deprecated under newer Spring versions, and because the servlet is started along with the context which is cached, can lead to unwanted errors and conflicts.
In case the servlet startup and loading the context can be tested via testing the Main class, furthermore the controller class can be tested in a mocked web environment, the test cases will be separated from the startup and there should not be problems due to cached context either, see the next session.

In case the test of Spring Boot dependency is not added to the project, your may add the next dependency to your pom.xml:
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-test</artifactId>
        </dependency>

EXAMPLE FOR CONTROLLER TEST CLASS SIGNATURE (ONE CONTROLLER):
@SpringBootTest
public class ControllerClassNameTest {
...
}
END OF EXAMPLE

EXAMPLE FOR CONTROLLER TEST CLASS SIGNATURE (MORE CONTROLLERS, OLDER SPRING VERSIONS):
@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)
public class ControllerClassNameTest {
    @LocalServerPort
	private int port;
...
}
END OF EXAMPLE

EXAMPLE FOR CONTROLLER TEST CLASS SIGNATURE (MORE CONTROLLERS, NEWER SPRING VERSIONS):
@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)
public class ControllerClassNameTest {
    @Value(value="${local.server.port}")
	private int port;
...
}
END OF EXAMPLE

EXAMPLE FOR A CONTROLLER TEST CLASS:
import org.junit.jupiter.api.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.boot.web.server.LocalServerPort;
import org.springframework.beans.factory.annotation.Value;

@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)
public class ControllerClassNameTest {

    @LocalServerPort //older versions; or:
    @Value(value="${local.server.port}")
	private int port;

    @Autowired
    private TestRestTemplate restTemplate;

    @Test
	public void getCountOnEmptyStorage() throws Exception {
            Assertions.assertEquals(..., this.restTemplate.getForObject("http://localhost:" + port + "/count", ...));
	}
}
END OF EXAMPLE

=================================================================================
3. CONTROLLER CLASS TESTS IN MOCKED ENVIRONMENT
=================================================================================
Visit the SPRING BOOT CONTROLLER MOCKED TESTS page.

MORE HERE: https://www.baeldung.com/exception-handling-for-rest-with-spring

=>SPRING BOOT
=>SPRING BOOT TESTS
=>SPRING BOOT CONTROLLER MOCKED TESTS
=>SPRING BOOT CONFIGURATION
=>MOCKITO
=>JUNIT
=>SPRING BOOT CONTROLLER
=>SPRING MODELANDVIEW
=>SPRING BOOT VALIDATION
=>WEB APPLICATION;4. CURL
=>SERIALIZATION
